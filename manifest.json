{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json",
        "dbt_version": "1.2.0",
        "generated_at": "2022-09-23T12:59:05.676922Z",
        "invocation_id": "15931593-3cab-43fc-9621-fc3d1dd22535",
        "env": {},
        "project_id": "76580c2d401f0f765d6768e2dd183549",
        "user_id": null,
        "send_anonymous_usage_stats": false,
        "adapter_type": "athena"
    },
    "nodes": {
        "model.my_meltano_project.wallet": {
            "raw_sql": "with raw_data as (\n    select\n        api_client_name,\n        origin,\n        request_name,\n        wallet_address,\n        datetime,\n        _ingest_version,\n        event,\n        timestamp,\n        wallet_provider,\n        total_value,\n        cast(NULL as double) as wallet_value,\n        cast(NULL as double) as nft_value,\n        cast(NULL as double) as protocols_value,\n        event_date\n    from \n        {{\u00a0ref('stg_wallet_connected_to_api2')\u00a0}}\n    where \n        True -- placeholder for filters\n        -- and event_date >= DATE (now() - INTERVAL '3' DAY) -- filter for debugging\n    UNION ALL\n    select\n        api_client_name,\n        origin,\n        request_name,\n        wallet_address,\n        datetime,\n        _ingest_version,\n        event,\n        timestamp,\n        wallet_provider,\n        total_value,\n        wallet_value,\n        nft_value,\n        total_value - coalesce(wallet_value, 0) as protocols_value,\n        event_date\n    from \n        {{\u00a0ref('stg_portfolio_decomposition')\u00a0}}\n    where \n        True -- placeholder for filters\n        -- and event_date >= DATE (now() - INTERVAL '3' DAY) -- filter for debugging\n), \nwallets_all as (\n    select \n        wallet_address, \n        min(datetime) as min_reg,\n        max(datetime) as max_reg\n    from \n        raw_data\n    group by 1\n),\nfirst_wallet_provider as (\n    select \n        wallet_address, \n        wallet_provider as first_wallet_provider,\n        ROW_NUMBER () OVER (\n            PARTITION BY wallet_address\n            ORDER BY datetime, wallet_provider\n        ) as top, \n        ROW_NUMBER () OVER (\n            PARTITION BY wallet_address\n            ORDER BY datetime desc, wallet_provider\n        ) as bottom\n    from \n        raw_data\n    where \n        wallet_provider is not null\n),\nfirst_api_client_name as (\n    select \n        wallet_address, \n        api_client_name as first_api_client_name,\n        ROW_NUMBER () OVER (\n            PARTITION BY wallet_address\n            ORDER BY datetime, api_client_name\n        ) as top\n    from \n        raw_data\n    where \n        api_client_name is not null\n),\nfirst_origin as (\n    select \n        wallet_address, \n        origin as first_origin,\n        ROW_NUMBER () OVER (\n            PARTITION BY wallet_address\n            ORDER BY datetime, origin\n        ) as top,\n        ROW_NUMBER () OVER (\n            PARTITION BY wallet_address\n            ORDER BY datetime, origin\n        ) as bottom\n    from \n        raw_data\n    where \n        origin is not null\n),\nwallets_ios as (\n    select \n        wallet_address, \n        min(datetime) as min_ios,\n        max(datetime) as max_ios,\n        count(distinct DATE(datetime)) as days_ios\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin = 'ios://zerion'\n        )\n    group by 1\n),\nwallets_android as (\n    select \n        wallet_address, \n        min(datetime) as min_android,\n        max(datetime) as max_android,\n        count(distinct DATE(datetime)) as days_android\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin = 'android://zerion'\n    )\n    group by 1\n),\nwallets_web as (\n    select \n        wallet_address, \n        min(datetime) as min_web,\n        max(datetime) as max_web,\n        count(distinct DATE(datetime)) as days_web\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin = 'https://app.zerion.io'\n    )\n    group by 1\n),\nwallets_stakedao as (\n    select \n        wallet_address, \n        min(datetime) as min_stakedao,\n        max(datetime) as max_stakedao,\n        count(distinct DATE(datetime)) as days_stakedao\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin LIKE '%stakedao%'\n    )\n    group by 1\n),\nwallets_tokenary as (\n    select \n        wallet_address, \n        min(datetime) as min_tokenary,\n        max(datetime) as max_tokenary,\n        count(distinct DATE(datetime)) as days_tokenary\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin LIKE '%tokenary%'\n    )\n    group by 1\n),\nwallets_visifire as (\n    select \n        wallet_address, \n        min(datetime) as min_visifire,\n        max(datetime) as max_visifire,\n        count(distinct DATE(datetime)) as days_visifire\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin LIKE '%visifire%'\n    )\n    group by 1\n),\nwallets_coinburp as (\n    select \n        wallet_address, \n        min(datetime) as min_coinburp,\n        max(datetime) as max_coinburp,\n        count(distinct DATE(datetime)) as days_coinburp\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin LIKE '%coinburp%'\n    )\n    group by 1\n),\nlast_total_values as (\n    select\n        wallet_address,\n        avg_total_value as last_total_value,\n        avg_wallet_value as last_wallet_value,\n        avg_nft_value as last_nft_value,\n        avg_protocols_value as last_protocols_value,\n        ROW_NUMBER () OVER (\n        PARTITION BY wallet_address\n        ORDER BY event_date desc\n        ) as top, \n        case \n            when avg_total_value = 0.00 then '0'\n            when 0.00 < avg_total_value and avg_total_value <= 100 then '<$100'\n            when 100 < avg_total_value and avg_total_value <= 1000 then '$100 - $1000'\n            when 1000 < avg_total_value and avg_total_value <= 10000 then '$1000 - $10 000'\n            when 10000 < avg_total_value and avg_total_value <= 50000 then '$10 000 - $50 000'\n            when 50000 < avg_total_value then '>$50 000'\n            else 'unknown'\n        end as last_value_segment,\n        event_date last_event_date\n    from\n        (select \n            wallet_address, \n            event_date,\n            round(AVG(total_value), 2) as avg_total_value,\n            round(AVG(wallet_value), 2) as avg_wallet_value,\n            round(AVG(nft_value), 2) as avg_nft_value,\n            round(AVG(protocols_value), 2) as avg_protocols_value\n        from raw_data\n        group by wallet_address,  event_date\n        )\n)\nselect \n    a.wallet_address as wallet_id,\n    a.min_reg as min_reg_date,\n    wp.first_wallet_provider,\n    cn.first_api_client_name,\n    last_wp.first_wallet_provider last_wallet_provider,\n    o.first_origin,\n    last_o.first_origin last_origin,\n    ios.min_ios is not null as is_ios_user,\n    andr.min_android is not null as is_android_user,\n    web.min_web is not null as is_web_user,\n    ios.min_ios as min_ios_user_date,\n    andr.min_android as min_android_user_date,\n    web.min_web as min_web_user_date,\n    ios.max_ios as max_ios_user_date,\n    andr.max_android as max_android_user_date,\n    web.max_web as max_web_user_date,\n    ios.days_ios as num_ios_days,\n    andr.days_android as num_android_days,\n    web.days_web as num_web_days,\n    stakedao.min_stakedao is not null as is_stakedao_user,\n    tokenary.min_tokenary is not null as is_tokenary_user,\n    visifire.min_visifire is not null as is_visifire_user,\n    coinburp.min_coinburp is not null as is_coinburp_user,\n    ltv.last_total_value,\n    ltv.last_value_segment,\n    ltv.last_event_date,\n    ltv.last_wallet_value,\n    ltv.last_nft_value,\n    ltv.last_protocols_value\nfrom wallets_all as a\nleft join first_wallet_provider as wp\n    on a.wallet_address = wp.wallet_address and wp.top = 1\nleft join first_wallet_provider as last_wp\n    on a.wallet_address = last_wp.wallet_address and last_wp.bottom = 1\nleft join first_api_client_name as cn\n    on a.wallet_address = cn.wallet_address and cn.top = 1\nleft join first_origin as o\n    on a.wallet_address = o.wallet_address and o.top = 1\nleft join first_origin as last_o\n    on a.wallet_address = last_o.wallet_address and last_o.bottom = 1\nleft join wallets_android as andr\non andr.wallet_address = a.wallet_address\nleft join wallets_ios as ios\non ios.wallet_address = a.wallet_address\nleft join wallets_web as web\non web.wallet_address = a.wallet_address\nleft join wallets_stakedao as stakedao\non stakedao.wallet_address = a.wallet_address\nleft join wallets_tokenary as tokenary\non tokenary.wallet_address = a.wallet_address\nleft join wallets_visifire as visifire\non visifire.wallet_address = a.wallet_address\nleft join wallets_coinburp as coinburp\non coinburp.wallet_address = a.wallet_address\nleft join last_total_values as ltv\non a.wallet_address = ltv.wallet_address and ltv.top = 1",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_wallet_connected_to_api2",
                    "model.my_meltano_project.stg_portfolio_decomposition"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "wallet"
            ],
            "unique_id": "model.my_meltano_project.wallet",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/wallet.sql",
            "original_file_path": "models/bi/wallet.sql",
            "name": "wallet",
            "alias": "wallet",
            "checksum": {
                "name": "sha256",
                "checksum": "6bd4374d99fa711f7e4ad236679f464c6bfa178f30ea0711741dc20e3c566219"
            },
            "tags": [],
            "refs": [
                [
                    "stg_wallet_connected_to_api2"
                ],
                [
                    "stg_portfolio_decomposition"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/wallet.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1663857806.365611,
            "compiled_sql": "with raw_data as (\n    select\n        api_client_name,\n        origin,\n        request_name,\n        wallet_address,\n        datetime,\n        _ingest_version,\n        event,\n        timestamp,\n        wallet_provider,\n        total_value,\n        cast(NULL as double) as wallet_value,\n        cast(NULL as double) as nft_value,\n        cast(NULL as double) as protocols_value,\n        event_date\n    from \n        dev_pdaniil_staging.stg_wallet_connected_to_api2\n    where \n        True -- placeholder for filters\n        -- and event_date >= DATE (now() - INTERVAL '3' DAY) -- filter for debugging\n    UNION ALL\n    select\n        api_client_name,\n        origin,\n        request_name,\n        wallet_address,\n        datetime,\n        _ingest_version,\n        event,\n        timestamp,\n        wallet_provider,\n        total_value,\n        wallet_value,\n        nft_value,\n        total_value - coalesce(wallet_value, 0) as protocols_value,\n        event_date\n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition\n    where \n        True -- placeholder for filters\n        -- and event_date >= DATE (now() - INTERVAL '3' DAY) -- filter for debugging\n), \nwallets_all as (\n    select \n        wallet_address, \n        min(datetime) as min_reg,\n        max(datetime) as max_reg\n    from \n        raw_data\n    group by 1\n),\nfirst_wallet_provider as (\n    select \n        wallet_address, \n        wallet_provider as first_wallet_provider,\n        ROW_NUMBER () OVER (\n            PARTITION BY wallet_address\n            ORDER BY datetime, wallet_provider\n        ) as top, \n        ROW_NUMBER () OVER (\n            PARTITION BY wallet_address\n            ORDER BY datetime desc, wallet_provider\n        ) as bottom\n    from \n        raw_data\n    where \n        wallet_provider is not null\n),\nfirst_api_client_name as (\n    select \n        wallet_address, \n        api_client_name as first_api_client_name,\n        ROW_NUMBER () OVER (\n            PARTITION BY wallet_address\n            ORDER BY datetime, api_client_name\n        ) as top\n    from \n        raw_data\n    where \n        api_client_name is not null\n),\nfirst_origin as (\n    select \n        wallet_address, \n        origin as first_origin,\n        ROW_NUMBER () OVER (\n            PARTITION BY wallet_address\n            ORDER BY datetime, origin\n        ) as top,\n        ROW_NUMBER () OVER (\n            PARTITION BY wallet_address\n            ORDER BY datetime, origin\n        ) as bottom\n    from \n        raw_data\n    where \n        origin is not null\n),\nwallets_ios as (\n    select \n        wallet_address, \n        min(datetime) as min_ios,\n        max(datetime) as max_ios,\n        count(distinct DATE(datetime)) as days_ios\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin = 'ios://zerion'\n        )\n    group by 1\n),\nwallets_android as (\n    select \n        wallet_address, \n        min(datetime) as min_android,\n        max(datetime) as max_android,\n        count(distinct DATE(datetime)) as days_android\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin = 'android://zerion'\n    )\n    group by 1\n),\nwallets_web as (\n    select \n        wallet_address, \n        min(datetime) as min_web,\n        max(datetime) as max_web,\n        count(distinct DATE(datetime)) as days_web\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin = 'https://app.zerion.io'\n    )\n    group by 1\n),\nwallets_stakedao as (\n    select \n        wallet_address, \n        min(datetime) as min_stakedao,\n        max(datetime) as max_stakedao,\n        count(distinct DATE(datetime)) as days_stakedao\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin LIKE '%stakedao%'\n    )\n    group by 1\n),\nwallets_tokenary as (\n    select \n        wallet_address, \n        min(datetime) as min_tokenary,\n        max(datetime) as max_tokenary,\n        count(distinct DATE(datetime)) as days_tokenary\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin LIKE '%tokenary%'\n    )\n    group by 1\n),\nwallets_visifire as (\n    select \n        wallet_address, \n        min(datetime) as min_visifire,\n        max(datetime) as max_visifire,\n        count(distinct DATE(datetime)) as days_visifire\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin LIKE '%visifire%'\n    )\n    group by 1\n),\nwallets_coinburp as (\n    select \n        wallet_address, \n        min(datetime) as min_coinburp,\n        max(datetime) as max_coinburp,\n        count(distinct DATE(datetime)) as days_coinburp\n    from (\n        select\n            wallet_address,\n            datetime\n        from raw_data\n        where origin LIKE '%coinburp%'\n    )\n    group by 1\n),\nlast_total_values as (\n    select\n        wallet_address,\n        avg_total_value as last_total_value,\n        avg_wallet_value as last_wallet_value,\n        avg_nft_value as last_nft_value,\n        avg_protocols_value as last_protocols_value,\n        ROW_NUMBER () OVER (\n        PARTITION BY wallet_address\n        ORDER BY event_date desc\n        ) as top, \n        case \n            when avg_total_value = 0.00 then '0'\n            when 0.00 < avg_total_value and avg_total_value <= 100 then '<$100'\n            when 100 < avg_total_value and avg_total_value <= 1000 then '$100 - $1000'\n            when 1000 < avg_total_value and avg_total_value <= 10000 then '$1000 - $10 000'\n            when 10000 < avg_total_value and avg_total_value <= 50000 then '$10 000 - $50 000'\n            when 50000 < avg_total_value then '>$50 000'\n            else 'unknown'\n        end as last_value_segment,\n        event_date last_event_date\n    from\n        (select \n            wallet_address, \n            event_date,\n            round(AVG(total_value), 2) as avg_total_value,\n            round(AVG(wallet_value), 2) as avg_wallet_value,\n            round(AVG(nft_value), 2) as avg_nft_value,\n            round(AVG(protocols_value), 2) as avg_protocols_value\n        from raw_data\n        group by wallet_address,  event_date\n        )\n)\nselect \n    a.wallet_address as wallet_id,\n    a.min_reg as min_reg_date,\n    wp.first_wallet_provider,\n    cn.first_api_client_name,\n    last_wp.first_wallet_provider last_wallet_provider,\n    o.first_origin,\n    last_o.first_origin last_origin,\n    ios.min_ios is not null as is_ios_user,\n    andr.min_android is not null as is_android_user,\n    web.min_web is not null as is_web_user,\n    ios.min_ios as min_ios_user_date,\n    andr.min_android as min_android_user_date,\n    web.min_web as min_web_user_date,\n    ios.max_ios as max_ios_user_date,\n    andr.max_android as max_android_user_date,\n    web.max_web as max_web_user_date,\n    ios.days_ios as num_ios_days,\n    andr.days_android as num_android_days,\n    web.days_web as num_web_days,\n    stakedao.min_stakedao is not null as is_stakedao_user,\n    tokenary.min_tokenary is not null as is_tokenary_user,\n    visifire.min_visifire is not null as is_visifire_user,\n    coinburp.min_coinburp is not null as is_coinburp_user,\n    ltv.last_total_value,\n    ltv.last_value_segment,\n    ltv.last_event_date,\n    ltv.last_wallet_value,\n    ltv.last_nft_value,\n    ltv.last_protocols_value\nfrom wallets_all as a\nleft join first_wallet_provider as wp\n    on a.wallet_address = wp.wallet_address and wp.top = 1\nleft join first_wallet_provider as last_wp\n    on a.wallet_address = last_wp.wallet_address and last_wp.bottom = 1\nleft join first_api_client_name as cn\n    on a.wallet_address = cn.wallet_address and cn.top = 1\nleft join first_origin as o\n    on a.wallet_address = o.wallet_address and o.top = 1\nleft join first_origin as last_o\n    on a.wallet_address = last_o.wallet_address and last_o.bottom = 1\nleft join wallets_android as andr\non andr.wallet_address = a.wallet_address\nleft join wallets_ios as ios\non ios.wallet_address = a.wallet_address\nleft join wallets_web as web\non web.wallet_address = a.wallet_address\nleft join wallets_stakedao as stakedao\non stakedao.wallet_address = a.wallet_address\nleft join wallets_tokenary as tokenary\non tokenary.wallet_address = a.wallet_address\nleft join wallets_visifire as visifire\non visifire.wallet_address = a.wallet_address\nleft join wallets_coinburp as coinburp\non coinburp.wallet_address = a.wallet_address\nleft join last_total_values as ltv\non a.wallet_address = ltv.wallet_address and ltv.top = 1",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.wallet"
        },
        "model.my_meltano_project.wallet__has__position": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"position_date\"]\n    )\n}}\n\nwith t1 as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from \n        {{ref ('link__wallet__has__position')}}    --\"bi_anchor\".\"link__wallet__has__position\" \n    where 1=1\n        --and position_date = current_date - interval '3' day\n        {% if is_incremental() %} \n            and position_date >= ( \n                    select max(position_date) - interval '1' day from {{ this }} \n                    )  \n        {% endif %}\n),\n\nt2 as (\n    select\n        wallet_id\n        ,position_id\n        ,LAST_VALUE(quantity_in_position) over (partition by wallet_id, position_id, position_date order by position_timestamp rows between unbounded preceding and unbounded following) as quantity_in_position\n        ,LAST_VALUE(position_type) over (partition by wallet_id, position_id, position_date order by position_timestamp rows between unbounded preceding and unbounded following) as position_type\n        ,LAST_VALUE(position_value_usd) over (partition by wallet_id, position_id, position_date order by position_timestamp rows between unbounded preceding and unbounded following) as position_value_usd\n        ,LAST_VALUE(position_timestamp) over (partition by wallet_id, position_id, position_date order by position_timestamp rows between unbounded preceding and unbounded following) as position_timestamp\n        ,position_date\n    from \n        t1\n),\n\npre_final as(\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from \n        t2\n    group by\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n),\n\nfinal as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from \n        pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.link__wallet__has__position"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "position_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "wallet__has__position"
            ],
            "unique_id": "model.my_meltano_project.wallet__has__position",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/wallet__has__position.sql",
            "original_file_path": "models/bi/wallet__has__position.sql",
            "name": "wallet__has__position",
            "alias": "wallet__has__position",
            "checksum": {
                "name": "sha256",
                "checksum": "e86c201f170e39ba3c0a8130cf9d4204e5ef344ec2928fa81c6218e6298b7de2"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__has__position"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/wallet__has__position.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "position_date"
                ]
            },
            "created_at": 1663857806.3799882,
            "compiled_sql": "\n\nwith t1 as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from \n        dev_pdaniil_anchor.link__wallet__has__position    --\"bi_anchor\".\"link__wallet__has__position\" \n    where 1=1\n        --and position_date = current_date - interval '3' day\n         \n            and position_date >= ( \n                    select max(position_date) - interval '1' day from dev_pdaniil.wallet__has__position \n                    )  \n        \n),\n\nt2 as (\n    select\n        wallet_id\n        ,position_id\n        ,LAST_VALUE(quantity_in_position) over (partition by wallet_id, position_id, position_date order by position_timestamp rows between unbounded preceding and unbounded following) as quantity_in_position\n        ,LAST_VALUE(position_type) over (partition by wallet_id, position_id, position_date order by position_timestamp rows between unbounded preceding and unbounded following) as position_type\n        ,LAST_VALUE(position_value_usd) over (partition by wallet_id, position_id, position_date order by position_timestamp rows between unbounded preceding and unbounded following) as position_value_usd\n        ,LAST_VALUE(position_timestamp) over (partition by wallet_id, position_id, position_date order by position_timestamp rows between unbounded preceding and unbounded following) as position_timestamp\n        ,position_date\n    from \n        t1\n),\n\npre_final as(\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from \n        t2\n    group by\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n),\n\nfinal as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from \n        pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.wallet__has__position"
        },
        "model.my_meltano_project.d_asset": {
            "raw_sql": "with t1 as (\n    select\n        asset_id\n        ,asset_date\n        ,asset_name\n        ,asset_symbol\n        ,asset_decimals\n    from {{ref ('anchor__asset')}}      --\"bi_anchor\".\"anchor__event\"\n    left join {{ref ('attr__asset__asset_name')}}   --\"bi_anchor\".\"attr__asset__asset_name\"\n        using (asset_id)\n    left join {{ref ('attr__asset__asset_symbol')}}     --\"bi_anchor\".\"attr__asset__asset_symbol\"\n        using (asset_id)\n    left join {{ref ('attr__asset__asset_decimals')}}    --\"bi_anchor\".\"attr__asset__asset_decimals\"\n        using (asset_id)\n),\n\nfinal as (\n    select\n        asset_id\n        ,asset_date\n        ,asset_name\n        ,asset_symbol\n        ,asset_decimals\n    from t1\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.anchor__asset",
                    "model.my_meltano_project.attr__asset__asset_name",
                    "model.my_meltano_project.attr__asset__asset_symbol",
                    "model.my_meltano_project.attr__asset__asset_decimals",
                    "model.my_meltano_project.anchor__asset",
                    "model.my_meltano_project.attr__asset__asset_name",
                    "model.my_meltano_project.attr__asset__asset_symbol",
                    "model.my_meltano_project.attr__asset__asset_decimals"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "d_asset"
            ],
            "unique_id": "model.my_meltano_project.d_asset",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/d_asset.sql",
            "original_file_path": "models/bi/d_asset.sql",
            "name": "d_asset",
            "alias": "d_asset",
            "checksum": {
                "name": "sha256",
                "checksum": "3290ab9a66a99f02cdeb4367eca9f369a17f5ccd8b251fedcd196085ecfb5687"
            },
            "tags": [],
            "refs": [
                [
                    "anchor__asset"
                ],
                [
                    "attr__asset__asset_name"
                ],
                [
                    "attr__asset__asset_symbol"
                ],
                [
                    "attr__asset__asset_decimals"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "dimension table for asset",
            "columns": {
                "asset_id": {
                    "name": "asset_id",
                    "description": "asset id",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "asset_date": {
                    "name": "asset_date",
                    "description": "When first saw?",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "asset_name": {
                    "name": "asset_name",
                    "description": "What is the name of the asset?",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "asset_symbol": {
                    "name": "asset_symbol",
                    "description": "What is the asset symbol?",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "asset_decimals": {
                    "name": "asset_decimals",
                    "description": "what extent should quantity be divided by 10 to get the number of tokens?",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "my_meltano_project://models/schema.yml",
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/d_asset.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1663937945.7064292,
            "compiled_sql": "with t1 as (\n    select\n        asset_id\n        ,asset_date\n        ,asset_name\n        ,asset_symbol\n        ,asset_decimals\n    from dev_pdaniil_anchor.anchor__asset      --\"bi_anchor\".\"anchor__event\"\n    left join dev_pdaniil_anchor.attr__asset__asset_name   --\"bi_anchor\".\"attr__asset__asset_name\"\n        using (asset_id)\n    left join dev_pdaniil_anchor.attr__asset__asset_symbol     --\"bi_anchor\".\"attr__asset__asset_symbol\"\n        using (asset_id)\n    left join dev_pdaniil_anchor.attr__asset__asset_decimals    --\"bi_anchor\".\"attr__asset__asset_decimals\"\n        using (asset_id)\n),\n\nfinal as (\n    select\n        asset_id\n        ,asset_date\n        ,asset_name\n        ,asset_symbol\n        ,asset_decimals\n    from t1\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.d_asset"
        },
        "model.my_meltano_project.d_event": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nwith t1 as (\n    select\n        event_id\n        ,event_date\n    from {{ref ('anchor__event')}}      --\"bi_anchor\".\"anchor__event\"\n    where 1=1\n    {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n),\n\nt2 as (\n    select\n        event_id\n        ,event_type\n    from {{ref ('attr__event__event_type')}}   --\"bi_anchor\".\"attr__event__event_type\"\n    where 1=1\n    {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n),\n\nt3 as (\n    select\n        event_id\n        ,event_origin\n    from {{ref ('attr__event__event_origin')}}     --\"bi_anchor\".\"attr__event__event_origin\"\n    where 1=1\n    {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n),\n\nt4 as (\n    select\n        event_id\n        ,event_api_client_name\n    from {{ref ('attr__event__event_api_client_name')}}    --\"bi_anchor\".\"attr__event__event_api_client_name\"\n    where 1=1\n    {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n),\n\npre_final as (\n    select\n        event_id\n        ,event_type\n        ,event_origin\n        ,event_api_client_name\n        ,event_date\n    from t1\n    left join t2 using (event_id)\n    left join t3 using (event_id)\n    left join t4 using (event_id)\n),\n\nfinal as (\n    select\n        event_id\n        ,event_type\n        ,event_origin\n        ,event_api_client_name\n        ,event_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.anchor__event",
                    "model.my_meltano_project.attr__event__event_type",
                    "model.my_meltano_project.attr__event__event_origin",
                    "model.my_meltano_project.attr__event__event_api_client_name"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "d_event"
            ],
            "unique_id": "model.my_meltano_project.d_event",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/d_event.sql",
            "original_file_path": "models/bi/d_event.sql",
            "name": "d_event",
            "alias": "d_event",
            "checksum": {
                "name": "sha256",
                "checksum": "95b900defe8e9a158aeed5a361d5bf546c0c110d84c424238c0635133074871d"
            },
            "tags": [],
            "refs": [
                [
                    "anchor__event"
                ],
                [
                    "attr__event__event_type"
                ],
                [
                    "attr__event__event_origin"
                ],
                [
                    "attr__event__event_api_client_name"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/d_event.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.3903413,
            "compiled_sql": "\n\nwith t1 as (\n    select\n        event_id\n        ,event_date\n    from dev_pdaniil_anchor.anchor__event      --\"bi_anchor\".\"anchor__event\"\n    where 1=1\n     \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil.d_event \n                        )  \n        \n),\n\nt2 as (\n    select\n        event_id\n        ,event_type\n    from dev_pdaniil_anchor.attr__event__event_type   --\"bi_anchor\".\"attr__event__event_type\"\n    where 1=1\n     \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil.d_event \n                        )  \n        \n),\n\nt3 as (\n    select\n        event_id\n        ,event_origin\n    from dev_pdaniil_anchor.attr__event__event_origin     --\"bi_anchor\".\"attr__event__event_origin\"\n    where 1=1\n     \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil.d_event \n                        )  \n        \n),\n\nt4 as (\n    select\n        event_id\n        ,event_api_client_name\n    from dev_pdaniil_anchor.attr__event__event_api_client_name    --\"bi_anchor\".\"attr__event__event_api_client_name\"\n    where 1=1\n     \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil.d_event \n                        )  \n        \n),\n\npre_final as (\n    select\n        event_id\n        ,event_type\n        ,event_origin\n        ,event_api_client_name\n        ,event_date\n    from t1\n    left join t2 using (event_id)\n    left join t3 using (event_id)\n    left join t4 using (event_id)\n),\n\nfinal as (\n    select\n        event_id\n        ,event_type\n        ,event_origin\n        ,event_api_client_name\n        ,event_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.d_event"
        },
        "model.my_meltano_project.d_transaction": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith anchor__transaction as (\n    select\n        transaction_id\n        ,transaction_date\n    from {{ref ('anchor__transaction')}}  at  --\"bi_anchor\".\"anchor__transaction\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_origin as (\n    select\n        transaction_id\n        ,transaction_origin\n    from {{ref ('attr__transaction__transaction_origin')}}     --\"bi_anchor\".\"attr__transaction__transaction_origin\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_api_client_name as (\n    select\n        transaction_id\n        ,transaction_api_client_name\n    from {{ref ('attr__transaction__transaction_api_client_name')}}    --\"bi_anchor\".\"attr__transaction__transaction_api_client_name\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_context as (\n    select\n        transaction_id\n        ,transaction_context\n    from {{ref ('attr__transaction__transaction_context')}}    --\"bi_anchor\".\"attr__transaction__transaction_context\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_type as (\n    select\n        transaction_id\n        ,transaction_type\n    from {{ref ('attr__transaction__transaction_type')}}   --\"bi_anchor\".\"attr__transaction__transaction_type\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_contract_type as (\n    select\n        transaction_id\n        ,transaction_contract_type\n    from {{ref ('attr__transaction__transaction_contract_type')}}  --\"bi_anchor\".\"attr__transaction__transaction_contract_type\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_amount_received_usd as (\n    select\n        transaction_id\n        ,transaction_amount_received_usd\n    from {{ref ('attr__transaction__transaction_amount_received_usd')}}    --\"bi_anchor\".\"attr__transaction__transaction_amount_received_usd\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_amount_sent_usd as (\n    select\n        transaction_id\n        ,transaction_amount_sent_usd\n    from {{ref ('attr__transaction__transaction_amount_sent_usd')}}    --\"bi_anchor\".\"attr__transaction__transaction_amount_sent_usd\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_value_usd as (\n    select\n        transaction_id\n        ,transaction_value_usd\n    from {{ref ('calc__transaction__transaction_value_usd')}}    --\"bi_calc\".\"calc__transaction__transaction_value_usd\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_zerion_fee_usd as (\n    select\n        transaction_id\n        ,transaction_zerion_fee_usd\n    from {{ref ('attr__transaction__transaction_zerion_fee_usd')}}     --\"bi_anchor\".\"attr__transaction__transaction_zerion_fee_usd\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_trash as (\n    select\n        transaction_id\n        ,transaction_trash\n    from {{ref ('calc__transaction__transaction_trash')}}     --\"bi_calc\".\"calc__transaction__transaction_trash\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\nt1 as (\n    select\n        transaction_id\n        ,transaction_origin\n        ,transaction_api_client_name\n        ,transaction_context\n        ,transaction_type\n        ,transaction_contract_type\n        ,transaction_amount_received_usd\n        ,transaction_amount_sent_usd\n        ,transaction_value_usd\n        ,transaction_zerion_fee_usd\n        ,transaction_trash\n        ,anchor__transaction.transaction_date\n    from anchor__transaction anchor__transaction\n    left join transaction_origin using (transaction_id)\n    left join transaction_api_client_name using (transaction_id)\n    left join transaction_context using (transaction_id)\n    left join transaction_type using (transaction_id)\n    left join transaction_contract_type using (transaction_id)\n    left join transaction_amount_received_usd using (transaction_id)\n    left join transaction_amount_sent_usd using (transaction_id)\n    left join transaction_value_usd using (transaction_id)\n    left join transaction_zerion_fee_usd using (transaction_id)\n    left join transaction_trash using (transaction_id)\n\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_origin\n        ,transaction_api_client_name\n        ,transaction_context\n        ,transaction_type\n        ,transaction_contract_type\n        ,transaction_amount_received_usd\n        ,transaction_amount_sent_usd\n        ,transaction_value_usd\n        ,transaction_zerion_fee_usd\n        ,transaction_trash\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.anchor__transaction",
                    "model.my_meltano_project.attr__transaction__transaction_origin",
                    "model.my_meltano_project.attr__transaction__transaction_api_client_name",
                    "model.my_meltano_project.attr__transaction__transaction_context",
                    "model.my_meltano_project.attr__transaction__transaction_type",
                    "model.my_meltano_project.attr__transaction__transaction_contract_type",
                    "model.my_meltano_project.attr__transaction__transaction_amount_received_usd",
                    "model.my_meltano_project.attr__transaction__transaction_amount_sent_usd",
                    "model.my_meltano_project.calc__transaction__transaction_value_usd",
                    "model.my_meltano_project.attr__transaction__transaction_zerion_fee_usd",
                    "model.my_meltano_project.calc__transaction__transaction_trash"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "d_transaction"
            ],
            "unique_id": "model.my_meltano_project.d_transaction",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/d_transaction.sql",
            "original_file_path": "models/bi/d_transaction.sql",
            "name": "d_transaction",
            "alias": "d_transaction",
            "checksum": {
                "name": "sha256",
                "checksum": "7e642c358d904a0a7474c3fd12a02932d1464aed8956c466374d6b537f9a0869"
            },
            "tags": [],
            "refs": [
                [
                    "anchor__transaction"
                ],
                [
                    "attr__transaction__transaction_origin"
                ],
                [
                    "attr__transaction__transaction_api_client_name"
                ],
                [
                    "attr__transaction__transaction_context"
                ],
                [
                    "attr__transaction__transaction_type"
                ],
                [
                    "attr__transaction__transaction_contract_type"
                ],
                [
                    "attr__transaction__transaction_amount_received_usd"
                ],
                [
                    "attr__transaction__transaction_amount_sent_usd"
                ],
                [
                    "calc__transaction__transaction_value_usd"
                ],
                [
                    "attr__transaction__transaction_zerion_fee_usd"
                ],
                [
                    "calc__transaction__transaction_trash"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/d_transaction.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.3964174,
            "compiled_sql": "\n\nwith anchor__transaction as (\n    select\n        transaction_id\n        ,transaction_date\n    from dev_pdaniil_anchor.anchor__transaction  at  --\"bi_anchor\".\"anchor__transaction\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_origin as (\n    select\n        transaction_id\n        ,transaction_origin\n    from dev_pdaniil_anchor.attr__transaction__transaction_origin     --\"bi_anchor\".\"attr__transaction__transaction_origin\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_api_client_name as (\n    select\n        transaction_id\n        ,transaction_api_client_name\n    from dev_pdaniil_anchor.attr__transaction__transaction_api_client_name    --\"bi_anchor\".\"attr__transaction__transaction_api_client_name\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_context as (\n    select\n        transaction_id\n        ,transaction_context\n    from dev_pdaniil_anchor.attr__transaction__transaction_context    --\"bi_anchor\".\"attr__transaction__transaction_context\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_type as (\n    select\n        transaction_id\n        ,transaction_type\n    from dev_pdaniil_anchor.attr__transaction__transaction_type   --\"bi_anchor\".\"attr__transaction__transaction_type\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_contract_type as (\n    select\n        transaction_id\n        ,transaction_contract_type\n    from dev_pdaniil_anchor.attr__transaction__transaction_contract_type  --\"bi_anchor\".\"attr__transaction__transaction_contract_type\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_amount_received_usd as (\n    select\n        transaction_id\n        ,transaction_amount_received_usd\n    from dev_pdaniil_anchor.attr__transaction__transaction_amount_received_usd    --\"bi_anchor\".\"attr__transaction__transaction_amount_received_usd\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_amount_sent_usd as (\n    select\n        transaction_id\n        ,transaction_amount_sent_usd\n    from dev_pdaniil_anchor.attr__transaction__transaction_amount_sent_usd    --\"bi_anchor\".\"attr__transaction__transaction_amount_sent_usd\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_value_usd as (\n    select\n        transaction_id\n        ,transaction_value_usd\n    from dev_pdaniil_calc.calc__transaction__transaction_value_usd    --\"bi_calc\".\"calc__transaction__transaction_value_usd\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_zerion_fee_usd as (\n    select\n        transaction_id\n        ,transaction_zerion_fee_usd\n    from dev_pdaniil_anchor.attr__transaction__transaction_zerion_fee_usd     --\"bi_anchor\".\"attr__transaction__transaction_zerion_fee_usd\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_trash as (\n    select\n        transaction_id\n        ,transaction_trash\n    from dev_pdaniil_calc.calc__transaction__transaction_trash     --\"bi_calc\".\"calc__transaction__transaction_trash\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.d_transaction \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\nt1 as (\n    select\n        transaction_id\n        ,transaction_origin\n        ,transaction_api_client_name\n        ,transaction_context\n        ,transaction_type\n        ,transaction_contract_type\n        ,transaction_amount_received_usd\n        ,transaction_amount_sent_usd\n        ,transaction_value_usd\n        ,transaction_zerion_fee_usd\n        ,transaction_trash\n        ,anchor__transaction.transaction_date\n    from anchor__transaction anchor__transaction\n    left join transaction_origin using (transaction_id)\n    left join transaction_api_client_name using (transaction_id)\n    left join transaction_context using (transaction_id)\n    left join transaction_type using (transaction_id)\n    left join transaction_contract_type using (transaction_id)\n    left join transaction_amount_received_usd using (transaction_id)\n    left join transaction_amount_sent_usd using (transaction_id)\n    left join transaction_value_usd using (transaction_id)\n    left join transaction_zerion_fee_usd using (transaction_id)\n    left join transaction_trash using (transaction_id)\n\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_origin\n        ,transaction_api_client_name\n        ,transaction_context\n        ,transaction_type\n        ,transaction_contract_type\n        ,transaction_amount_received_usd\n        ,transaction_amount_sent_usd\n        ,transaction_value_usd\n        ,transaction_zerion_fee_usd\n        ,transaction_trash\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.d_transaction"
        },
        "model.my_meltano_project.d_wallet": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_reg_date\n        --\n        ,wallet_first_origin\n        ,wallet_last_origin\n        --\n        ,wallet_first_wallet_provider\n        ,wallet_last_wallet_provider\n        --\n        ,wallet_first_api_client_name\n        ,wallet_last_api_client_name\n        --\n        ,wallet_has_ios\n        ,wallet_min_ios_date\n        ,wallet_max_ios_date\n        ,wallet_days_ios\n        --\n        ,wallet_has_android\n        ,wallet_min_android_date\n        ,wallet_max_android_date\n        ,wallet_days_android\n        --\n        ,wallet_has_web\n        ,wallet_min_web_date\n        ,wallet_max_web_date\n        ,wallet_days_web\n        --\n        ,wallet_has_stakedao\n        ,wallet_has_tokenary\n        ,wallet_has_visifire\n        ,wallet_has_coinburp\n        --\n        ,wallet_last_total_value_segment\n        ,wallet_last_total_value\n        --\n        ,wallet_last_value_segment\n        ,wallet_last_value\n        --\n        ,wallet_last_nft_value_segment\n        ,wallet_last_nft_value\n        --\n        ,wallet_last_protocol_value_segment\n        ,wallet_last_protocol_value\n    from {{ref ('anchor__wallet')}}  --\"bi_anchor\".\"anchor__wallet\"\n    left join {{ref ('calc__wallet__wallet_first_origin__wallet_last_origin')}}     --\"bi_calc\".\"calc__wallet__wallet_first_origin__wallet_last_origin\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider')}}   --\"bi_calc\".\"calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name')}}   --\"bi_calc\".\"calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_ios')}}  --\"bi_calc\".\"calc__wallet__wallet_ios\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_android')}}  --\"bi_calc\".\"calc__wallet__wallet_android\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_web')}}  --\"bi_calc\".\"calc__wallet__wallet_web\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_stakedao')}}  --\"bi_calc\".\"calc__wallet__wallet_stakedao\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_tokenary')}}  --\"bi_calc\".\"calc__wallet__wallet_tokenary\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_visifire')}}  --\"bi_calc\".\"calc__wallet__wallet_visifire\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_coinburp')}}  --\"bi_calc\".\"calc__wallet__wallet_coinburp\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_last_total_value_segment')}}  --\"bi_calc\".\"calc__wallet__wallet_last_total_value_segment\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_last_total_value')}}  --\"bi_calc\".\"calc__wallet__wallet_last_total_value\"\n        using (wallet_id)\n\n     left join {{ref ('calc__wallet__wallet_last_value_segment')}}  --\"bi_calc\".\"calc__wallet__wallet_last_value_segment\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_last_value')}}  --\"bi_calc\".\"calc__wallet__wallet_last_value\"\n        using (wallet_id)\n\n    left join {{ref ('calc__wallet__wallet_last_nft_value_segment')}}  --\"bi_calc\".\"calc__wallet__wallet_last_nft_value_segment\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_last_nft_value')}}  --\"bi_calc\".\"calc__wallet__wallet_last_nft_value\"\n        using (wallet_id)\n\n    left join {{ref ('calc__wallet__wallet_last_protocol_value_segment')}}  --\"bi_calc\".\"calc__wallet__wallet_last_protocol_value_segment\"\n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_last_protocol_value')}}  --\"bi_calc\".\"calc__wallet__wallet_last_protocol_value\"\n        using (wallet_id)\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_reg_date\n        --\n        ,wallet_first_origin\n        ,wallet_last_origin\n        --\n        ,wallet_first_wallet_provider\n        ,wallet_last_wallet_provider\n        --\n        ,wallet_first_api_client_name\n        ,wallet_last_api_client_name\n        --\n        ,wallet_has_ios\n        ,wallet_min_ios_date\n        ,wallet_max_ios_date\n        ,wallet_days_ios\n        --\n        ,wallet_has_android\n        ,wallet_min_android_date\n        ,wallet_max_android_date\n        ,wallet_days_android\n        --\n        ,wallet_has_web\n        ,wallet_min_web_date\n        ,wallet_max_web_date\n        ,wallet_days_web\n        --\n        ,wallet_has_stakedao\n        ,wallet_has_tokenary\n        ,wallet_has_visifire\n        ,wallet_has_coinburp\n        --\n        ,wallet_last_total_value_segment\n        ,wallet_last_total_value\n        --\n        ,wallet_last_value_segment\n        ,wallet_last_value\n        --\n        ,wallet_last_nft_value_segment\n        ,wallet_last_nft_value\n        --\n        ,wallet_last_protocol_value_segment\n        ,wallet_last_protocol_value\n    from t1\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.anchor__wallet",
                    "model.my_meltano_project.calc__wallet__wallet_first_origin__wallet_last_origin",
                    "model.my_meltano_project.calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider",
                    "model.my_meltano_project.calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name",
                    "model.my_meltano_project.calc__wallet__wallet_ios",
                    "model.my_meltano_project.calc__wallet__wallet_android",
                    "model.my_meltano_project.calc__wallet__wallet_web",
                    "model.my_meltano_project.calc__wallet__wallet_stakedao",
                    "model.my_meltano_project.calc__wallet__wallet_tokenary",
                    "model.my_meltano_project.calc__wallet__wallet_visifire",
                    "model.my_meltano_project.calc__wallet__wallet_coinburp",
                    "model.my_meltano_project.calc__wallet__wallet_last_total_value_segment",
                    "model.my_meltano_project.calc__wallet__wallet_last_total_value",
                    "model.my_meltano_project.calc__wallet__wallet_last_value_segment",
                    "model.my_meltano_project.calc__wallet__wallet_last_value",
                    "model.my_meltano_project.calc__wallet__wallet_last_nft_value_segment",
                    "model.my_meltano_project.calc__wallet__wallet_last_nft_value",
                    "model.my_meltano_project.calc__wallet__wallet_last_protocol_value_segment",
                    "model.my_meltano_project.calc__wallet__wallet_last_protocol_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "d_wallet"
            ],
            "unique_id": "model.my_meltano_project.d_wallet",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/d_wallet.sql",
            "original_file_path": "models/bi/d_wallet.sql",
            "name": "d_wallet",
            "alias": "d_wallet",
            "checksum": {
                "name": "sha256",
                "checksum": "ec1cfa83da37dba500e0d508089caabd96dae2fc8ba2976057083cb54746df77"
            },
            "tags": [],
            "refs": [
                [
                    "anchor__wallet"
                ],
                [
                    "calc__wallet__wallet_first_origin__wallet_last_origin"
                ],
                [
                    "calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider"
                ],
                [
                    "calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name"
                ],
                [
                    "calc__wallet__wallet_ios"
                ],
                [
                    "calc__wallet__wallet_android"
                ],
                [
                    "calc__wallet__wallet_web"
                ],
                [
                    "calc__wallet__wallet_stakedao"
                ],
                [
                    "calc__wallet__wallet_tokenary"
                ],
                [
                    "calc__wallet__wallet_visifire"
                ],
                [
                    "calc__wallet__wallet_coinburp"
                ],
                [
                    "calc__wallet__wallet_last_total_value_segment"
                ],
                [
                    "calc__wallet__wallet_last_total_value"
                ],
                [
                    "calc__wallet__wallet_last_value_segment"
                ],
                [
                    "calc__wallet__wallet_last_value"
                ],
                [
                    "calc__wallet__wallet_last_nft_value_segment"
                ],
                [
                    "calc__wallet__wallet_last_nft_value"
                ],
                [
                    "calc__wallet__wallet_last_protocol_value_segment"
                ],
                [
                    "calc__wallet__wallet_last_protocol_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/d_wallet.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1663857806.4069455,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_reg_date\n        --\n        ,wallet_first_origin\n        ,wallet_last_origin\n        --\n        ,wallet_first_wallet_provider\n        ,wallet_last_wallet_provider\n        --\n        ,wallet_first_api_client_name\n        ,wallet_last_api_client_name\n        --\n        ,wallet_has_ios\n        ,wallet_min_ios_date\n        ,wallet_max_ios_date\n        ,wallet_days_ios\n        --\n        ,wallet_has_android\n        ,wallet_min_android_date\n        ,wallet_max_android_date\n        ,wallet_days_android\n        --\n        ,wallet_has_web\n        ,wallet_min_web_date\n        ,wallet_max_web_date\n        ,wallet_days_web\n        --\n        ,wallet_has_stakedao\n        ,wallet_has_tokenary\n        ,wallet_has_visifire\n        ,wallet_has_coinburp\n        --\n        ,wallet_last_total_value_segment\n        ,wallet_last_total_value\n        --\n        ,wallet_last_value_segment\n        ,wallet_last_value\n        --\n        ,wallet_last_nft_value_segment\n        ,wallet_last_nft_value\n        --\n        ,wallet_last_protocol_value_segment\n        ,wallet_last_protocol_value\n    from dev_pdaniil_anchor.anchor__wallet  --\"bi_anchor\".\"anchor__wallet\"\n    left join dev_pdaniil_calc.calc__wallet__wallet_first_origin__wallet_last_origin     --\"bi_calc\".\"calc__wallet__wallet_first_origin__wallet_last_origin\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider   --\"bi_calc\".\"calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name   --\"bi_calc\".\"calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_ios  --\"bi_calc\".\"calc__wallet__wallet_ios\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_android  --\"bi_calc\".\"calc__wallet__wallet_android\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_web  --\"bi_calc\".\"calc__wallet__wallet_web\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_stakedao  --\"bi_calc\".\"calc__wallet__wallet_stakedao\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_tokenary  --\"bi_calc\".\"calc__wallet__wallet_tokenary\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_visifire  --\"bi_calc\".\"calc__wallet__wallet_visifire\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_coinburp  --\"bi_calc\".\"calc__wallet__wallet_coinburp\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_last_total_value_segment  --\"bi_calc\".\"calc__wallet__wallet_last_total_value_segment\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_last_total_value  --\"bi_calc\".\"calc__wallet__wallet_last_total_value\"\n        using (wallet_id)\n\n     left join dev_pdaniil_calc.calc__wallet__wallet_last_value_segment  --\"bi_calc\".\"calc__wallet__wallet_last_value_segment\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_last_value  --\"bi_calc\".\"calc__wallet__wallet_last_value\"\n        using (wallet_id)\n\n    left join dev_pdaniil_calc.calc__wallet__wallet_last_nft_value_segment  --\"bi_calc\".\"calc__wallet__wallet_last_nft_value_segment\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_last_nft_value  --\"bi_calc\".\"calc__wallet__wallet_last_nft_value\"\n        using (wallet_id)\n\n    left join dev_pdaniil_calc.calc__wallet__wallet_last_protocol_value_segment  --\"bi_calc\".\"calc__wallet__wallet_last_protocol_value_segment\"\n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_last_protocol_value  --\"bi_calc\".\"calc__wallet__wallet_last_protocol_value\"\n        using (wallet_id)\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_reg_date\n        --\n        ,wallet_first_origin\n        ,wallet_last_origin\n        --\n        ,wallet_first_wallet_provider\n        ,wallet_last_wallet_provider\n        --\n        ,wallet_first_api_client_name\n        ,wallet_last_api_client_name\n        --\n        ,wallet_has_ios\n        ,wallet_min_ios_date\n        ,wallet_max_ios_date\n        ,wallet_days_ios\n        --\n        ,wallet_has_android\n        ,wallet_min_android_date\n        ,wallet_max_android_date\n        ,wallet_days_android\n        --\n        ,wallet_has_web\n        ,wallet_min_web_date\n        ,wallet_max_web_date\n        ,wallet_days_web\n        --\n        ,wallet_has_stakedao\n        ,wallet_has_tokenary\n        ,wallet_has_visifire\n        ,wallet_has_coinburp\n        --\n        ,wallet_last_total_value_segment\n        ,wallet_last_total_value\n        --\n        ,wallet_last_value_segment\n        ,wallet_last_value\n        --\n        ,wallet_last_nft_value_segment\n        ,wallet_last_nft_value\n        --\n        ,wallet_last_protocol_value_segment\n        ,wallet_last_protocol_value\n    from t1\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.d_wallet"
        },
        "model.my_meltano_project.f_events": {
            "raw_sql": "with wallet__made__event as (\n    select\n        wallet_id\n        ,event_id\n        ,event_date\n    from \n        {{ref ('link__wallet__made__event')}}      --\"bi_anchor\".\"link__wallet__made__event\"\n    where 1=1\n        --and event_date = current_date - interval '3' day\n),\n\nwallet_provider__has__event as (\n    select\n        wallet_provider_id\n        ,event_id\n    from\n        {{ref ('link__wallet_provider__has__event')}}      --\"bi_anchor\".\"link__wallet_provider__has__event\"\n    where 1=1\n        --and event_date = current_date - interval '3' day\n),\n\nevent_origin as (\n    select\n        event_id\n        ,event_origin\n    from \n        {{ref ('attr__event__event_origin')}}      --\"bi_anchor\".\"attr__event__event_origin\"\n    where 1=1\n        --and event_date = current_date - interval '3' day       \n),\n\nevent_api_client_name as (\n    select\n        event_id\n        ,event_api_client_name\n    from \n        {{ref ('attr__event__event_api_client_name')}}      --\"bi_anchor\".\"attr__event__event_api_client_name\"\n    where 1=1\n        --and event_date = current_date - interval '3' day       \n),\n\nwallet_total_value as (\n    select\n        wallet_id\n        ,wallet_total_value\n        ,wallet_total_value_date as event_date\n    from \n        {{ref ('calc__wallet__wallet_total_value')}}      --\"bi_calc\".\"calc__wallet__wallet_total_value\"   \n),\n\nwallet_total_value_segment as (\n    select\n        wallet_id\n        ,wallet_total_value_segment\n        ,wallet_total_value_segment_date as event_date\n    from \n        {{ref ('calc__wallet__wallet_total_value_segment')}}      --\"bi_calc\".\"calc__wallet__wallet_total_value_segment\"   \n),\n\nwallet_value as (\n    select\n        wallet_id\n        ,wallet_value\n        ,wallet_value_date as event_date\n    from \n        {{ref ('calc__wallet__wallet_value')}}      --\"bi_calc\".\"calc__wallet__wallet_value\"   \n),\n\nwallet_value_segment as (\n    select\n        wallet_id\n        ,wallet_value_segment\n        ,wallet_value_segment_date as event_date\n    from \n        {{ref ('calc__wallet__wallet_value_segment')}}      --\"bi_calc\".\"calc__wallet__wallet_value_segment\"   \n),\n\nwallet_nft_value as (\n    select\n        wallet_id\n        ,wallet_nft_value\n        ,wallet_nft_value_date as event_date\n    from \n        {{ref ('calc__wallet__wallet_nft_value')}}      --\"bi_calc\".\"calc__wallet__wallet_nft_value\"   \n),\n\nwallet_nft_value_segment as (\n    select\n        wallet_id\n        ,wallet_nft_value_segment\n        ,wallet_nft_value_segment_date as event_date\n    from \n        {{ref ('calc__wallet__wallet_nft_value_segment')}}      --\"bi_calc\".\"calc__wallet__wallet_nft_value_segment\"   \n),\n\nwallet_protocol_value as (\n    select\n        wallet_id\n        ,wallet_protocol_value\n        ,wallet_protocol_value_date as event_date\n    from \n        {{ref ('calc__wallet__wallet_protocol_value')}}      --\"bi_calc\".\"calc__wallet__wallet_protocol_value\"   \n),\n\nwallet_protocol_value_segment as (\n    select\n        wallet_id\n        ,wallet_protocol_value_segment\n        ,wallet_protocol_value_segment_date as event_date\n    from \n        {{ref ('calc__wallet__wallet_protocol_value_segment')}}      --\"bi_calc\".\"calc__wallet__wallet_protocol_value_segment\"   \n),\n\n\nt1 as (\n    select\n        wallet_id\n        ,count(*) as cnt_events\n        ,wallet_provider_id\n        ,event_origin\n        ,event_api_client_name\n        ,event_date\n    from wallet__made__event\n    left join wallet_provider__has__event using (event_id)\n    left join event_origin using (event_id)\n    left join event_api_client_name using (event_id)\n    group by\n        wallet_id\n        ,wallet_provider_id\n        ,event_origin\n        ,event_api_client_name\n        ,event_date\n),\n\nt2 as (\n    select\n        wallet_id\n        ,cnt_events\n        ,wallet_provider_id\n        ,event_origin\n        ,event_api_client_name\n        ,wallet_total_value_segment\n        ,wallet_total_value\n        ,wallet_value_segment\n        ,wallet_value\n        ,wallet_nft_value_segment\n        ,wallet_nft_value\n        ,wallet_protocol_value_segment\n        ,wallet_protocol_value\n        ,event_date\n    from t1\n    left join wallet_total_value using (wallet_id, event_date)\n    left join wallet_total_value_segment using (wallet_id, event_date)\n    left join wallet_value using (wallet_id, event_date)\n    left join wallet_value_segment using (wallet_id, event_date)\n    left join wallet_nft_value using (wallet_id, event_date)\n    left join wallet_nft_value_segment using (wallet_id, event_date)\n    left join wallet_protocol_value using (wallet_id, event_date)\n    left join wallet_protocol_value_segment using (wallet_id, event_date)\n),\n\nfinal as (\n    select\n        wallet_id\n        ,cnt_events\n        ,wallet_provider_id\n        ,event_origin\n        ,event_api_client_name\n        ,wallet_total_value_segment\n        ,wallet_total_value\n        ,wallet_value_segment\n        ,wallet_value\n        ,wallet_nft_value_segment\n        ,wallet_nft_value\n        ,wallet_protocol_value_segment\n        ,wallet_protocol_value\n        ,event_date\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.link__wallet_provider__has__event",
                    "model.my_meltano_project.attr__event__event_origin",
                    "model.my_meltano_project.attr__event__event_api_client_name",
                    "model.my_meltano_project.calc__wallet__wallet_total_value",
                    "model.my_meltano_project.calc__wallet__wallet_total_value_segment",
                    "model.my_meltano_project.calc__wallet__wallet_value",
                    "model.my_meltano_project.calc__wallet__wallet_value_segment",
                    "model.my_meltano_project.calc__wallet__wallet_nft_value",
                    "model.my_meltano_project.calc__wallet__wallet_nft_value_segment",
                    "model.my_meltano_project.calc__wallet__wallet_protocol_value",
                    "model.my_meltano_project.calc__wallet__wallet_protocol_value_segment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "f_events"
            ],
            "unique_id": "model.my_meltano_project.f_events",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/f_events.sql",
            "original_file_path": "models/bi/f_events.sql",
            "name": "f_events",
            "alias": "f_events",
            "checksum": {
                "name": "sha256",
                "checksum": "198a220c44c18a4b3932e71211317e31b90d6c13a5ddaeaac85ccdbd6d7480bd"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "link__wallet_provider__has__event"
                ],
                [
                    "attr__event__event_origin"
                ],
                [
                    "attr__event__event_api_client_name"
                ],
                [
                    "calc__wallet__wallet_total_value"
                ],
                [
                    "calc__wallet__wallet_total_value_segment"
                ],
                [
                    "calc__wallet__wallet_value"
                ],
                [
                    "calc__wallet__wallet_value_segment"
                ],
                [
                    "calc__wallet__wallet_nft_value"
                ],
                [
                    "calc__wallet__wallet_nft_value_segment"
                ],
                [
                    "calc__wallet__wallet_protocol_value"
                ],
                [
                    "calc__wallet__wallet_protocol_value_segment"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/f_events.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1663857806.4089289,
            "compiled_sql": "with wallet__made__event as (\n    select\n        wallet_id\n        ,event_id\n        ,event_date\n    from \n        dev_pdaniil_anchor.link__wallet__made__event      --\"bi_anchor\".\"link__wallet__made__event\"\n    where 1=1\n        --and event_date = current_date - interval '3' day\n),\n\nwallet_provider__has__event as (\n    select\n        wallet_provider_id\n        ,event_id\n    from\n        dev_pdaniil_anchor.link__wallet_provider__has__event      --\"bi_anchor\".\"link__wallet_provider__has__event\"\n    where 1=1\n        --and event_date = current_date - interval '3' day\n),\n\nevent_origin as (\n    select\n        event_id\n        ,event_origin\n    from \n        dev_pdaniil_anchor.attr__event__event_origin      --\"bi_anchor\".\"attr__event__event_origin\"\n    where 1=1\n        --and event_date = current_date - interval '3' day       \n),\n\nevent_api_client_name as (\n    select\n        event_id\n        ,event_api_client_name\n    from \n        dev_pdaniil_anchor.attr__event__event_api_client_name      --\"bi_anchor\".\"attr__event__event_api_client_name\"\n    where 1=1\n        --and event_date = current_date - interval '3' day       \n),\n\nwallet_total_value as (\n    select\n        wallet_id\n        ,wallet_total_value\n        ,wallet_total_value_date as event_date\n    from \n        dev_pdaniil_calc.calc__wallet__wallet_total_value      --\"bi_calc\".\"calc__wallet__wallet_total_value\"   \n),\n\nwallet_total_value_segment as (\n    select\n        wallet_id\n        ,wallet_total_value_segment\n        ,wallet_total_value_segment_date as event_date\n    from \n        dev_pdaniil_calc.calc__wallet__wallet_total_value_segment      --\"bi_calc\".\"calc__wallet__wallet_total_value_segment\"   \n),\n\nwallet_value as (\n    select\n        wallet_id\n        ,wallet_value\n        ,wallet_value_date as event_date\n    from \n        dev_pdaniil_calc.calc__wallet__wallet_value      --\"bi_calc\".\"calc__wallet__wallet_value\"   \n),\n\nwallet_value_segment as (\n    select\n        wallet_id\n        ,wallet_value_segment\n        ,wallet_value_segment_date as event_date\n    from \n        dev_pdaniil_calc.calc__wallet__wallet_value_segment      --\"bi_calc\".\"calc__wallet__wallet_value_segment\"   \n),\n\nwallet_nft_value as (\n    select\n        wallet_id\n        ,wallet_nft_value\n        ,wallet_nft_value_date as event_date\n    from \n        dev_pdaniil_calc.calc__wallet__wallet_nft_value      --\"bi_calc\".\"calc__wallet__wallet_nft_value\"   \n),\n\nwallet_nft_value_segment as (\n    select\n        wallet_id\n        ,wallet_nft_value_segment\n        ,wallet_nft_value_segment_date as event_date\n    from \n        dev_pdaniil_calc.calc__wallet__wallet_nft_value_segment      --\"bi_calc\".\"calc__wallet__wallet_nft_value_segment\"   \n),\n\nwallet_protocol_value as (\n    select\n        wallet_id\n        ,wallet_protocol_value\n        ,wallet_protocol_value_date as event_date\n    from \n        dev_pdaniil_calc.calc__wallet__wallet_protocol_value      --\"bi_calc\".\"calc__wallet__wallet_protocol_value\"   \n),\n\nwallet_protocol_value_segment as (\n    select\n        wallet_id\n        ,wallet_protocol_value_segment\n        ,wallet_protocol_value_segment_date as event_date\n    from \n        dev_pdaniil_calc.calc__wallet__wallet_protocol_value_segment      --\"bi_calc\".\"calc__wallet__wallet_protocol_value_segment\"   \n),\n\n\nt1 as (\n    select\n        wallet_id\n        ,count(*) as cnt_events\n        ,wallet_provider_id\n        ,event_origin\n        ,event_api_client_name\n        ,event_date\n    from wallet__made__event\n    left join wallet_provider__has__event using (event_id)\n    left join event_origin using (event_id)\n    left join event_api_client_name using (event_id)\n    group by\n        wallet_id\n        ,wallet_provider_id\n        ,event_origin\n        ,event_api_client_name\n        ,event_date\n),\n\nt2 as (\n    select\n        wallet_id\n        ,cnt_events\n        ,wallet_provider_id\n        ,event_origin\n        ,event_api_client_name\n        ,wallet_total_value_segment\n        ,wallet_total_value\n        ,wallet_value_segment\n        ,wallet_value\n        ,wallet_nft_value_segment\n        ,wallet_nft_value\n        ,wallet_protocol_value_segment\n        ,wallet_protocol_value\n        ,event_date\n    from t1\n    left join wallet_total_value using (wallet_id, event_date)\n    left join wallet_total_value_segment using (wallet_id, event_date)\n    left join wallet_value using (wallet_id, event_date)\n    left join wallet_value_segment using (wallet_id, event_date)\n    left join wallet_nft_value using (wallet_id, event_date)\n    left join wallet_nft_value_segment using (wallet_id, event_date)\n    left join wallet_protocol_value using (wallet_id, event_date)\n    left join wallet_protocol_value_segment using (wallet_id, event_date)\n),\n\nfinal as (\n    select\n        wallet_id\n        ,cnt_events\n        ,wallet_provider_id\n        ,event_origin\n        ,event_api_client_name\n        ,wallet_total_value_segment\n        ,wallet_total_value\n        ,wallet_value_segment\n        ,wallet_value\n        ,wallet_nft_value_segment\n        ,wallet_nft_value\n        ,wallet_protocol_value_segment\n        ,wallet_protocol_value\n        ,event_date\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.f_events"
        },
        "model.my_meltano_project.f_position_operations": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"position_date\"]\n    )\n}}\n\nwith wallet__has__position as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from {{ref ('wallet__has__position')}}  --\"bi\".\"wallet__has__position\"\n    where 1=1\n        --and position_date = current_date - interval '3' day\n        {% if is_incremental() %} \n            and position_date >= ( \n                    select max(position_date) - interval '1' day from {{ this }} \n                    )  \n        {% endif %}\n),\n\nposition__has__asset as (\n    select\n        position_id\n        ,asset_id\n    from {{ref ('link__position__has__asset')}}   --\"bi_anchor\".\"link__position__has__asset\"\n),\n\nposition__has__blockchain as (\n    select\n        position_id\n        ,blockchain_id\n    from {{ref ('link__position__has__blockchain')}}  --\"bi_anchor\".\"link__position__has__blockchain\"\n),\n\nposition__has__protocol as (\n    select\n        position_id\n        ,protocol_id\n    from {{ref ('link__position__has__protocol')}}    --\"bi_anchor\".\"link__position__has__protocol\"\n),\n\nt1 as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,blockchain_id\n        ,asset_id\n        ,protocol_id\n        ,position_timestamp\n        ,position_date\n    from wallet__has__position\n    left join position__has__blockchain using (position_id)\n    left join position__has__asset using (position_id)\n    left join position__has__protocol using (position_id)\n),\n\nfinal as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,blockchain_id\n        ,asset_id\n        ,protocol_id\n        ,position_timestamp\n        ,position_date\n    from t1\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.wallet__has__position",
                    "model.my_meltano_project.link__position__has__asset",
                    "model.my_meltano_project.link__position__has__blockchain",
                    "model.my_meltano_project.link__position__has__protocol"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "position_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "f_position_operations"
            ],
            "unique_id": "model.my_meltano_project.f_position_operations",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/f_position_operations.sql",
            "original_file_path": "models/bi/f_position_operations.sql",
            "name": "f_position_operations",
            "alias": "f_position_operations",
            "checksum": {
                "name": "sha256",
                "checksum": "19c9fb8ad70d209c9d5ff28ccd52beaf7cf005824212483214283ba790d9fd81"
            },
            "tags": [],
            "refs": [
                [
                    "wallet__has__position"
                ],
                [
                    "link__position__has__asset"
                ],
                [
                    "link__position__has__blockchain"
                ],
                [
                    "link__position__has__protocol"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/f_position_operations.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "position_date"
                ]
            },
            "created_at": 1663857806.4109492,
            "compiled_sql": "\n\nwith wallet__has__position as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from dev_pdaniil.wallet__has__position  --\"bi\".\"wallet__has__position\"\n    where 1=1\n        --and position_date = current_date - interval '3' day\n         \n            and position_date >= ( \n                    select max(position_date) - interval '1' day from dev_pdaniil.f_position_operations \n                    )  \n        \n),\n\nposition__has__asset as (\n    select\n        position_id\n        ,asset_id\n    from dev_pdaniil_anchor.link__position__has__asset   --\"bi_anchor\".\"link__position__has__asset\"\n),\n\nposition__has__blockchain as (\n    select\n        position_id\n        ,blockchain_id\n    from dev_pdaniil_anchor.link__position__has__blockchain  --\"bi_anchor\".\"link__position__has__blockchain\"\n),\n\nposition__has__protocol as (\n    select\n        position_id\n        ,protocol_id\n    from dev_pdaniil_anchor.link__position__has__protocol    --\"bi_anchor\".\"link__position__has__protocol\"\n),\n\nt1 as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,blockchain_id\n        ,asset_id\n        ,protocol_id\n        ,position_timestamp\n        ,position_date\n    from wallet__has__position\n    left join position__has__blockchain using (position_id)\n    left join position__has__asset using (position_id)\n    left join position__has__protocol using (position_id)\n),\n\nfinal as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,blockchain_id\n        ,asset_id\n        ,protocol_id\n        ,position_timestamp\n        ,position_date\n    from t1\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.f_position_operations"
        },
        "model.my_meltano_project.f_transactions": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith wallet__made__transaction as (\n    select\n        wallet_id\n        ,transaction_id\n        ,transaction_date\n    from \n        {{ref ('link__wallet__made__transaction')}}     --\"bi_anchor\".\"link__wallet__made__transaction\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\ntransaction__has__blockchain as (\n    select\n        transaction_id\n        ,blockchain_id\n    from \n        {{ref ('link__transaction__has__blockchain')}}     --\"bi_anchor\".\"link__transaction__has__blockchain\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\ntransaction__has__asset as (\n    select\n        transaction_id\n        ,asset_id\n        ,asset_amount\n        ,asset_direction\n    from \n        {{ref ('link__transaction__has__asset')}}     --\"bi_anchor\".\"link__transaction__has__asset\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nwallet_provider__has__transaction as (\n    select\n        wallet_provider_id\n        ,transaction_id\n    from \n        {{ref ('link__wallet_provider__has__transaction')}}     --\"bi_anchor\".\"link__wallet_provider__has__transaction\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nt1 as (\n    select\n        wallet_id\n        ,wallet_provider_id\n        ,transaction_id\n        ,blockchain_id\n        ,asset_id\n        ,asset_amount\n        ,asset_direction\n        ,transaction_date\n    from wallet__made__transaction\n    left join transaction__has__blockchain using (transaction_id)\n    left join transaction__has__asset using (transaction_id)\n    left join wallet_provider__has__transaction using (transaction_id)\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_provider_id\n        ,transaction_id\n        ,blockchain_id\n        ,asset_id\n        ,asset_amount\n        ,asset_direction\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__transaction",
                    "model.my_meltano_project.link__transaction__has__blockchain",
                    "model.my_meltano_project.link__transaction__has__asset",
                    "model.my_meltano_project.link__wallet_provider__has__transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "f_transactions"
            ],
            "unique_id": "model.my_meltano_project.f_transactions",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/f_transactions.sql",
            "original_file_path": "models/bi/f_transactions.sql",
            "name": "f_transactions",
            "alias": "f_transactions",
            "checksum": {
                "name": "sha256",
                "checksum": "bf60a021d3a5338ba0ccb45ee48d7f029337b1b59482eeead8eb5fef1493780f"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__transaction"
                ],
                [
                    "link__transaction__has__blockchain"
                ],
                [
                    "link__transaction__has__asset"
                ],
                [
                    "link__wallet_provider__has__transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/f_transactions.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.4157212,
            "compiled_sql": "\n\nwith wallet__made__transaction as (\n    select\n        wallet_id\n        ,transaction_id\n        ,transaction_date\n    from \n        dev_pdaniil_anchor.link__wallet__made__transaction     --\"bi_anchor\".\"link__wallet__made__transaction\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.f_transactions \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\ntransaction__has__blockchain as (\n    select\n        transaction_id\n        ,blockchain_id\n    from \n        dev_pdaniil_anchor.link__transaction__has__blockchain     --\"bi_anchor\".\"link__transaction__has__blockchain\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.f_transactions \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\ntransaction__has__asset as (\n    select\n        transaction_id\n        ,asset_id\n        ,asset_amount\n        ,asset_direction\n    from \n        dev_pdaniil_anchor.link__transaction__has__asset     --\"bi_anchor\".\"link__transaction__has__asset\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.f_transactions \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nwallet_provider__has__transaction as (\n    select\n        wallet_provider_id\n        ,transaction_id\n    from \n        dev_pdaniil_anchor.link__wallet_provider__has__transaction     --\"bi_anchor\".\"link__wallet_provider__has__transaction\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil.f_transactions \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nt1 as (\n    select\n        wallet_id\n        ,wallet_provider_id\n        ,transaction_id\n        ,blockchain_id\n        ,asset_id\n        ,asset_amount\n        ,asset_direction\n        ,transaction_date\n    from wallet__made__transaction\n    left join transaction__has__blockchain using (transaction_id)\n    left join transaction__has__asset using (transaction_id)\n    left join wallet_provider__has__transaction using (transaction_id)\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_provider_id\n        ,transaction_id\n        ,blockchain_id\n        ,asset_id\n        ,asset_amount\n        ,asset_direction\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.f_transactions"
        },
        "model.my_meltano_project.report_daily_retantion_rate_past30days": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_reg_date\n        ,wallet_last_total_value\n        ,wallet_first_origin\n        ,cast(\n            date_diff('day', wallet_reg_date, event_date) as smallint\n        ) as days_after_reg\n        ,event_date\n    from {{ref ('link__wallet__made__event')}}       --\"bi_anchor\".\"link__wallet__made__event\"\n    left join {{ref ('anchor__wallet')}}  --\"bi_anchor\".\"anchor__wallet\" \n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_first_origin__wallet_last_origin')}}  --\"bi_calc\".\"calc__wallet__wallet_first_origin__wallet_last_origin\" \n        using (wallet_id)\n    left join {{ref ('calc__wallet__wallet_last_total_value')}}  --\"bi_calc\".\"calc__wallet__wallet_last_total_value\" \n        using (wallet_id)\n),\n\ncohorts_by_day as (\n    select\n        wallet_id\n        ,wallet_first_origin\n        ,wallet_reg_date\n        ,days_after_reg\n    from \n        t1\n    where true\n        and wallet_reg_date >= current_date - interval '30' day\n        and wallet_last_total_value > 0\n    group by\n        wallet_id\n        ,wallet_first_origin\n        ,wallet_reg_date\n        ,days_after_reg\n),\n\ncohorts_size as (\n    select \n        wallet_first_origin,\n        wallet_reg_date,\n        count(distinct wallet_id) as cohort_size\n    from \n        cohorts_by_day\n    where True\n        and days_after_reg = 0\n    group by \n        1, 2\n),\n\npre_final as (\n    select\n        cohort_size\n        ,wallet_first_origin\n        ,wallet_reg_date\n        ,days_after_reg\n        ,count( distinct wallet_id) as cnt_wallets,\n        round( 100.0 * count(distinct wallet_id)  / cohort_size, 2 ) AS retention\n    from cohorts_by_day\n    left join cohorts_size using (wallet_first_origin, wallet_reg_date)\n    group by\n        cohort_size\n        ,wallet_first_origin\n        ,wallet_reg_date\n        ,days_after_reg\n    having\n        count( distinct wallet_id ) > 10\n),\n\nfinal as (\n    select\n        days_after_reg\n        ,wallet_first_origin\n        ,retention\n    from pre_final\n    order by \n        days_after_reg desc\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.anchor__wallet",
                    "model.my_meltano_project.calc__wallet__wallet_first_origin__wallet_last_origin",
                    "model.my_meltano_project.calc__wallet__wallet_last_total_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "report_daily_retantion_rate_past30days"
            ],
            "unique_id": "model.my_meltano_project.report_daily_retantion_rate_past30days",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/report_daily_retantion_rate_past30days.sql",
            "original_file_path": "models/bi/report_daily_retantion_rate_past30days.sql",
            "name": "report_daily_retantion_rate_past30days",
            "alias": "report_daily_retantion_rate_past30days",
            "checksum": {
                "name": "sha256",
                "checksum": "48ac7f9ae51b1ec6e7ad8cb770d92ff21170fdd8e3c91f481ef9ac4d70999f81"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "anchor__wallet"
                ],
                [
                    "calc__wallet__wallet_first_origin__wallet_last_origin"
                ],
                [
                    "calc__wallet__wallet_last_total_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/report_daily_retantion_rate_past30days.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1663857806.4216924,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_reg_date\n        ,wallet_last_total_value\n        ,wallet_first_origin\n        ,cast(\n            date_diff('day', wallet_reg_date, event_date) as smallint\n        ) as days_after_reg\n        ,event_date\n    from dev_pdaniil_anchor.link__wallet__made__event       --\"bi_anchor\".\"link__wallet__made__event\"\n    left join dev_pdaniil_anchor.anchor__wallet  --\"bi_anchor\".\"anchor__wallet\" \n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_first_origin__wallet_last_origin  --\"bi_calc\".\"calc__wallet__wallet_first_origin__wallet_last_origin\" \n        using (wallet_id)\n    left join dev_pdaniil_calc.calc__wallet__wallet_last_total_value  --\"bi_calc\".\"calc__wallet__wallet_last_total_value\" \n        using (wallet_id)\n),\n\ncohorts_by_day as (\n    select\n        wallet_id\n        ,wallet_first_origin\n        ,wallet_reg_date\n        ,days_after_reg\n    from \n        t1\n    where true\n        and wallet_reg_date >= current_date - interval '30' day\n        and wallet_last_total_value > 0\n    group by\n        wallet_id\n        ,wallet_first_origin\n        ,wallet_reg_date\n        ,days_after_reg\n),\n\ncohorts_size as (\n    select \n        wallet_first_origin,\n        wallet_reg_date,\n        count(distinct wallet_id) as cohort_size\n    from \n        cohorts_by_day\n    where True\n        and days_after_reg = 0\n    group by \n        1, 2\n),\n\npre_final as (\n    select\n        cohort_size\n        ,wallet_first_origin\n        ,wallet_reg_date\n        ,days_after_reg\n        ,count( distinct wallet_id) as cnt_wallets,\n        round( 100.0 * count(distinct wallet_id)  / cohort_size, 2 ) AS retention\n    from cohorts_by_day\n    left join cohorts_size using (wallet_first_origin, wallet_reg_date)\n    group by\n        cohort_size\n        ,wallet_first_origin\n        ,wallet_reg_date\n        ,days_after_reg\n    having\n        count( distinct wallet_id ) > 10\n),\n\nfinal as (\n    select\n        days_after_reg\n        ,wallet_first_origin\n        ,retention\n    from pre_final\n    order by \n        days_after_reg desc\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.report_daily_retantion_rate_past30days"
        },
        "model.my_meltano_project.f_decomposition_operation": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"decomposition_date\"]\n    )\n}}\n\nwith t1 as (\n    select\n        wallet_id\n        ,blockchain_id\n        ,blockchain_value\n        ,decomposition_timestamp\n        ,decomposition_date\n    from \n        {{ref ('link__wallet__has__blockchain')}}      ----\"bi_anchor\".\"link__wallet__has__blockchain\"\n    where 1=1\n        {% if is_incremental() %} \n            and event_date >= ( \n                    select max(decomposition_date) - interval '1' day from {{ this }} \n                    )  \n        {% endif %}\n        --and event_date = current_date - interval '20' day \n),\n\nt2 as (\n    select\n        wallet_id\n        ,blockchain_id\n        ,LAST_VALUE(blockchain_value) over (\n            partition by wallet_id, blockchain_id, decomposition_date \n            order by decomposition_timestamp \n            rows between unbounded preceding and unbounded following\n            ) as blockchain_value\n        ,LAST_VALUE(decomposition_timestamp) over (\n            partition by wallet_id, blockchain_id, decomposition_date  \n            order by decomposition_timestamp \n            rows between unbounded preceding and unbounded following\n            ) as decomposition_timestamp\n        ,decomposition_date\n    from t1\n),\n\nt3 as (\n    select\n        wallet_id\n        ,blockchain_id\n        ,blockchain_value\n        ,decomposition_timestamp\n        ,decomposition_date\n    from t2\n    group by\n        wallet_id\n        ,blockchain_id\n        ,blockchain_value\n        ,decomposition_timestamp\n        ,decomposition_date\n),\n\nfinal as (\n    select\n        wallet_id\n        ,blockchain_id\n        ,blockchain_value\n        ,decomposition_timestamp\n        ,decomposition_date\n    from t3\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.link__wallet__has__blockchain"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "decomposition_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "f_decomposition_operation"
            ],
            "unique_id": "model.my_meltano_project.f_decomposition_operation",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/f_decomposition_operation.sql",
            "original_file_path": "models/bi/f_decomposition_operation.sql",
            "name": "f_decomposition_operation",
            "alias": "f_decomposition_operation",
            "checksum": {
                "name": "sha256",
                "checksum": "67e23358a7e802ba2e24f8c9fac51865c3673e08656c182c2bc33acb7a3f3833"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__has__blockchain"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/f_decomposition_operation.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "decomposition_date"
                ]
            },
            "created_at": 1663857806.4236672,
            "compiled_sql": "\n\nwith t1 as (\n    select\n        wallet_id\n        ,blockchain_id\n        ,blockchain_value\n        ,decomposition_timestamp\n        ,decomposition_date\n    from \n        dev_pdaniil_anchor.link__wallet__has__blockchain      ----\"bi_anchor\".\"link__wallet__has__blockchain\"\n    where 1=1\n         \n            and event_date >= ( \n                    select max(decomposition_date) - interval '1' day from dev_pdaniil.f_decomposition_operation \n                    )  \n        \n        --and event_date = current_date - interval '20' day \n),\n\nt2 as (\n    select\n        wallet_id\n        ,blockchain_id\n        ,LAST_VALUE(blockchain_value) over (\n            partition by wallet_id, blockchain_id, decomposition_date \n            order by decomposition_timestamp \n            rows between unbounded preceding and unbounded following\n            ) as blockchain_value\n        ,LAST_VALUE(decomposition_timestamp) over (\n            partition by wallet_id, blockchain_id, decomposition_date  \n            order by decomposition_timestamp \n            rows between unbounded preceding and unbounded following\n            ) as decomposition_timestamp\n        ,decomposition_date\n    from t1\n),\n\nt3 as (\n    select\n        wallet_id\n        ,blockchain_id\n        ,blockchain_value\n        ,decomposition_timestamp\n        ,decomposition_date\n    from t2\n    group by\n        wallet_id\n        ,blockchain_id\n        ,blockchain_value\n        ,decomposition_timestamp\n        ,decomposition_date\n),\n\nfinal as (\n    select\n        wallet_id\n        ,blockchain_id\n        ,blockchain_value\n        ,decomposition_timestamp\n        ,decomposition_date\n    from t3\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.f_decomposition_operation"
        },
        "model.my_meltano_project.a_blabla": {
            "raw_sql": "select * from bi.portfolio_decomposition where event_date = date '2022-07-25'",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_staging",
            "fqn": [
                "my_meltano_project",
                "staging",
                "a_blabla"
            ],
            "unique_id": "model.my_meltano_project.a_blabla",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "staging/a_blabla.sql",
            "original_file_path": "models/staging/a_blabla.sql",
            "name": "a_blabla",
            "alias": "a_blabla",
            "checksum": {
                "name": "sha256",
                "checksum": "c3e51ab11205055a27e722c9dab4382034deef646499ef1f28b23e9b750f293c"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/staging/a_blabla.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "staging"
            },
            "created_at": 1663857806.428087,
            "compiled_sql": "select * from bi.portfolio_decomposition where event_date = date '2022-07-25'",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_staging.a_blabla"
        },
        "model.my_meltano_project.stg_portfolio_decomposition": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nWITH prep AS (\n    SELECT distinct event_date\n    FROM {{ source('raw_events', 'portfolio_decomposition') }} AS i\n    {% if is_incremental() %}\n        WHERE i.event_date >= (\n            SELECT  MAX(event_date - interval '1' day) FROM {{ this }}\n        )\n    {% endif %}\n),\n\nas_strings as (\n        -- step 1: JSON to strings\n    select\n        event_date,\n        CAST(json_extract(json, '$.api_client_name') AS VARCHAR) as api_client_name,\n        CAST(json_extract(json, '$.origin') AS VARCHAR) as origin,\n        CAST(json_extract(json, '$.request_name') AS VARCHAR) as request_name,\n        CAST(json_extract(json, '$.wallet_address') AS VARCHAR) as wallet_address,\n        CAST(json_extract(json, '$.wallet_provider') AS VARCHAR) as wallet_provider,\n        CAST(json_extract(json, '$.total_value') AS VARCHAR) as total_value,\n        CAST(json_extract(json, '$.wallet_value') AS VARCHAR) as wallet_value,\n        CAST(json_extract(json, '$.nft_value') AS VARCHAR) as nft_value,\n        CAST(json_extract(json, '$.chains_distribution.arbitrum') AS VARCHAR) as arbitrum,\n        CAST(json_extract(json, '$.chains_distribution.aurora') AS VARCHAR) as aurora,\n        CAST(json_extract(json, '$.chains_distribution.avalanche') AS VARCHAR) as avalanche,\n        CAST(json_extract(json, '$.chains_distribution.bsc') AS VARCHAR) as bsc,\n        CAST(json_extract(json, '$.chains_distribution.ethereum') AS VARCHAR) as ethereum,\n        CAST(json_extract(json, '$.chains_distribution.fantom') AS VARCHAR) as fantom,\n        CAST(json_extract(json, '$.chains_distribution.loopring') AS VARCHAR) as loopring,\n        CAST(json_extract(json, '$.chains_distribution.optimism') AS VARCHAR) as optimism,\n        CAST(json_extract(json, '$.chains_distribution.polygon') AS VARCHAR) as polygon,\n        CAST(json_extract(json, '$.chains_distribution.solana') AS VARCHAR) as solana,\n        CAST(json_extract(json, '$.chains_distribution.xdai') AS VARCHAR) as xdai,\n        CAST(json_extract(json, '$.datetime') AS VARCHAR) as datetime,\n        CAST(json_extract(json, '$._ingest_version') AS VARCHAR) as _ingest_version,\n        CAST(json_extract(json, '$.event') AS VARCHAR) as event,\n        CAST(json_extract(json, '$.timestamp') AS VARCHAR) as timestamp\n    from\n        {{ source('raw_events', 'portfolio_decomposition') }}\n    where   \n        event_date in (select event_date from prep)\n)\n\n-- step 2: (if needed) strings to dates and to int\nselect  \n    api_client_name \n    ,origin \n    ,request_name \n    ,wallet_address\n    ,lower(regexp_replace(wallet_provider, '[_\\s]', '')) as wallet_provider\n    ,CAST(total_value as double) as total_value\n    ,CAST(wallet_value as double) as wallet_value\n    ,CAST(nft_value as double) as nft_value\n    ,CAST(arbitrum as double) as arbitrum\n    ,CAST(aurora as double) as aurora\n    ,CAST(avalanche as double) as avalanche\n    ,CAST(bsc as double) as bsc\n    ,CAST(ethereum as double) as ethereum\n    ,CAST(fantom as double) as fantom\n    ,CAST(loopring as double) as loopring\n    ,CAST(optimism as double) as optimism\n    ,CAST(polygon as double) as polygon\n    ,CAST(solana as double) as solana\n    ,CAST(xdai as double) as xdai\n    ,date_parse(datetime,'%Y-%m-%d %H:%i:%S+00:00')  as datetime \n    ,CAST(_ingest_version as smallint) as _ingest_version\n    ,event \n    ,date_parse(timestamp,'%Y-%m-%dT%H:%i:%SZ') as timestamp\n    ,event_date\nfrom \n    as_strings\nwhere  1=1       -- filter dev data \n        and not\n        (\n        origin like '%.run.app'\n        or \n        origin like '%beta.zerion.io'\n        or \n        origin like '%api-v4-zerion.io'\n        or \n        origin like '%localhost:%'\n        or \n        origin like '%dev.zerion.io'\n        or \n        origin like '%staging.zerion.io'\n        )",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.my_meltano_project.raw_events.portfolio_decomposition",
                    "source.my_meltano_project.raw_events.portfolio_decomposition"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_staging",
            "fqn": [
                "my_meltano_project",
                "staging",
                "stg_portfolio_decomposition"
            ],
            "unique_id": "model.my_meltano_project.stg_portfolio_decomposition",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "staging/stg_portfolio_decomposition.sql",
            "original_file_path": "models/staging/stg_portfolio_decomposition.sql",
            "name": "stg_portfolio_decomposition",
            "alias": "stg_portfolio_decomposition",
            "checksum": {
                "name": "sha256",
                "checksum": "a3adc2f2794493f15b7b41f4788e4669dcf1788f75b76db049eaf5a216acf0c0"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_events",
                    "portfolio_decomposition"
                ],
                [
                    "raw_events",
                    "portfolio_decomposition"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/staging/stg_portfolio_decomposition.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "staging",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.4300706,
            "compiled_sql": "\n\nWITH prep AS (\n    SELECT distinct event_date\n    FROM raw_events.\"portfolio-decomposition\" AS i\n    \n        WHERE i.event_date >= (\n            SELECT  MAX(event_date - interval '1' day) FROM dev_pdaniil_staging.stg_portfolio_decomposition\n        )\n    \n),\n\nas_strings as (\n        -- step 1: JSON to strings\n    select\n        event_date,\n        CAST(json_extract(json, '$.api_client_name') AS VARCHAR) as api_client_name,\n        CAST(json_extract(json, '$.origin') AS VARCHAR) as origin,\n        CAST(json_extract(json, '$.request_name') AS VARCHAR) as request_name,\n        CAST(json_extract(json, '$.wallet_address') AS VARCHAR) as wallet_address,\n        CAST(json_extract(json, '$.wallet_provider') AS VARCHAR) as wallet_provider,\n        CAST(json_extract(json, '$.total_value') AS VARCHAR) as total_value,\n        CAST(json_extract(json, '$.wallet_value') AS VARCHAR) as wallet_value,\n        CAST(json_extract(json, '$.nft_value') AS VARCHAR) as nft_value,\n        CAST(json_extract(json, '$.chains_distribution.arbitrum') AS VARCHAR) as arbitrum,\n        CAST(json_extract(json, '$.chains_distribution.aurora') AS VARCHAR) as aurora,\n        CAST(json_extract(json, '$.chains_distribution.avalanche') AS VARCHAR) as avalanche,\n        CAST(json_extract(json, '$.chains_distribution.bsc') AS VARCHAR) as bsc,\n        CAST(json_extract(json, '$.chains_distribution.ethereum') AS VARCHAR) as ethereum,\n        CAST(json_extract(json, '$.chains_distribution.fantom') AS VARCHAR) as fantom,\n        CAST(json_extract(json, '$.chains_distribution.loopring') AS VARCHAR) as loopring,\n        CAST(json_extract(json, '$.chains_distribution.optimism') AS VARCHAR) as optimism,\n        CAST(json_extract(json, '$.chains_distribution.polygon') AS VARCHAR) as polygon,\n        CAST(json_extract(json, '$.chains_distribution.solana') AS VARCHAR) as solana,\n        CAST(json_extract(json, '$.chains_distribution.xdai') AS VARCHAR) as xdai,\n        CAST(json_extract(json, '$.datetime') AS VARCHAR) as datetime,\n        CAST(json_extract(json, '$._ingest_version') AS VARCHAR) as _ingest_version,\n        CAST(json_extract(json, '$.event') AS VARCHAR) as event,\n        CAST(json_extract(json, '$.timestamp') AS VARCHAR) as timestamp\n    from\n        raw_events.\"portfolio-decomposition\"\n    where   \n        event_date in (select event_date from prep)\n)\n\n-- step 2: (if needed) strings to dates and to int\nselect  \n    api_client_name \n    ,origin \n    ,request_name \n    ,wallet_address\n    ,lower(regexp_replace(wallet_provider, '[_\\s]', '')) as wallet_provider\n    ,CAST(total_value as double) as total_value\n    ,CAST(wallet_value as double) as wallet_value\n    ,CAST(nft_value as double) as nft_value\n    ,CAST(arbitrum as double) as arbitrum\n    ,CAST(aurora as double) as aurora\n    ,CAST(avalanche as double) as avalanche\n    ,CAST(bsc as double) as bsc\n    ,CAST(ethereum as double) as ethereum\n    ,CAST(fantom as double) as fantom\n    ,CAST(loopring as double) as loopring\n    ,CAST(optimism as double) as optimism\n    ,CAST(polygon as double) as polygon\n    ,CAST(solana as double) as solana\n    ,CAST(xdai as double) as xdai\n    ,date_parse(datetime,'%Y-%m-%d %H:%i:%S+00:00')  as datetime \n    ,CAST(_ingest_version as smallint) as _ingest_version\n    ,event \n    ,date_parse(timestamp,'%Y-%m-%dT%H:%i:%SZ') as timestamp\n    ,event_date\nfrom \n    as_strings\nwhere  1=1       -- filter dev data \n        and not\n        (\n        origin like '%.run.app'\n        or \n        origin like '%beta.zerion.io'\n        or \n        origin like '%api-v4-zerion.io'\n        or \n        origin like '%localhost:%'\n        or \n        origin like '%dev.zerion.io'\n        or \n        origin like '%staging.zerion.io'\n        )",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_staging.stg_portfolio_decomposition"
        },
        "model.my_meltano_project.stg_wallet_connected_to_api2": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nwith prep AS (\n    select distinct event_date\n    from {{ source('raw_events', 'wallet_connected_to_api2') }} AS i\n    {% if is_incremental() %}\n        where i.event_date >= (\n            select MAX(event_date - interval '1' day) FROM {{ this }}\n        )\n    {% endif %}\n),\n\nas_strings as (\n        -- step 1: JSON to strings\n        select\n            event_date,\n            CAST(json_extract(json, '$.api_client_name') AS VARCHAR) as api_client_name,\n            CAST(json_extract(json, '$.origin') AS VARCHAR) as origin,\n            CAST(json_extract(json, '$.request_name') AS VARCHAR) as request_name,\n            CAST(json_extract(json, '$.wallet_address') AS VARCHAR) as wallet_address,\n            CAST(json_extract(json, '$.datetime') AS VARCHAR) as datetime,\n            CAST(json_extract(json, '$._ingest_version') AS VARCHAR) as _ingest_version,\n            CAST(json_extract(json, '$.event') AS VARCHAR) as event,\n            CAST(json_extract(json, '$.timestamp') AS VARCHAR) as timestamp,\n            CAST(json_extract(json, '$.wallet_provider') AS VARCHAR) as wallet_provider,\n            CAST(json_extract(json, '$.total_value') AS VARCHAR) as total_value\n        from\n            {{ source('raw_events', 'wallet_connected_to_api2') }} \n        where 1=1\n            and event_date in (select event_date from prep)\n    ),\n    -- step 2: (if needed) strings to dates and to int\n    proccessed as (\n    select  \n        api_client_name \n        ,origin \n        ,request_name \n        ,wallet_address\n        ,date_parse(datetime,'%Y-%m-%d %H:%i:%S+00:00')  as datetime \n        ,CAST(_ingest_version as smallint) as _ingest_version\n        ,event \n        ,date_parse(timestamp,'%Y-%m-%dT%H:%i:%SZ') as timestamp\n        ,lower(regexp_replace(wallet_provider, '[_\\s]', '')) as wallet_provider\n        ,CAST(total_value as double) as total_value\n        ,event_date\n    from \n        as_strings\n    )\n    -- step 3: wallet provider replacement\n    select  \n        api_client_name \n        ,origin \n        ,request_name \n        ,wallet_address\n        ,datetime \n        ,_ingest_version\n        ,event \n        ,timestamp\n        ,regexp_replace(wallet_provider, 'readonly', 'watchaddress') as wallet_provider\n        ,total_value\n        ,event_date\n    from \n        proccessed\n    where 1 = 1 -- filter dev data \n        and not\n        (\n        origin like '%.run.app'\n        or \n        origin like '%beta.zerion.io'\n        or \n        origin like '%api-v4-zerion.io'\n        or \n        origin like '%localhost:%'\n        or \n        origin like '%dev.zerion.io'\n        or \n        origin like '%staging.zerion.io'\n        )",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.my_meltano_project.raw_events.wallet_connected_to_api2",
                    "source.my_meltano_project.raw_events.wallet_connected_to_api2"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_staging",
            "fqn": [
                "my_meltano_project",
                "staging",
                "stg_wallet_connected_to_api2"
            ],
            "unique_id": "model.my_meltano_project.stg_wallet_connected_to_api2",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "staging/stg_wallet_connected_to_api2.sql",
            "original_file_path": "models/staging/stg_wallet_connected_to_api2.sql",
            "name": "stg_wallet_connected_to_api2",
            "alias": "stg_wallet_connected_to_api2",
            "checksum": {
                "name": "sha256",
                "checksum": "0db4a47ed1a097ba2bcfd7de63386997fe01801acbc39789dbf60de98cf91613"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_events",
                    "wallet_connected_to_api2"
                ],
                [
                    "raw_events",
                    "wallet_connected_to_api2"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/staging/stg_wallet_connected_to_api2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "staging",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.4349809,
            "compiled_sql": "\n\nwith prep AS (\n    select distinct event_date\n    from raw_events.wallet_connected_to_api2 AS i\n    \n        where i.event_date >= (\n            select MAX(event_date - interval '1' day) FROM dev_pdaniil_staging.stg_wallet_connected_to_api2\n        )\n    \n),\n\nas_strings as (\n        -- step 1: JSON to strings\n        select\n            event_date,\n            CAST(json_extract(json, '$.api_client_name') AS VARCHAR) as api_client_name,\n            CAST(json_extract(json, '$.origin') AS VARCHAR) as origin,\n            CAST(json_extract(json, '$.request_name') AS VARCHAR) as request_name,\n            CAST(json_extract(json, '$.wallet_address') AS VARCHAR) as wallet_address,\n            CAST(json_extract(json, '$.datetime') AS VARCHAR) as datetime,\n            CAST(json_extract(json, '$._ingest_version') AS VARCHAR) as _ingest_version,\n            CAST(json_extract(json, '$.event') AS VARCHAR) as event,\n            CAST(json_extract(json, '$.timestamp') AS VARCHAR) as timestamp,\n            CAST(json_extract(json, '$.wallet_provider') AS VARCHAR) as wallet_provider,\n            CAST(json_extract(json, '$.total_value') AS VARCHAR) as total_value\n        from\n            raw_events.wallet_connected_to_api2 \n        where 1=1\n            and event_date in (select event_date from prep)\n    ),\n    -- step 2: (if needed) strings to dates and to int\n    proccessed as (\n    select  \n        api_client_name \n        ,origin \n        ,request_name \n        ,wallet_address\n        ,date_parse(datetime,'%Y-%m-%d %H:%i:%S+00:00')  as datetime \n        ,CAST(_ingest_version as smallint) as _ingest_version\n        ,event \n        ,date_parse(timestamp,'%Y-%m-%dT%H:%i:%SZ') as timestamp\n        ,lower(regexp_replace(wallet_provider, '[_\\s]', '')) as wallet_provider\n        ,CAST(total_value as double) as total_value\n        ,event_date\n    from \n        as_strings\n    )\n    -- step 3: wallet provider replacement\n    select  \n        api_client_name \n        ,origin \n        ,request_name \n        ,wallet_address\n        ,datetime \n        ,_ingest_version\n        ,event \n        ,timestamp\n        ,regexp_replace(wallet_provider, 'readonly', 'watchaddress') as wallet_provider\n        ,total_value\n        ,event_date\n    from \n        proccessed\n    where 1 = 1 -- filter dev data \n        and not\n        (\n        origin like '%.run.app'\n        or \n        origin like '%beta.zerion.io'\n        or \n        origin like '%api-v4-zerion.io'\n        or \n        origin like '%localhost:%'\n        or \n        origin like '%dev.zerion.io'\n        or \n        origin like '%staging.zerion.io'\n        )",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_staging.stg_wallet_connected_to_api2"
        },
        "model.my_meltano_project.stg_address_positions": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nwith prep AS (\n    select distinct event_date\n    from {{ source('raw_events', 'address_positions') }} AS i\n    {% if is_incremental() %}\n        where i.event_date >= (\n            select MAX(event_date - interval '1' day) FROM {{ this }}\n        )\n    {% endif %}\n),\n\nt1 as (\n    select \n        CAST(json_extract(json, '$.api_client_name') AS VARCHAR) as api_client_name\n        ,CAST(json_extract(json, '$.origin') AS VARCHAR) as origin\n        ,CAST(json_extract(json, '$.request_name') AS VARCHAR) as request_name\n        ,CAST(json_extract(json, '$.wallet_address') AS VARCHAR) as wallet_address\n        --,CAST(json_extract(json, '$.datetime') AS VARCHAR) as datetime\n        ,CAST(json_extract(json, '$._ingest_version') AS VARCHAR) as _ingest_version\n        ,CAST(json_extract(json, '$.event') AS VARCHAR) as event\n        ,CAST(json_extract(json, '$.timestamp') AS VARCHAR) as timestamp\n        ,CAST(json_extract(json, '$.wallet_provider') AS VARCHAR) as wallet_provider\n        ,CAST(json_extract(json, '$.positions') AS ARRAY(MAP(VARCHAR, JSON))) as positions_array\n        ,event_date\n    from {{ source('raw_events', 'address_positions') }} -- \"raw_events\".\"address_positions\" \n    where json like '%\"protocol\":%' \n        and event_date in (select event_date from prep)\n        --and event_date = current_date - interval '1' day \n),\n\nfinal as (\n    select \n        api_client_name\n        ,origin\n        ,request_name\n        ,wallet_address\n        --,datetime\n        ,_ingest_version\n        ,event\n        ,date_parse(timestamp,'%Y-%m-%dT%H:%i:%SZ') as timestamp\n        ,wallet_provider\n        ,cast(element_at(positions, 'id') as varchar) as positions_id\n        ,cast(element_at(positions, 'asset_id') as varchar) as asset_id\n        ,cast(element_at(positions, 'asset_name') as varchar) as asset_name\n        ,cast(element_at(positions, 'asset_symbol') as varchar) as asset_symbol\n        ,cast(element_at(positions, 'asset_decimals') as smallint) as asset_decimals\n        ,cast(element_at(positions, 'chain') as varchar) as chain\n        ,cast(element_at(positions, 'is_displayable') as varchar) as is_displayable\n        ,cast(element_at(positions, 'name') as varchar) as name\n        ,cast(element_at(positions, 'protocol') as varchar) as protocol\n        ,cast(element_at(positions, 'quantity') as double) as quantity \n        ,cast(element_at(positions, 'type') as varchar) as type\n        ,cast(element_at(positions, 'value') as double) as value\n        ,event_date\n    from t1, UNNEST (positions_array) as t(positions)\n)\n\nselect * \nfrom final\nwhere 1 = 1 -- filter dev data \n        and not\n        (\n        origin like '%.run.app'\n        or \n        origin like '%beta.zerion.io'\n        or \n        origin like '%api-v4-zerion.io'\n        or \n        origin like '%localhost:%'\n        or \n        origin like '%dev.zerion.io'\n        or \n        origin like '%staging.zerion.io'\n        )",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.my_meltano_project.raw_events.address_positions",
                    "source.my_meltano_project.raw_events.address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_staging",
            "fqn": [
                "my_meltano_project",
                "staging",
                "stg_address_positions"
            ],
            "unique_id": "model.my_meltano_project.stg_address_positions",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "staging/stg_address_positions.sql",
            "original_file_path": "models/staging/stg_address_positions.sql",
            "name": "stg_address_positions",
            "alias": "stg_address_positions",
            "checksum": {
                "name": "sha256",
                "checksum": "b0418940f153e3ceb1a8116d24ee9cc812a99730f4cfae91b36f2396b7dd2964"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_events",
                    "address_positions"
                ],
                [
                    "raw_events",
                    "address_positions"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/staging/stg_address_positions.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "staging",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.4404006,
            "compiled_sql": "\n\nwith prep AS (\n    select distinct event_date\n    from raw_events.address_positions AS i\n    \n        where i.event_date >= (\n            select MAX(event_date - interval '1' day) FROM dev_pdaniil_staging.stg_address_positions\n        )\n    \n),\n\nt1 as (\n    select \n        CAST(json_extract(json, '$.api_client_name') AS VARCHAR) as api_client_name\n        ,CAST(json_extract(json, '$.origin') AS VARCHAR) as origin\n        ,CAST(json_extract(json, '$.request_name') AS VARCHAR) as request_name\n        ,CAST(json_extract(json, '$.wallet_address') AS VARCHAR) as wallet_address\n        --,CAST(json_extract(json, '$.datetime') AS VARCHAR) as datetime\n        ,CAST(json_extract(json, '$._ingest_version') AS VARCHAR) as _ingest_version\n        ,CAST(json_extract(json, '$.event') AS VARCHAR) as event\n        ,CAST(json_extract(json, '$.timestamp') AS VARCHAR) as timestamp\n        ,CAST(json_extract(json, '$.wallet_provider') AS VARCHAR) as wallet_provider\n        ,CAST(json_extract(json, '$.positions') AS ARRAY(MAP(VARCHAR, JSON))) as positions_array\n        ,event_date\n    from raw_events.address_positions -- \"raw_events\".\"address_positions\" \n    where json like '%\"protocol\":%' \n        and event_date in (select event_date from prep)\n        --and event_date = current_date - interval '1' day \n),\n\nfinal as (\n    select \n        api_client_name\n        ,origin\n        ,request_name\n        ,wallet_address\n        --,datetime\n        ,_ingest_version\n        ,event\n        ,date_parse(timestamp,'%Y-%m-%dT%H:%i:%SZ') as timestamp\n        ,wallet_provider\n        ,cast(element_at(positions, 'id') as varchar) as positions_id\n        ,cast(element_at(positions, 'asset_id') as varchar) as asset_id\n        ,cast(element_at(positions, 'asset_name') as varchar) as asset_name\n        ,cast(element_at(positions, 'asset_symbol') as varchar) as asset_symbol\n        ,cast(element_at(positions, 'asset_decimals') as smallint) as asset_decimals\n        ,cast(element_at(positions, 'chain') as varchar) as chain\n        ,cast(element_at(positions, 'is_displayable') as varchar) as is_displayable\n        ,cast(element_at(positions, 'name') as varchar) as name\n        ,cast(element_at(positions, 'protocol') as varchar) as protocol\n        ,cast(element_at(positions, 'quantity') as double) as quantity \n        ,cast(element_at(positions, 'type') as varchar) as type\n        ,cast(element_at(positions, 'value') as double) as value\n        ,event_date\n    from t1, UNNEST (positions_array) as t(positions)\n)\n\nselect * \nfrom final\nwhere 1 = 1 -- filter dev data \n        and not\n        (\n        origin like '%.run.app'\n        or \n        origin like '%beta.zerion.io'\n        or \n        origin like '%api-v4-zerion.io'\n        or \n        origin like '%localhost:%'\n        or \n        origin like '%dev.zerion.io'\n        or \n        origin like '%staging.zerion.io'\n        )",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_staging.stg_address_positions"
        },
        "model.my_meltano_project.stg_portfolio_decomposition_long": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nWITH \n\nas_strings as (\n        -- step 1: JSON to strings\n    select\n        event_date,\n        CAST(json_extract(json, '$.api_client_name') AS VARCHAR) as api_client_name,\n        CAST(json_extract(json, '$.origin') AS VARCHAR) as origin,\n        CAST(json_extract(json, '$.request_name') AS VARCHAR) as request_name,\n        CAST(json_extract(json, '$.wallet_address') AS VARCHAR) as wallet_address,\n        CAST(json_extract(json, '$.wallet_provider') AS VARCHAR) as wallet_provider,\n        CAST(json_extract(json, '$.total_value') AS VARCHAR) as total_value,\n        CAST(json_extract(json, '$.wallet_value') AS VARCHAR) as wallet_value,\n        CAST(json_extract(json, '$.nft_value') AS VARCHAR) as nft_value,\n        cast(json_extract(json, '$.chains_distribution') as map(varchar, double)) chains_distribution,\n        CAST(json_extract(json, '$.datetime') AS VARCHAR) as datetime,\n        CAST(json_extract(json, '$._ingest_version') AS VARCHAR) as _ingest_version,\n        CAST(json_extract(json, '$.event') AS VARCHAR) as event,\n        CAST(json_extract(json, '$.timestamp') AS VARCHAR) as timestamp\n    from\n        {{ source('raw_events', 'portfolio_decomposition') }}\n    where   1=1\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n)\n\n-- step 2: (if needed) strings to dates and to int\nselect  \n    api_client_name \n    ,origin \n    ,request_name \n    ,wallet_address\n    ,lower(regexp_replace(wallet_provider, '[_\\s]', '')) as wallet_provider\n    ,CAST(total_value as double) as total_value\n    ,CAST(wallet_value as double) as wallet_value\n    ,CAST(nft_value as double) as nft_value\n    ,chain\n    ,ch_value\n    ,date_parse(datetime,'%Y-%m-%d %H:%i:%S+00:00')  as datetime \n    ,CAST(_ingest_version as smallint) as _ingest_version\n    ,event \n    ,date_parse(timestamp,'%Y-%m-%dT%H:%i:%SZ') as timestamp\n    ,event_date\nfrom \n    as_strings CROSS JOIN UNNEST(chains_distribution) AS t (chain, ch_value)\nwhere  1=1       -- filter dev data \n        and not\n        (\n        origin like '%.run.app'\n        or \n        origin like '%beta.zerion.io'\n        or \n        origin like '%api-v4-zerion.io'\n        or \n        origin like '%localhost:%'\n        or \n        origin like '%dev.zerion.io'\n        or \n        origin like '%staging.zerion.io'\n        )",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.my_meltano_project.raw_events.portfolio_decomposition"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_staging",
            "fqn": [
                "my_meltano_project",
                "staging",
                "stg_portfolio_decomposition_long"
            ],
            "unique_id": "model.my_meltano_project.stg_portfolio_decomposition_long",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "staging/stg_portfolio_decomposition_long.sql",
            "original_file_path": "models/staging/stg_portfolio_decomposition_long.sql",
            "name": "stg_portfolio_decomposition_long",
            "alias": "stg_portfolio_decomposition_long",
            "checksum": {
                "name": "sha256",
                "checksum": "9b0c221abdc6fbdf7cae1179f95d88dd2953c7a439da23c81566e870b02d3c83"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_events",
                    "portfolio_decomposition"
                ]
            ],
            "metrics": [],
            "description": "portfolio decomposition where all chains for each event are in separate lines",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": "my_meltano_project://models/schema.yml",
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/staging/stg_portfolio_decomposition_long.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "staging",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.6755345,
            "compiled_sql": "\n\nWITH \n\nas_strings as (\n        -- step 1: JSON to strings\n    select\n        event_date,\n        CAST(json_extract(json, '$.api_client_name') AS VARCHAR) as api_client_name,\n        CAST(json_extract(json, '$.origin') AS VARCHAR) as origin,\n        CAST(json_extract(json, '$.request_name') AS VARCHAR) as request_name,\n        CAST(json_extract(json, '$.wallet_address') AS VARCHAR) as wallet_address,\n        CAST(json_extract(json, '$.wallet_provider') AS VARCHAR) as wallet_provider,\n        CAST(json_extract(json, '$.total_value') AS VARCHAR) as total_value,\n        CAST(json_extract(json, '$.wallet_value') AS VARCHAR) as wallet_value,\n        CAST(json_extract(json, '$.nft_value') AS VARCHAR) as nft_value,\n        cast(json_extract(json, '$.chains_distribution') as map(varchar, double)) chains_distribution,\n        CAST(json_extract(json, '$.datetime') AS VARCHAR) as datetime,\n        CAST(json_extract(json, '$._ingest_version') AS VARCHAR) as _ingest_version,\n        CAST(json_extract(json, '$.event') AS VARCHAR) as event,\n        CAST(json_extract(json, '$.timestamp') AS VARCHAR) as timestamp\n    from\n        raw_events.\"portfolio-decomposition\"\n    where   1=1\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_staging.stg_portfolio_decomposition_long \n                        )  \n        \n)\n\n-- step 2: (if needed) strings to dates and to int\nselect  \n    api_client_name \n    ,origin \n    ,request_name \n    ,wallet_address\n    ,lower(regexp_replace(wallet_provider, '[_\\s]', '')) as wallet_provider\n    ,CAST(total_value as double) as total_value\n    ,CAST(wallet_value as double) as wallet_value\n    ,CAST(nft_value as double) as nft_value\n    ,chain\n    ,ch_value\n    ,date_parse(datetime,'%Y-%m-%d %H:%i:%S+00:00')  as datetime \n    ,CAST(_ingest_version as smallint) as _ingest_version\n    ,event \n    ,date_parse(timestamp,'%Y-%m-%dT%H:%i:%SZ') as timestamp\n    ,event_date\nfrom \n    as_strings CROSS JOIN UNNEST(chains_distribution) AS t (chain, ch_value)\nwhere  1=1       -- filter dev data \n        and not\n        (\n        origin like '%.run.app'\n        or \n        origin like '%beta.zerion.io'\n        or \n        origin like '%api-v4-zerion.io'\n        or \n        origin like '%localhost:%'\n        or \n        origin like '%dev.zerion.io'\n        or \n        origin like '%staging.zerion.io'\n        )",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_staging.stg_portfolio_decomposition_long"
        },
        "model.my_meltano_project.stg_signed_transaction": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nwith prep AS (\n    select distinct event_date\n    from {{ source('raw_events', 'signed_transaction') }} AS i\n    {% if is_incremental() %}\n        where i.event_date >= (\n            select MAX(event_date - interval '1' day) FROM {{ this }}\n        )\n    {% endif %}\n),\n\nas_strings as (\n        -- step 1: JSON to strings\n        select\n            event_date,\n            CAST(json_extract(json, '$.api_client_name') AS VARCHAR) as api_client_name,\n            CAST(json_extract(json, '$.origin') AS VARCHAR) as origin,\n            CAST(json_extract(json, '$.datetime') AS VARCHAR) as datetime,\n            CAST(json_extract(json, '$.screen_name') AS VARCHAR) as screen_name,\n            CAST(json_extract(json, '$.wallet_address') AS VARCHAR) as wallet_address,\n            CAST(json_extract(json, '$.wallet_provider') AS VARCHAR) as wallet_provider,\n            CAST(json_extract(json, '$.userId') AS VARCHAR) as userId,\n            CAST(json_extract(json, '$.request_name') AS VARCHAR) as request_name,\n            CAST(json_extract(json, '$.context') AS VARCHAR) as context,\n            CAST(json_extract(json, '$.type') AS VARCHAR) as type,\n            CAST(json_extract(json, '$.hash') AS VARCHAR) as hash,\n            CAST(json_extract(json, '$.usd_amount_received') AS double) as usd_amount_received,\n            CAST(json_extract(json, '$.usd_amount_sent') AS double) as usd_amount_sent,\n            CAST(json_extract(json, '$.asset_amount_sent') AS array<double>) as asset_amount_sent,\n            CAST(json_extract(json, '$.asset_name_sent') AS array<varchar>) as asset_name_sent,\n            CAST(json_extract(json, '$.asset_address_sent') AS array<varchar>) as asset_address_sent,\n            CAST(json_extract(json, '$.asset_amount_received') AS array<double>) as asset_amount_received,\n            CAST(json_extract(json, '$.asset_name_received') AS array<varchar>) as asset_name_received,\n            CAST(json_extract(json, '$.asset_address_received') AS array<varchar>) as asset_address_received,\n            CAST(json_extract(json, '$.network_fee') AS double) as network_fee,\n            CAST(json_extract(json, '$.gas') AS VARCHAR) as gas,\n            CAST(json_extract(json, '$.gas_price') AS double) as gas_price,\n            CAST(json_extract(json, '$.contract_type') AS VARCHAR) as contract_type,\n            CAST(json_extract(json, '$.chain') AS VARCHAR) as chain,\n            CAST(json_extract(json, '$._ingest_version') AS VARCHAR) as _ingest_version,\n            CAST(json_extract(json, '$.event') AS VARCHAR) as event,\n            CAST(json_extract(json, '$.timestamp') AS VARCHAR) as timestamp,\n            CAST(json_extract(json, '$.zerion_fee_percentage') AS VARCHAR) zerion_fee_percentage,\n            CAST(json_extract(json, '$.zerion_fee_usd_amount') AS VARCHAR) zerion_fee_usd_amount,\n            CAST(json_extract(json, '$.guaranteed_asset_amount_received') AS array<double>) guaranteed_asset_amount_received\n        from\n            {{ source('raw_events', 'signed_transaction') }} --raw_events.signed_transaction\n        where 1=1\n            and event_date in (select event_date from prep)\n    ),\n    -- step 2: (if needed) strings to dates and to int\n    proccessed as (\n    select  \n        api_client_name \n        ,origin \n        --,date_parse(datetime,'%Y-%m-%d %H:%i:%S+00:00')  as datetime \n        ,screen_name\n        ,wallet_address\n        ,wallet_provider\n        ,userId\n        ,request_name \n        ,context\n        ,type\n        ,hash\n        ,usd_amount_received\n        ,usd_amount_sent\n        ,case when cardinality(asset_amount_sent) = 0 then null else asset_amount_sent end asset_amount_sent\n        ,case when cardinality(asset_name_sent) = 0 then null else asset_name_sent end asset_name_sent\n        ,case when cardinality(asset_address_sent) = 0 then null else asset_address_sent end asset_address_sent\n        ,case when cardinality(asset_amount_received) = 0 then null else asset_amount_received end asset_amount_received\n        ,case when cardinality(asset_name_received) = 0 then null else asset_name_received end asset_name_received\n        ,case when cardinality(asset_address_received) = 0 then null else asset_address_received end asset_address_received\n        ,case when cardinality(guaranteed_asset_amount_received) = 0 then null else guaranteed_asset_amount_received end guaranteed_asset_amount_received\n        ,network_fee\n        ,gas\n        ,gas_price\n        ,contract_type\n        ,chain\n        ,_ingest_version\n        ,event\n        ,date_parse(timestamp,'%Y-%m-%dT%H:%i:%SZ') as timestamp\n        ,zerion_fee_percentage\n        ,zerion_fee_usd_amount\n        ,event_date\n    from \n        as_strings\n    )\n    -- step 3: wallet provider replacement\n    select  \n        api_client_name \n        ,origin \n        --,datetime \n        ,screen_name\n        ,wallet_address\n        ,wallet_provider\n        ,userId\n        ,request_name \n        ,context\n        ,type\n        ,hash\n        ,usd_amount_received\n        ,usd_amount_sent\n        ,asset_amount_sent\n        ,asset_name_sent\n        ,asset_address_sent\n        ,asset_amount_received\n        ,asset_name_received\n        ,asset_address_received\n        ,guaranteed_asset_amount_received\n        ,network_fee\n        ,gas\n        ,gas_price\n        ,contract_type\n        ,chain\n        ,_ingest_version\n        ,event\n        ,timestamp\n        ,zerion_fee_percentage\n        ,zerion_fee_usd_amount\n        ,event_date\n    from \n        proccessed\n    where 1 = 1 -- filter dev data \n        and not\n        (\n        origin like '%.run.app'\n        or \n        origin like '%beta.zerion.io'\n        or \n        origin like '%api-v4-zerion.io'\n        or \n        origin like '%localhost:%'\n        or \n        origin like '%dev.zerion.io'\n        or \n        origin like '%staging.zerion.io'\n        )",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.my_meltano_project.raw_events.signed_transaction",
                    "source.my_meltano_project.raw_events.signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_staging",
            "fqn": [
                "my_meltano_project",
                "staging",
                "stg_signed_transaction"
            ],
            "unique_id": "model.my_meltano_project.stg_signed_transaction",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "staging/stg_signed_transaction.sql",
            "original_file_path": "models/staging/stg_signed_transaction.sql",
            "name": "stg_signed_transaction",
            "alias": "stg_signed_transaction",
            "checksum": {
                "name": "sha256",
                "checksum": "2802143144f268bdd8caaa73fac72dbf77495b7ee29f65c7003921ccc16888bd"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_events",
                    "signed_transaction"
                ],
                [
                    "raw_events",
                    "signed_transaction"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/staging/stg_signed_transaction.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "staging",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.4499955,
            "compiled_sql": "\n\nwith prep AS (\n    select distinct event_date\n    from raw_events.signed_transaction AS i\n    \n        where i.event_date >= (\n            select MAX(event_date - interval '1' day) FROM dev_pdaniil_staging.stg_signed_transaction\n        )\n    \n),\n\nas_strings as (\n        -- step 1: JSON to strings\n        select\n            event_date,\n            CAST(json_extract(json, '$.api_client_name') AS VARCHAR) as api_client_name,\n            CAST(json_extract(json, '$.origin') AS VARCHAR) as origin,\n            CAST(json_extract(json, '$.datetime') AS VARCHAR) as datetime,\n            CAST(json_extract(json, '$.screen_name') AS VARCHAR) as screen_name,\n            CAST(json_extract(json, '$.wallet_address') AS VARCHAR) as wallet_address,\n            CAST(json_extract(json, '$.wallet_provider') AS VARCHAR) as wallet_provider,\n            CAST(json_extract(json, '$.userId') AS VARCHAR) as userId,\n            CAST(json_extract(json, '$.request_name') AS VARCHAR) as request_name,\n            CAST(json_extract(json, '$.context') AS VARCHAR) as context,\n            CAST(json_extract(json, '$.type') AS VARCHAR) as type,\n            CAST(json_extract(json, '$.hash') AS VARCHAR) as hash,\n            CAST(json_extract(json, '$.usd_amount_received') AS double) as usd_amount_received,\n            CAST(json_extract(json, '$.usd_amount_sent') AS double) as usd_amount_sent,\n            CAST(json_extract(json, '$.asset_amount_sent') AS array<double>) as asset_amount_sent,\n            CAST(json_extract(json, '$.asset_name_sent') AS array<varchar>) as asset_name_sent,\n            CAST(json_extract(json, '$.asset_address_sent') AS array<varchar>) as asset_address_sent,\n            CAST(json_extract(json, '$.asset_amount_received') AS array<double>) as asset_amount_received,\n            CAST(json_extract(json, '$.asset_name_received') AS array<varchar>) as asset_name_received,\n            CAST(json_extract(json, '$.asset_address_received') AS array<varchar>) as asset_address_received,\n            CAST(json_extract(json, '$.network_fee') AS double) as network_fee,\n            CAST(json_extract(json, '$.gas') AS VARCHAR) as gas,\n            CAST(json_extract(json, '$.gas_price') AS double) as gas_price,\n            CAST(json_extract(json, '$.contract_type') AS VARCHAR) as contract_type,\n            CAST(json_extract(json, '$.chain') AS VARCHAR) as chain,\n            CAST(json_extract(json, '$._ingest_version') AS VARCHAR) as _ingest_version,\n            CAST(json_extract(json, '$.event') AS VARCHAR) as event,\n            CAST(json_extract(json, '$.timestamp') AS VARCHAR) as timestamp,\n            CAST(json_extract(json, '$.zerion_fee_percentage') AS VARCHAR) zerion_fee_percentage,\n            CAST(json_extract(json, '$.zerion_fee_usd_amount') AS VARCHAR) zerion_fee_usd_amount,\n            CAST(json_extract(json, '$.guaranteed_asset_amount_received') AS array<double>) guaranteed_asset_amount_received\n        from\n            raw_events.signed_transaction --raw_events.signed_transaction\n        where 1=1\n            and event_date in (select event_date from prep)\n    ),\n    -- step 2: (if needed) strings to dates and to int\n    proccessed as (\n    select  \n        api_client_name \n        ,origin \n        --,date_parse(datetime,'%Y-%m-%d %H:%i:%S+00:00')  as datetime \n        ,screen_name\n        ,wallet_address\n        ,wallet_provider\n        ,userId\n        ,request_name \n        ,context\n        ,type\n        ,hash\n        ,usd_amount_received\n        ,usd_amount_sent\n        ,case when cardinality(asset_amount_sent) = 0 then null else asset_amount_sent end asset_amount_sent\n        ,case when cardinality(asset_name_sent) = 0 then null else asset_name_sent end asset_name_sent\n        ,case when cardinality(asset_address_sent) = 0 then null else asset_address_sent end asset_address_sent\n        ,case when cardinality(asset_amount_received) = 0 then null else asset_amount_received end asset_amount_received\n        ,case when cardinality(asset_name_received) = 0 then null else asset_name_received end asset_name_received\n        ,case when cardinality(asset_address_received) = 0 then null else asset_address_received end asset_address_received\n        ,case when cardinality(guaranteed_asset_amount_received) = 0 then null else guaranteed_asset_amount_received end guaranteed_asset_amount_received\n        ,network_fee\n        ,gas\n        ,gas_price\n        ,contract_type\n        ,chain\n        ,_ingest_version\n        ,event\n        ,date_parse(timestamp,'%Y-%m-%dT%H:%i:%SZ') as timestamp\n        ,zerion_fee_percentage\n        ,zerion_fee_usd_amount\n        ,event_date\n    from \n        as_strings\n    )\n    -- step 3: wallet provider replacement\n    select  \n        api_client_name \n        ,origin \n        --,datetime \n        ,screen_name\n        ,wallet_address\n        ,wallet_provider\n        ,userId\n        ,request_name \n        ,context\n        ,type\n        ,hash\n        ,usd_amount_received\n        ,usd_amount_sent\n        ,asset_amount_sent\n        ,asset_name_sent\n        ,asset_address_sent\n        ,asset_amount_received\n        ,asset_name_received\n        ,asset_address_received\n        ,guaranteed_asset_amount_received\n        ,network_fee\n        ,gas\n        ,gas_price\n        ,contract_type\n        ,chain\n        ,_ingest_version\n        ,event\n        ,timestamp\n        ,zerion_fee_percentage\n        ,zerion_fee_usd_amount\n        ,event_date\n    from \n        proccessed\n    where 1 = 1 -- filter dev data \n        and not\n        (\n        origin like '%.run.app'\n        or \n        origin like '%beta.zerion.io'\n        or \n        origin like '%api-v4-zerion.io'\n        or \n        origin like '%localhost:%'\n        or \n        origin like '%dev.zerion.io'\n        or \n        origin like '%staging.zerion.io'\n        )",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_staging.stg_signed_transaction"
        },
        "model.my_meltano_project.link__position__has__asset": {
            "raw_sql": "with t1 as (\n    select\n        positions_id\n        ,asset_id\n    from\n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '3' day \n),\n\nt2 as (\n    select\n        positions_id as position_id\n        ,asset_id \n    from t1\n    where positions_id is not null\n        and asset_id is not null\n    group by\n        positions_id,\n        asset_id\n),\n\nfinal as (\n    select\n        position_id\n        ,asset_id\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__position__has__asset"
            ],
            "unique_id": "model.my_meltano_project.link__position__has__asset",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__position__has__asset.sql",
            "original_file_path": "models/anchor/link__position__has__asset.sql",
            "name": "link__position__has__asset",
            "alias": "link__position__has__asset",
            "checksum": {
                "name": "sha256",
                "checksum": "58691f82c009a88e19ba280a6e88c94b52d6d318495a59e99685e2b2aed627c4"
            },
            "tags": [],
            "refs": [
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__position__has__asset.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.455023,
            "compiled_sql": "with t1 as (\n    select\n        positions_id\n        ,asset_id\n    from\n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '3' day \n),\n\nt2 as (\n    select\n        positions_id as position_id\n        ,asset_id \n    from t1\n    where positions_id is not null\n        and asset_id is not null\n    group by\n        positions_id,\n        asset_id\n),\n\nfinal as (\n    select\n        position_id\n        ,asset_id\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__position__has__asset"
        },
        "model.my_meltano_project.link__position__has__blockchain": {
            "raw_sql": "with t1 as (\n    select\n        positions_id\n        ,chain\n    from\n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '3' day \n),\n\nt2 as (\n    select\n        positions_id as position_id\n        ,chain as blockchain_id\n    from t1\n    where positions_id is not null\n        and chain is not null\n    group by\n        positions_id,\n        chain\n),\n\nfinal as (\n    select\n        position_id\n        ,blockchain_id\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__position__has__blockchain"
            ],
            "unique_id": "model.my_meltano_project.link__position__has__blockchain",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__position__has__blockchain.sql",
            "original_file_path": "models/anchor/link__position__has__blockchain.sql",
            "name": "link__position__has__blockchain",
            "alias": "link__position__has__blockchain",
            "checksum": {
                "name": "sha256",
                "checksum": "19b0ef9404f317c3dc2dc34eb428332aecf680f5764ebc4ae62115fa1800c0c6"
            },
            "tags": [],
            "refs": [
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__position__has__blockchain.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.4570036,
            "compiled_sql": "with t1 as (\n    select\n        positions_id\n        ,chain\n    from\n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '3' day \n),\n\nt2 as (\n    select\n        positions_id as position_id\n        ,chain as blockchain_id\n    from t1\n    where positions_id is not null\n        and chain is not null\n    group by\n        positions_id,\n        chain\n),\n\nfinal as (\n    select\n        position_id\n        ,blockchain_id\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__position__has__blockchain"
        },
        "model.my_meltano_project.link__position__has__protocol": {
            "raw_sql": "with t1 as (\n    select\n        positions_id\n        ,protocol\n    from\n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '3' day \n),\n\nt2 as (\n    select\n        positions_id as position_id\n        ,protocol as protocol_id\n    from t1\n    where positions_id is not null\n        and protocol is not null\n    group by\n        positions_id,\n        protocol\n),\n\nfinal as (\n    select\n        position_id\n        ,protocol_id\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__position__has__protocol"
            ],
            "unique_id": "model.my_meltano_project.link__position__has__protocol",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__position__has__protocol.sql",
            "original_file_path": "models/anchor/link__position__has__protocol.sql",
            "name": "link__position__has__protocol",
            "alias": "link__position__has__protocol",
            "checksum": {
                "name": "sha256",
                "checksum": "64315d9998337d27542569931c55cbac796808c11da1ba2f94ff9488d57f75cc"
            },
            "tags": [],
            "refs": [
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__position__has__protocol.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.4590425,
            "compiled_sql": "with t1 as (\n    select\n        positions_id\n        ,protocol\n    from\n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '3' day \n),\n\nt2 as (\n    select\n        positions_id as position_id\n        ,protocol as protocol_id\n    from t1\n    where positions_id is not null\n        and protocol is not null\n    group by\n        positions_id,\n        protocol\n),\n\nfinal as (\n    select\n        position_id\n        ,protocol_id\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__position__has__protocol"
        },
        "model.my_meltano_project.link__wallet__has__position": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"position_date\"]\n    )\n}}\n\nwith t1 as (\n    select\n        wallet_address\n        ,positions_id\n        ,quantity\n        ,asset_decimals\n        ,type\n        ,value\n        ,timestamp\n        ,event_date\n    from\n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '3' day \n        {% if is_incremental() %} \n            and event_date >= ( \n                    select max(position_date) - interval '1' day from {{ this }} \n                    )  \n        {% endif %}\n\n),\n\nt2 as (\n    select\n        wallet_address as wallet_id\n        ,positions_id as position_id\n        ,quantity\n        ,asset_decimals\n        ,type as position_type\n        ,value as position_value_usd\n        ,timestamp as position_timestamp\n        ,event_date as position_date\n    from t1\n    where \n        wallet_address is not null\n        and positions_id is not null\n    group by \n        wallet_address\n        ,positions_id\n        ,quantity\n        ,asset_decimals\n        ,type\n        ,value\n        ,timestamp\n        ,event_date\n\n),\n\npre_final as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity / pow(10, asset_decimals) as quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from t2\n),\n\nfinal as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "position_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__wallet__has__position"
            ],
            "unique_id": "model.my_meltano_project.link__wallet__has__position",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__wallet__has__position.sql",
            "original_file_path": "models/anchor/link__wallet__has__position.sql",
            "name": "link__wallet__has__position",
            "alias": "link__wallet__has__position",
            "checksum": {
                "name": "sha256",
                "checksum": "e24fa6f71f9f00aecf8d344be8df324f26ffbf2177f38c054b06617c519e6255"
            },
            "tags": [],
            "refs": [
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__wallet__has__position.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "position_date"
                ]
            },
            "created_at": 1663857806.4609377,
            "compiled_sql": "\n\nwith t1 as (\n    select\n        wallet_address\n        ,positions_id\n        ,quantity\n        ,asset_decimals\n        ,type\n        ,value\n        ,timestamp\n        ,event_date\n    from\n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '3' day \n         \n            and event_date >= ( \n                    select max(position_date) - interval '1' day from dev_pdaniil_anchor.link__wallet__has__position \n                    )  \n        \n\n),\n\nt2 as (\n    select\n        wallet_address as wallet_id\n        ,positions_id as position_id\n        ,quantity\n        ,asset_decimals\n        ,type as position_type\n        ,value as position_value_usd\n        ,timestamp as position_timestamp\n        ,event_date as position_date\n    from t1\n    where \n        wallet_address is not null\n        and positions_id is not null\n    group by \n        wallet_address\n        ,positions_id\n        ,quantity\n        ,asset_decimals\n        ,type\n        ,value\n        ,timestamp\n        ,event_date\n\n),\n\npre_final as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity / pow(10, asset_decimals) as quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from t2\n),\n\nfinal as (\n    select\n        wallet_id\n        ,position_id\n        ,quantity_in_position\n        ,position_type\n        ,position_value_usd\n        ,position_timestamp\n        ,position_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__wallet__has__position"
        },
        "model.my_meltano_project.link__transaction__has__asset": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith stg as (\n    select\n        hash\n        ,asset_address_sent\n        ,asset_amount_sent\n        ,asset_address_received\n        ,asset_amount_received\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and event_date is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\ncnt_address_received as (\n    select\n        hash\n        ,count(distinct address_received) as cnt_uniq_address\n        ,count(address_received) as len_address\n    from \n        stg\n        ,unnest(asset_address_received) as t(address_received)\n    group by \n        hash\n    having \n        count(distinct address_received) = count(address_received)\n),\n\ncnt_address_sent as (\n    select\n        hash\n        ,count(distinct address_sent) as cnt_uniq_address\n        ,count(address_sent) as len_address\n    from \n        stg\n        ,unnest(asset_address_sent) as t(address_sent)\n    group by \n        hash\n    having \n        count(distinct address_sent) = count(address_sent) \n),\n\nhash_for_work as (\n    select hash from cnt_address_received\n\n    union distinct\n\n    select hash from cnt_address_sent\n),\n\nfiltered_transaction as (\n    select * \n    from \n        stg\n    where \n        hash in \n            (select hash from hash_for_work)\n),\n\n\nsent as (\n    select\n        hash\n        ,MAP(asset_address_sent, asset_amount_sent) as asset_sent\n        ,event_date\n    from \n        filtered_transaction\n),\n\nreceived as (\n    select\n        hash\n        ,MAP(asset_address_received, asset_amount_received) as asset_received\n        ,event_date\n    from \n        filtered_transaction\n),\n\nt1 as (\n    select\n        hash\n        ,asset_address\n        ,asset_amount\n        ,'sent' as direction\n        ,event_date\n    from \n        sent, \n        UNNEST(asset_sent) AS t (asset_address, asset_amount)\n),\n\nt2 as (\n    select\n        hash\n        ,asset_address\n        ,asset_amount\n        ,'received' as direction\n        ,event_date\n    from \n        received, \n        UNNEST(asset_received) AS t (asset_address, asset_amount)\n),\n\nall as (\n    select * from t1\n    union all\n    select * from t2\n),\n\npre_final as (\n    select\n        hash as transaction_id\n        ,asset_address as asset_id\n        ,asset_amount as asset_amount\n        ,direction as asset_direction\n        ,event_date as transaction_date\n    from all\n),\n\nfinal as (\n    select\n        transaction_id\n        ,asset_id\n        ,asset_amount\n        ,asset_direction\n        ,transaction_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__transaction__has__asset"
            ],
            "unique_id": "model.my_meltano_project.link__transaction__has__asset",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__transaction__has__asset.sql",
            "original_file_path": "models/anchor/link__transaction__has__asset.sql",
            "name": "link__transaction__has__asset",
            "alias": "link__transaction__has__asset",
            "checksum": {
                "name": "sha256",
                "checksum": "4f452e1a587968fe6bbd97f4b18b32be702cbb5f8f0f665f3e0f2e515c043384"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__transaction__has__asset.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.465446,
            "compiled_sql": "\n\nwith stg as (\n    select\n        hash\n        ,asset_address_sent\n        ,asset_amount_sent\n        ,asset_address_received\n        ,asset_amount_received\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and event_date is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.link__transaction__has__asset \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\ncnt_address_received as (\n    select\n        hash\n        ,count(distinct address_received) as cnt_uniq_address\n        ,count(address_received) as len_address\n    from \n        stg\n        ,unnest(asset_address_received) as t(address_received)\n    group by \n        hash\n    having \n        count(distinct address_received) = count(address_received)\n),\n\ncnt_address_sent as (\n    select\n        hash\n        ,count(distinct address_sent) as cnt_uniq_address\n        ,count(address_sent) as len_address\n    from \n        stg\n        ,unnest(asset_address_sent) as t(address_sent)\n    group by \n        hash\n    having \n        count(distinct address_sent) = count(address_sent) \n),\n\nhash_for_work as (\n    select hash from cnt_address_received\n\n    union distinct\n\n    select hash from cnt_address_sent\n),\n\nfiltered_transaction as (\n    select * \n    from \n        stg\n    where \n        hash in \n            (select hash from hash_for_work)\n),\n\n\nsent as (\n    select\n        hash\n        ,MAP(asset_address_sent, asset_amount_sent) as asset_sent\n        ,event_date\n    from \n        filtered_transaction\n),\n\nreceived as (\n    select\n        hash\n        ,MAP(asset_address_received, asset_amount_received) as asset_received\n        ,event_date\n    from \n        filtered_transaction\n),\n\nt1 as (\n    select\n        hash\n        ,asset_address\n        ,asset_amount\n        ,'sent' as direction\n        ,event_date\n    from \n        sent, \n        UNNEST(asset_sent) AS t (asset_address, asset_amount)\n),\n\nt2 as (\n    select\n        hash\n        ,asset_address\n        ,asset_amount\n        ,'received' as direction\n        ,event_date\n    from \n        received, \n        UNNEST(asset_received) AS t (asset_address, asset_amount)\n),\n\nall as (\n    select * from t1\n    union all\n    select * from t2\n),\n\npre_final as (\n    select\n        hash as transaction_id\n        ,asset_address as asset_id\n        ,asset_amount as asset_amount\n        ,direction as asset_direction\n        ,event_date as transaction_date\n    from all\n),\n\nfinal as (\n    select\n        transaction_id\n        ,asset_id\n        ,asset_amount\n        ,asset_direction\n        ,transaction_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__transaction__has__asset"
        },
        "model.my_meltano_project.link__transaction__has__blockchain": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith t1 as (\n    select\n        hash\n        ,chain\n        ,event_date\n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash is not null\n        and chain is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '14' day\n),\n\nt2 as (\n    select\n        hash as transaction_id\n        ,chain as blockchain_id\n        ,event_date as transaction_date\n    from t1\n     group by\n        hash\n        ,chain\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,blockchain_id\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__transaction__has__blockchain"
            ],
            "unique_id": "model.my_meltano_project.link__transaction__has__blockchain",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__transaction__has__blockchain.sql",
            "original_file_path": "models/anchor/link__transaction__has__blockchain.sql",
            "name": "link__transaction__has__blockchain",
            "alias": "link__transaction__has__blockchain",
            "checksum": {
                "name": "sha256",
                "checksum": "0552c11e826e1afc9d24b0e55ea38554760348f8b14c6679744e9da25936d416"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__transaction__has__blockchain.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.4700687,
            "compiled_sql": "\n\nwith t1 as (\n    select\n        hash\n        ,chain\n        ,event_date\n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash is not null\n        and chain is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.link__transaction__has__blockchain \n                        )  \n        \n        --and event_date = current_date - interval '14' day\n),\n\nt2 as (\n    select\n        hash as transaction_id\n        ,chain as blockchain_id\n        ,event_date as transaction_date\n    from t1\n     group by\n        hash\n        ,chain\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,blockchain_id\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__transaction__has__blockchain"
        },
        "model.my_meltano_project.link__wallet__made__transaction": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith t1 as (\n    select\n        wallet_address\n        ,hash\n        ,event_date\n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and wallet_address is not null\n        and hash is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '14' day\n),\n\nt2 as (\n    select\n        wallet_address as wallet_id\n        ,hash as transaction_id\n        ,event_date as transaction_date\n    from t1\n     group by\n        wallet_address\n        ,hash\n        ,event_date\n),\n\nfinal as (\n    select\n        wallet_id\n        ,transaction_id\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__wallet__made__transaction"
            ],
            "unique_id": "model.my_meltano_project.link__wallet__made__transaction",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__wallet__made__transaction.sql",
            "original_file_path": "models/anchor/link__wallet__made__transaction.sql",
            "name": "link__wallet__made__transaction",
            "alias": "link__wallet__made__transaction",
            "checksum": {
                "name": "sha256",
                "checksum": "8824238ad749c3b01bf0830945e36eb3d4ca25d86b427f12e56d1ab57aa9ec33"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__wallet__made__transaction.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.474644,
            "compiled_sql": "\n\nwith t1 as (\n    select\n        wallet_address\n        ,hash\n        ,event_date\n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and wallet_address is not null\n        and hash is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.link__wallet__made__transaction \n                        )  \n        \n        --and event_date = current_date - interval '14' day\n),\n\nt2 as (\n    select\n        wallet_address as wallet_id\n        ,hash as transaction_id\n        ,event_date as transaction_date\n    from t1\n     group by\n        wallet_address\n        ,hash\n        ,event_date\n),\n\nfinal as (\n    select\n        wallet_id\n        ,transaction_id\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__wallet__made__transaction"
        },
        "model.my_meltano_project.link__wallet__made__event": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_wallet_connected_to_api2')}}    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_portfolio_decomposition')}}     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'readonly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        wallet_address as wallet_id\n        ,to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        ,timestamp as event_timestamp\n        ,event_date\n    from \n        t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,event_id\n        ,event_timestamp\n        ,event_date\n    from \n        pre_final\n    group by\n        wallet_id\n        ,event_id\n        ,event_timestamp\n        ,event_date\n\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_wallet_connected_to_api2",
                    "model.my_meltano_project.stg_portfolio_decomposition",
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__wallet__made__event"
            ],
            "unique_id": "model.my_meltano_project.link__wallet__made__event",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__wallet__made__event.sql",
            "original_file_path": "models/anchor/link__wallet__made__event.sql",
            "name": "link__wallet__made__event",
            "alias": "link__wallet__made__event",
            "checksum": {
                "name": "sha256",
                "checksum": "cf9d0105110363d7bc98226834c84b42f4b62924382f70832725e0b0a01c51fb"
            },
            "tags": [],
            "refs": [
                [
                    "stg_wallet_connected_to_api2"
                ],
                [
                    "stg_portfolio_decomposition"
                ],
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__wallet__made__event.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.4789655,
            "compiled_sql": "\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_wallet_connected_to_api2    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.link__wallet__made__event \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.link__wallet__made__event \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.link__wallet__made__event \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'readonly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        wallet_address as wallet_id\n        ,to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        ,timestamp as event_timestamp\n        ,event_date\n    from \n        t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,event_id\n        ,event_timestamp\n        ,event_date\n    from \n        pre_final\n    group by\n        wallet_id\n        ,event_id\n        ,event_timestamp\n        ,event_date\n\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__wallet__made__event"
        },
        "model.my_meltano_project.link__wallet_provider__has__event": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,lower(wallet_provider) as wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_wallet_connected_to_api2')}}    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        and wallet_provider is not null\n        and wallet_provider != ''\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,lower(wallet_provider) as wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_portfolio_decomposition')}}     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        and wallet_provider is not null\n        and wallet_provider != ''\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,lower(wallet_provider) as wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        and wallet_provider is not null\n        and wallet_provider != ''\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'readonly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,case\n            when wallet_provider like '%zerion%' then 'zerion'\n            else wallet_provider\n        end as wallet_provider\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        wallet_provider as wallet_provider_id\n        ,to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        ,event_date\n    from \n        t1\n    where \n        event != 'watchaddress'\n),\n\nfinal as (\n    select\n        wallet_provider_id\n        ,event_id\n        ,event_date\n    from \n        pre_final\n    group by\n        wallet_provider_id\n        ,event_id\n        ,event_date\n\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_wallet_connected_to_api2",
                    "model.my_meltano_project.stg_portfolio_decomposition",
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__wallet_provider__has__event"
            ],
            "unique_id": "model.my_meltano_project.link__wallet_provider__has__event",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__wallet_provider__has__event.sql",
            "original_file_path": "models/anchor/link__wallet_provider__has__event.sql",
            "name": "link__wallet_provider__has__event",
            "alias": "link__wallet_provider__has__event",
            "checksum": {
                "name": "sha256",
                "checksum": "556014c9399f6870b71338f047c7adeb0d176c30b37fa149dd7ca7955e082cc3"
            },
            "tags": [],
            "refs": [
                [
                    "stg_wallet_connected_to_api2"
                ],
                [
                    "stg_portfolio_decomposition"
                ],
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__wallet_provider__has__event.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.4847646,
            "compiled_sql": "\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,lower(wallet_provider) as wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_wallet_connected_to_api2    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        and wallet_provider is not null\n        and wallet_provider != ''\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.link__wallet_provider__has__event \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,lower(wallet_provider) as wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        and wallet_provider is not null\n        and wallet_provider != ''\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.link__wallet_provider__has__event \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,lower(wallet_provider) as wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        and wallet_provider is not null\n        and wallet_provider != ''\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.link__wallet_provider__has__event \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'readonly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,case\n            when wallet_provider like '%zerion%' then 'zerion'\n            else wallet_provider\n        end as wallet_provider\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        wallet_provider as wallet_provider_id\n        ,to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        ,event_date\n    from \n        t1\n    where \n        event != 'watchaddress'\n),\n\nfinal as (\n    select\n        wallet_provider_id\n        ,event_id\n        ,event_date\n    from \n        pre_final\n    group by\n        wallet_provider_id\n        ,event_id\n        ,event_date\n\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__wallet_provider__has__event"
        },
        "model.my_meltano_project.link__wallet_provider__has__transaction": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith t1 as (\n    select\n        lower(wallet_provider) as wallet_provider\n        ,hash\n        ,event_date\n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and wallet_provider is not null\n        and wallet_provider not in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'readonly', 'viewer_not_added', 'viewernotadded')\n        and hash is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '14' day\n),\n\nt2 as (\n    select\n        case\n            when wallet_provider like '%zerion%' then 'zerion'\n            else wallet_provider\n        end as wallet_provider_id\n        ,hash as transaction_id\n        ,event_date as transaction_date\n    from t1\n),\n\npre_final as (\n    select\n        wallet_provider_id\n        ,transaction_id\n        ,transaction_date\n    from t2\n    group by\n        wallet_provider_id\n        ,transaction_id\n        ,transaction_date\n),\n\nfinal as (\n    select\n        wallet_provider_id\n        ,transaction_id\n        ,transaction_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__wallet_provider__has__transaction"
            ],
            "unique_id": "model.my_meltano_project.link__wallet_provider__has__transaction",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__wallet_provider__has__transaction.sql",
            "original_file_path": "models/anchor/link__wallet_provider__has__transaction.sql",
            "name": "link__wallet_provider__has__transaction",
            "alias": "link__wallet_provider__has__transaction",
            "checksum": {
                "name": "sha256",
                "checksum": "6bb428b0992c77f9707cb5f78442ccb57cf381ca94360101a25b1f93af18d23d"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__wallet_provider__has__transaction.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.491217,
            "compiled_sql": "\n\nwith t1 as (\n    select\n        lower(wallet_provider) as wallet_provider\n        ,hash\n        ,event_date\n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and wallet_provider is not null\n        and wallet_provider not in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'readonly', 'viewer_not_added', 'viewernotadded')\n        and hash is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.link__wallet_provider__has__transaction \n                        )  \n        \n        --and event_date = current_date - interval '14' day\n),\n\nt2 as (\n    select\n        case\n            when wallet_provider like '%zerion%' then 'zerion'\n            else wallet_provider\n        end as wallet_provider_id\n        ,hash as transaction_id\n        ,event_date as transaction_date\n    from t1\n),\n\npre_final as (\n    select\n        wallet_provider_id\n        ,transaction_id\n        ,transaction_date\n    from t2\n    group by\n        wallet_provider_id\n        ,transaction_id\n        ,transaction_date\n),\n\nfinal as (\n    select\n        wallet_provider_id\n        ,transaction_id\n        ,transaction_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__wallet_provider__has__transaction"
        },
        "model.my_meltano_project.link__wallet__has__blockchain": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"decomposition_date\"]\n    )\n}}\n\nwith t1 as (\n    select\n        wallet_address\n        ,chain\n        ,ch_value\n        ,timestamp\n        ,event_date\n    from \n        {{ref ('stg_portfolio_decomposition_long')}}  --\"bi_staging\".\"stg_portfolio_decomposition_long\"\n    where 1=1\n        and wallet_address is not null\n        and chain is not null\n        and ch_value > 0\n        {% if is_incremental() %} \n            and event_date >= ( \n                    select max(decomposition_date) - interval '1' day from {{ this }} \n                    )  \n        {% endif %}\n        --and event_date = current_date - interval '20' day \n),\n\nt2 as (\n    select\n        wallet_address as wallet_id\n        ,chain as blockchain_id\n        ,ch_value as blockchain_value\n        ,timestamp as decomposition_timestamp\n        ,event_date as decomposition_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,blockchain_id\n        ,blockchain_value\n        ,decomposition_timestamp\n        ,decomposition_date\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_portfolio_decomposition_long"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "decomposition_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "link__wallet__has__blockchain"
            ],
            "unique_id": "model.my_meltano_project.link__wallet__has__blockchain",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/link__wallet__has__blockchain.sql",
            "original_file_path": "models/anchor/link__wallet__has__blockchain.sql",
            "name": "link__wallet__has__blockchain",
            "alias": "link__wallet__has__blockchain",
            "checksum": {
                "name": "sha256",
                "checksum": "0005d01f265d3222cf1f811c1ba8c1af094223cb5927edf37f9222c1dafe1e7a"
            },
            "tags": [],
            "refs": [
                [
                    "stg_portfolio_decomposition_long"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/link__wallet__has__blockchain.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "decomposition_date"
                ]
            },
            "created_at": 1663857806.4958196,
            "compiled_sql": "\n\nwith t1 as (\n    select\n        wallet_address\n        ,chain\n        ,ch_value\n        ,timestamp\n        ,event_date\n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition_long  --\"bi_staging\".\"stg_portfolio_decomposition_long\"\n    where 1=1\n        and wallet_address is not null\n        and chain is not null\n        and ch_value > 0\n         \n            and event_date >= ( \n                    select max(decomposition_date) - interval '1' day from dev_pdaniil_anchor.link__wallet__has__blockchain \n                    )  \n        \n        --and event_date = current_date - interval '20' day \n),\n\nt2 as (\n    select\n        wallet_address as wallet_id\n        ,chain as blockchain_id\n        ,ch_value as blockchain_value\n        ,timestamp as decomposition_timestamp\n        ,event_date as decomposition_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,blockchain_id\n        ,blockchain_value\n        ,decomposition_timestamp\n        ,decomposition_date\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.link__wallet__has__blockchain"
        },
        "model.my_meltano_project.anchor__asset": {
            "raw_sql": "with raw as (\n    select\n        asset_id \n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        asset_id\n        ,min(event_date) as asset_date\n    from raw\n    where 1=1\n        and asset_id is not null\n        and event_date is not null\n    group by \n        asset_id\n),\n\nfinal as (\n    select\n        asset_id\n        ,asset_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "asset",
                "anchor__asset"
            ],
            "unique_id": "model.my_meltano_project.anchor__asset",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/asset/anchor__asset.sql",
            "original_file_path": "models/anchor/asset/anchor__asset.sql",
            "name": "anchor__asset",
            "alias": "anchor__asset",
            "checksum": {
                "name": "sha256",
                "checksum": "54d895ef34fc1c0ae9d2e54589280f6a5bddc171c567d8c05daa55ac94ee0dc4"
            },
            "tags": [],
            "refs": [
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/asset/anchor__asset.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.5002322,
            "compiled_sql": "with raw as (\n    select\n        asset_id \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        asset_id\n        ,min(event_date) as asset_date\n    from raw\n    where 1=1\n        and asset_id is not null\n        and event_date is not null\n    group by \n        asset_id\n),\n\nfinal as (\n    select\n        asset_id\n        ,asset_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.anchor__asset"
        },
        "model.my_meltano_project.attr__asset__asset_decimals": {
            "raw_sql": "with raw as (\n    select\n        asset_id \n        ,asset_decimals\n    from \n        {{ref ('stg_address_positions')}}    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and asset_id is not null\n        and asset_decimals is not null\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        asset_id \n        ,asset_decimals\n    from raw\n    group by \n        asset_id \n        ,asset_decimals\n),\n\nfinal as (\n    select\n        asset_id \n        ,asset_decimals\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "asset",
                "attr__asset__asset_decimals"
            ],
            "unique_id": "model.my_meltano_project.attr__asset__asset_decimals",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/asset/attr__asset__asset_decimals.sql",
            "original_file_path": "models/anchor/asset/attr__asset__asset_decimals.sql",
            "name": "attr__asset__asset_decimals",
            "alias": "attr__asset__asset_decimals",
            "checksum": {
                "name": "sha256",
                "checksum": "a2b22ba5ed95cb934eb8cdf07fa9d047f428295723c2670a7bb68cfb0970b0a3"
            },
            "tags": [],
            "refs": [
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/asset/attr__asset__asset_decimals.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.5021257,
            "compiled_sql": "with raw as (\n    select\n        asset_id \n        ,asset_decimals\n    from \n        dev_pdaniil_staging.stg_address_positions    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and asset_id is not null\n        and asset_decimals is not null\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        asset_id \n        ,asset_decimals\n    from raw\n    group by \n        asset_id \n        ,asset_decimals\n),\n\nfinal as (\n    select\n        asset_id \n        ,asset_decimals\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__asset__asset_decimals"
        },
        "model.my_meltano_project.attr__asset__asset_name": {
            "raw_sql": "with raw as (\n    select\n        asset_id \n        ,asset_name \n    from \n        {{ref ('stg_address_positions')}}    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and asset_id is not null\n        and asset_name is not null\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        asset_id \n        ,asset_name\n    from raw\n    group by \n        asset_id \n        ,asset_name\n),\n\nfinal as (\n    select\n        asset_id \n        ,asset_name\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "asset",
                "attr__asset__asset_name"
            ],
            "unique_id": "model.my_meltano_project.attr__asset__asset_name",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/asset/attr__asset__asset_name.sql",
            "original_file_path": "models/anchor/asset/attr__asset__asset_name.sql",
            "name": "attr__asset__asset_name",
            "alias": "attr__asset__asset_name",
            "checksum": {
                "name": "sha256",
                "checksum": "f30c122efd205d8277a3929cfa2593af1e7f7408d7895e2a837e63c3f0c383ce"
            },
            "tags": [],
            "refs": [
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/asset/attr__asset__asset_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.5042393,
            "compiled_sql": "with raw as (\n    select\n        asset_id \n        ,asset_name \n    from \n        dev_pdaniil_staging.stg_address_positions    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and asset_id is not null\n        and asset_name is not null\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        asset_id \n        ,asset_name\n    from raw\n    group by \n        asset_id \n        ,asset_name\n),\n\nfinal as (\n    select\n        asset_id \n        ,asset_name\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__asset__asset_name"
        },
        "model.my_meltano_project.attr__asset__asset_symbol": {
            "raw_sql": "with raw as (\n    select\n        asset_id \n        ,asset_symbol\n    from \n        {{ref ('stg_address_positions')}}    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and asset_id is not null\n        and asset_symbol is not null\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        asset_id \n        ,asset_symbol\n    from raw\n    group by \n        asset_id \n        ,asset_symbol\n),\n\nfinal as (\n    select\n        asset_id \n        ,asset_symbol\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "asset",
                "attr__asset__asset_symbol"
            ],
            "unique_id": "model.my_meltano_project.attr__asset__asset_symbol",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/asset/attr__asset__asset_symbol.sql",
            "original_file_path": "models/anchor/asset/attr__asset__asset_symbol.sql",
            "name": "attr__asset__asset_symbol",
            "alias": "attr__asset__asset_symbol",
            "checksum": {
                "name": "sha256",
                "checksum": "a2b9e3bcce69d01b537cafd9bedfb115a7a10bbba9986e956bde0a8188968361"
            },
            "tags": [],
            "refs": [
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/asset/attr__asset__asset_symbol.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.5061197,
            "compiled_sql": "with raw as (\n    select\n        asset_id \n        ,asset_symbol\n    from \n        dev_pdaniil_staging.stg_address_positions    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and asset_id is not null\n        and asset_symbol is not null\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        asset_id \n        ,asset_symbol\n    from raw\n    group by \n        asset_id \n        ,asset_symbol\n),\n\nfinal as (\n    select\n        asset_id \n        ,asset_symbol\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__asset__asset_symbol"
        },
        "model.my_meltano_project.anchor__blockchain": {
            "raw_sql": "with raw as (\n    select\n        chain as blockchain_id\n        ,event_date \n    from \n        {{ref ('stg_portfolio_decomposition_long')}}    --\"bi_staging\".\"stg_portfolio_decomposition_long\"\n    where 1=1\n        --and event_date = current_date - interval '3' day\n),\n\npre_final as (\n    select\n        blockchain_id\n        ,min(event_date) as blockchain_date\n    from raw\n    where 1=1\n        and blockchain_id is not null\n        and event_date is not null\n    group by \n        blockchain_id\n),\n\nfinal as (\n    select\n        blockchain_id\n        ,blockchain_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_portfolio_decomposition_long"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "blockchain",
                "anchor__blockchain"
            ],
            "unique_id": "model.my_meltano_project.anchor__blockchain",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/blockchain/anchor__blockchain.sql",
            "original_file_path": "models/anchor/blockchain/anchor__blockchain.sql",
            "name": "anchor__blockchain",
            "alias": "anchor__blockchain",
            "checksum": {
                "name": "sha256",
                "checksum": "6d4d264ad562b5a72bfa2d4b306709fe9228e5c9f8788a7cc98a35d8c987a3aa"
            },
            "tags": [],
            "refs": [
                [
                    "stg_portfolio_decomposition_long"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/blockchain/anchor__blockchain.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.5080028,
            "compiled_sql": "with raw as (\n    select\n        chain as blockchain_id\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition_long    --\"bi_staging\".\"stg_portfolio_decomposition_long\"\n    where 1=1\n        --and event_date = current_date - interval '3' day\n),\n\npre_final as (\n    select\n        blockchain_id\n        ,min(event_date) as blockchain_date\n    from raw\n    where 1=1\n        and blockchain_id is not null\n        and event_date is not null\n    group by \n        blockchain_id\n),\n\nfinal as (\n    select\n        blockchain_id\n        ,blockchain_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.anchor__blockchain"
        },
        "model.my_meltano_project.anchor__position": {
            "raw_sql": "with raw as (\n    select\n        positions_id as position_id\n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        position_id\n        ,min(event_date) as position_date\n    from raw\n    where 1=1\n        and position_id is not null\n        and event_date is not null\n    group by \n        position_id\n),\n\nfinal as (\n    select\n        position_id\n        ,position_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "position",
                "anchor__position"
            ],
            "unique_id": "model.my_meltano_project.anchor__position",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/position/anchor__position.sql",
            "original_file_path": "models/anchor/position/anchor__position.sql",
            "name": "anchor__position",
            "alias": "anchor__position",
            "checksum": {
                "name": "sha256",
                "checksum": "2a3b7d931bdc4e1f9a7da0047dd88ec46a4d5e4a35b93ce4400ccbc88642a9ab"
            },
            "tags": [],
            "refs": [
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/position/anchor__position.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.509879,
            "compiled_sql": "with raw as (\n    select\n        positions_id as position_id\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        position_id\n        ,min(event_date) as position_date\n    from raw\n    where 1=1\n        and position_id is not null\n        and event_date is not null\n    group by \n        position_id\n),\n\nfinal as (\n    select\n        position_id\n        ,position_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.anchor__position"
        },
        "model.my_meltano_project.anchor__protocol": {
            "raw_sql": "with raw as (\n    select\n        protocol as protocol_id\n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '5' day\n),\n\npre_final as (\n    select\n        protocol_id\n        ,min(event_date) as protocol_date\n    from raw\n    where 1=1\n        and protocol_id is not null\n        and event_date is not null\n    group by \n        protocol_id\n),\n\nfinal as (\n    select\n        protocol_id\n        ,protocol_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "protocol",
                "anchor__protocol"
            ],
            "unique_id": "model.my_meltano_project.anchor__protocol",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/protocol/anchor__protocol.sql",
            "original_file_path": "models/anchor/protocol/anchor__protocol.sql",
            "name": "anchor__protocol",
            "alias": "anchor__protocol",
            "checksum": {
                "name": "sha256",
                "checksum": "8006c6d7de6497391e9c185c38ae4dc17838494990551841bd9dc9e5817c4711"
            },
            "tags": [],
            "refs": [
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/protocol/anchor__protocol.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.5119739,
            "compiled_sql": "with raw as (\n    select\n        protocol as protocol_id\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions    --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '5' day\n),\n\npre_final as (\n    select\n        protocol_id\n        ,min(event_date) as protocol_date\n    from raw\n    where 1=1\n        and protocol_id is not null\n        and event_date is not null\n    group by \n        protocol_id\n),\n\nfinal as (\n    select\n        protocol_id\n        ,protocol_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.anchor__protocol"
        },
        "model.my_meltano_project.anchor__transaction": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith t1 as (\n    select\n        hash\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and event_date is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\nt2 as (\n    select\n        hash as transaction_id\n        ,event_date as transaction_date\n    from t1\n    group by\n        hash,\n        event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "transaction",
                "anchor__transaction"
            ],
            "unique_id": "model.my_meltano_project.anchor__transaction",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/transaction/anchor__transaction.sql",
            "original_file_path": "models/anchor/transaction/anchor__transaction.sql",
            "name": "anchor__transaction",
            "alias": "anchor__transaction",
            "checksum": {
                "name": "sha256",
                "checksum": "cc4f513ab72c04d52acab89bf09768c7ee3c57c38c12682980d1552c776dda19"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/transaction/anchor__transaction.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.5138667,
            "compiled_sql": "\n\nwith t1 as (\n    select\n        hash\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and event_date is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.anchor__transaction \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\nt2 as (\n    select\n        hash as transaction_id\n        ,event_date as transaction_date\n    from t1\n    group by\n        hash,\n        event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.anchor__transaction"
        },
        "model.my_meltano_project.attr__transaction__transaction_api_client_name": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,api_client_name\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and api_client_name is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,api_client_name\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,api_client_name\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,api_client_name as transaction_api_client_name\n        ,event_date as transaction_date\n    from filtered\n    group by \n        hash\n        ,api_client_name\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_api_client_name\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "transaction",
                "attr__transaction__transaction_api_client_name"
            ],
            "unique_id": "model.my_meltano_project.attr__transaction__transaction_api_client_name",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/transaction/attr__transaction__transaction_api_client_name.sql",
            "original_file_path": "models/anchor/transaction/attr__transaction__transaction_api_client_name.sql",
            "name": "attr__transaction__transaction_api_client_name",
            "alias": "attr__transaction__transaction_api_client_name",
            "checksum": {
                "name": "sha256",
                "checksum": "2236db63ebde1b8c4cb192c78fea1f5b6b899a05278fd55484b27beeb40d52fb"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/transaction/attr__transaction__transaction_api_client_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.5183034,
            "compiled_sql": "\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,api_client_name\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and api_client_name is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.attr__transaction__transaction_api_client_name \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,api_client_name\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,api_client_name\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,api_client_name as transaction_api_client_name\n        ,event_date as transaction_date\n    from filtered\n    group by \n        hash\n        ,api_client_name\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_api_client_name\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__transaction__transaction_api_client_name"
        },
        "model.my_meltano_project.attr__transaction__transaction_context": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and context is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,context\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,context as transaction_context\n        ,event_date as transaction_date\n    from filtered\n    group by\n        hash\n        ,context\n        ,event_date\n),\n\nt2 as (\n    select\n        transaction_id\n        ,case\n            when transaction_context in ('Swap', 'Exchange') then 'Trade'\n            when transaction_context = 'Send' then 'Transfer'\n            when transaction_context = 'NFTPurchase' then 'Wallet Benefits'\n            else transaction_context\n        end as transaction_context\n        ,transaction_date\n    from t1\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_context\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "transaction",
                "attr__transaction__transaction_context"
            ],
            "unique_id": "model.my_meltano_project.attr__transaction__transaction_context",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/transaction/attr__transaction__transaction_context.sql",
            "original_file_path": "models/anchor/transaction/attr__transaction__transaction_context.sql",
            "name": "attr__transaction__transaction_context",
            "alias": "attr__transaction__transaction_context",
            "checksum": {
                "name": "sha256",
                "checksum": "bced206c6734f8b537a51f62c25ddfd57548a4563a1071f17f355f02edcb01db"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/transaction/attr__transaction__transaction_context.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.5228605,
            "compiled_sql": "\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and context is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.attr__transaction__transaction_context \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,context\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,context as transaction_context\n        ,event_date as transaction_date\n    from filtered\n    group by\n        hash\n        ,context\n        ,event_date\n),\n\nt2 as (\n    select\n        transaction_id\n        ,case\n            when transaction_context in ('Swap', 'Exchange') then 'Trade'\n            when transaction_context = 'Send' then 'Transfer'\n            when transaction_context = 'NFTPurchase' then 'Wallet Benefits'\n            else transaction_context\n        end as transaction_context\n        ,transaction_date\n    from t1\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_context\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__transaction__transaction_context"
        },
        "model.my_meltano_project.attr__transaction__transaction_contract_type": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,contract_type\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and contract_type is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,contract_type\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,contract_type\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,contract_type as transaction_contract_type\n        ,event_date as transaction_date\n    from filtered\n    group by\n        hash\n        ,contract_type\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_contract_type\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "transaction",
                "attr__transaction__transaction_contract_type"
            ],
            "unique_id": "model.my_meltano_project.attr__transaction__transaction_contract_type",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/transaction/attr__transaction__transaction_contract_type.sql",
            "original_file_path": "models/anchor/transaction/attr__transaction__transaction_contract_type.sql",
            "name": "attr__transaction__transaction_contract_type",
            "alias": "attr__transaction__transaction_contract_type",
            "checksum": {
                "name": "sha256",
                "checksum": "4002395f5212cc7bdf7164ff6b5910bd247bc3b248f50696c81d1c04f01962de"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/transaction/attr__transaction__transaction_contract_type.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.5274565,
            "compiled_sql": "\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,contract_type\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and contract_type is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.attr__transaction__transaction_contract_type \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,contract_type\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,contract_type\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,contract_type as transaction_contract_type\n        ,event_date as transaction_date\n    from filtered\n    group by\n        hash\n        ,contract_type\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_contract_type\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__transaction__transaction_contract_type"
        },
        "model.my_meltano_project.attr__transaction__transaction_origin": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,origin\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and origin is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,origin\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,origin\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,origin as transaction_origin\n        ,event_date as transaction_date\n    from filtered\n    group by\n         hash\n        ,origin\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_origin\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "transaction",
                "attr__transaction__transaction_origin"
            ],
            "unique_id": "model.my_meltano_project.attr__transaction__transaction_origin",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/transaction/attr__transaction__transaction_origin.sql",
            "original_file_path": "models/anchor/transaction/attr__transaction__transaction_origin.sql",
            "name": "attr__transaction__transaction_origin",
            "alias": "attr__transaction__transaction_origin",
            "checksum": {
                "name": "sha256",
                "checksum": "3bedc91622024dc64999bcae88f6dd70df953777d28d16cc95442430e2c313fd"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/transaction/attr__transaction__transaction_origin.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.532001,
            "compiled_sql": "\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,origin\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and origin is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.attr__transaction__transaction_origin \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,origin\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,origin\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,origin as transaction_origin\n        ,event_date as transaction_date\n    from filtered\n    group by\n         hash\n        ,origin\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_origin\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__transaction__transaction_origin"
        },
        "model.my_meltano_project.attr__transaction__transaction_type": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,type\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and type is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,type\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,type\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,type as transaction_type\n        ,event_date as transaction_date\n    from filtered\n    group by\n         hash\n        ,type\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_type\n        ,transaction_date\n    from t1\n        \n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "transaction",
                "attr__transaction__transaction_type"
            ],
            "unique_id": "model.my_meltano_project.attr__transaction__transaction_type",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/transaction/attr__transaction__transaction_type.sql",
            "original_file_path": "models/anchor/transaction/attr__transaction__transaction_type.sql",
            "name": "attr__transaction__transaction_type",
            "alias": "attr__transaction__transaction_type",
            "checksum": {
                "name": "sha256",
                "checksum": "4c3d19e1384de32b01385769a66da95392c9a19f23bbe42b2125f0553ebe518c"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/transaction/attr__transaction__transaction_type.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.5365875,
            "compiled_sql": "\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,type\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and type is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.attr__transaction__transaction_type \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,type\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,type\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,type as transaction_type\n        ,event_date as transaction_date\n    from filtered\n    group by\n         hash\n        ,type\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_type\n        ,transaction_date\n    from t1\n        \n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__transaction__transaction_type"
        },
        "model.my_meltano_project.attr__transaction__transaction_zerion_fee_usd": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,zerion_fee_usd_amount\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and zerion_fee_usd_amount is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,zerion_fee_usd_amount\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,zerion_fee_usd_amount\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,cast(zerion_fee_usd_amount as double) as transaction_zerion_fee_usd\n        ,event_date as transaction_date\n    from filtered\n    group by \n        hash\n        ,zerion_fee_usd_amount\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_zerion_fee_usd\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "transaction",
                "attr__transaction__transaction_zerion_fee_usd"
            ],
            "unique_id": "model.my_meltano_project.attr__transaction__transaction_zerion_fee_usd",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/transaction/attr__transaction__transaction_zerion_fee_usd.sql",
            "original_file_path": "models/anchor/transaction/attr__transaction__transaction_zerion_fee_usd.sql",
            "name": "attr__transaction__transaction_zerion_fee_usd",
            "alias": "attr__transaction__transaction_zerion_fee_usd",
            "checksum": {
                "name": "sha256",
                "checksum": "bcc27aaf8285e69fa38ba64b857f41f60ad87de1fbd088b5b6aae077e0f89f55"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/transaction/attr__transaction__transaction_zerion_fee_usd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.541754,
            "compiled_sql": "\n\nwith stg as (\n    select\n        hash\n        ,context\n        ,zerion_fee_usd_amount\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and zerion_fee_usd_amount is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.attr__transaction__transaction_zerion_fee_usd \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,context\n        ,zerion_fee_usd_amount\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash\n        ,zerion_fee_usd_amount\n        ,event_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        hash as transaction_id\n        ,cast(zerion_fee_usd_amount as double) as transaction_zerion_fee_usd\n        ,event_date as transaction_date\n    from filtered\n    group by \n        hash\n        ,zerion_fee_usd_amount\n        ,event_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_zerion_fee_usd\n        ,transaction_date\n    from t1\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__transaction__transaction_zerion_fee_usd"
        },
        "model.my_meltano_project.attr__transaction__transaction_amount_received_usd": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith stg as (\n    select\n        hash\n        ,chain\n        ,context\n        ,usd_amount_received\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and usd_amount_received is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\ntransaction__has__asset as (\n    select\n        transaction_id\n        ,asset_id\n    from \n        {{ref ('link__transaction__has__asset')}}   --\"bi_anchor\".\"link__transaction__has__asset\"\n    where 1=1\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,chain\n        ,context\n        ,usd_amount_received\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash as transaction_id\n        ,chain\n        ,usd_amount_received as transaction_amount_received_usd\n        ,event_date as transaction_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        transaction_id\n        ,chain\n        ,asset_id\n        ,transaction_amount_received_usd\n        ,transaction_date\n    from filtered\n    left join transaction__has__asset using (transaction_id)\n),\n\nt2 as (\n    select\n        transaction_id\n        ,case \n            when asset_id in ('0xdac17f958d2ee523a2206206994597c13d831ec7', \n                '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48') \n                and chain = 'binance-smart-chain'\n                    then transaction_amount_received_usd / pow(10, 12)\n            else transaction_amount_received_usd\n        end as transaction_amount_received_usd\n        ,transaction_date\n    from t1\n),\n\npre_final as (\n    select\n        transaction_id\n        ,min(transaction_amount_received_usd) as transaction_amount_received_usd\n        ,transaction_date\n    from t2\n    group by\n        transaction_id\n        ,transaction_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_amount_received_usd\n        ,transaction_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction",
                    "model.my_meltano_project.link__transaction__has__asset"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "transaction",
                "attr__transaction__transaction_amount_received_usd"
            ],
            "unique_id": "model.my_meltano_project.attr__transaction__transaction_amount_received_usd",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/transaction/attr__transaction__transaction_amount_received_usd.sql",
            "original_file_path": "models/anchor/transaction/attr__transaction__transaction_amount_received_usd.sql",
            "name": "attr__transaction__transaction_amount_received_usd",
            "alias": "attr__transaction__transaction_amount_received_usd",
            "checksum": {
                "name": "sha256",
                "checksum": "182cccdfed6d12e49b96e5b08af6cef28986cff3cec7c828fa791c0c35aa8ff7"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ],
                [
                    "link__transaction__has__asset"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/transaction/attr__transaction__transaction_amount_received_usd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.5463018,
            "compiled_sql": "\n\nwith stg as (\n    select\n        hash\n        ,chain\n        ,context\n        ,usd_amount_received\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and usd_amount_received is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.attr__transaction__transaction_amount_received_usd \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\ntransaction__has__asset as (\n    select\n        transaction_id\n        ,asset_id\n    from \n        dev_pdaniil_anchor.link__transaction__has__asset   --\"bi_anchor\".\"link__transaction__has__asset\"\n    where 1=1\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.attr__transaction__transaction_amount_received_usd \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,chain\n        ,context\n        ,usd_amount_received\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash as transaction_id\n        ,chain\n        ,usd_amount_received as transaction_amount_received_usd\n        ,event_date as transaction_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        transaction_id\n        ,chain\n        ,asset_id\n        ,transaction_amount_received_usd\n        ,transaction_date\n    from filtered\n    left join transaction__has__asset using (transaction_id)\n),\n\nt2 as (\n    select\n        transaction_id\n        ,case \n            when asset_id in ('0xdac17f958d2ee523a2206206994597c13d831ec7', \n                '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48') \n                and chain = 'binance-smart-chain'\n                    then transaction_amount_received_usd / pow(10, 12)\n            else transaction_amount_received_usd\n        end as transaction_amount_received_usd\n        ,transaction_date\n    from t1\n),\n\npre_final as (\n    select\n        transaction_id\n        ,min(transaction_amount_received_usd) as transaction_amount_received_usd\n        ,transaction_date\n    from t2\n    group by\n        transaction_id\n        ,transaction_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_amount_received_usd\n        ,transaction_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__transaction__transaction_amount_received_usd"
        },
        "model.my_meltano_project.attr__transaction__transaction_amount_sent_usd": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith stg as (\n    select\n        hash\n        ,chain\n        ,context\n        ,usd_amount_sent\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and usd_amount_sent is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\ntransaction__has__asset as (\n    select\n        transaction_id\n        ,asset_id\n    from \n        {{ref ('link__transaction__has__asset')}}   --\"bi_anchor\".\"link__transaction__has__asset\"\n    where 1=1\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,chain\n        ,context\n        ,usd_amount_sent\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash as transaction_id\n        ,chain\n        ,usd_amount_sent as transaction_amount_sent_usd\n        ,event_date as transaction_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        transaction_id\n        ,chain\n        ,asset_id\n        ,transaction_amount_sent_usd\n        ,transaction_date\n    from filtered\n    left join transaction__has__asset using (transaction_id)\n),\n\nt2 as (\n    select\n        transaction_id\n        ,case \n            when asset_id in ('0xdac17f958d2ee523a2206206994597c13d831ec7', \n                '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48') \n                and chain = 'binance-smart-chain'\n                    then transaction_amount_sent_usd / pow(10, 12)\n            else transaction_amount_sent_usd\n        end as transaction_amount_sent_usd\n        ,transaction_date\n    from t1\n),\n\npre_final as (\n    select\n        transaction_id\n        ,min(transaction_amount_sent_usd) as transaction_amount_sent_usd\n        ,transaction_date\n    from t2\n    group by\n        transaction_id\n        ,transaction_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_amount_sent_usd\n        ,transaction_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_signed_transaction",
                    "model.my_meltano_project.link__transaction__has__asset"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "transaction",
                "attr__transaction__transaction_amount_sent_usd"
            ],
            "unique_id": "model.my_meltano_project.attr__transaction__transaction_amount_sent_usd",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/transaction/attr__transaction__transaction_amount_sent_usd.sql",
            "original_file_path": "models/anchor/transaction/attr__transaction__transaction_amount_sent_usd.sql",
            "name": "attr__transaction__transaction_amount_sent_usd",
            "alias": "attr__transaction__transaction_amount_sent_usd",
            "checksum": {
                "name": "sha256",
                "checksum": "7c7b1c41dbd11a94150d146e70b2ba49a7a2c8cb44f097905908ad28197ec0f8"
            },
            "tags": [],
            "refs": [
                [
                    "stg_signed_transaction"
                ],
                [
                    "link__transaction__has__asset"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/transaction/attr__transaction__transaction_amount_sent_usd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.5517404,
            "compiled_sql": "\n\nwith stg as (\n    select\n        hash\n        ,chain\n        ,context\n        ,usd_amount_sent\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and hash != '0x123123'\n        and hash is not null\n        and usd_amount_sent is not null\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.attr__transaction__transaction_amount_sent_usd \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\ntransaction__has__asset as (\n    select\n        transaction_id\n        ,asset_id\n    from \n        dev_pdaniil_anchor.link__transaction__has__asset   --\"bi_anchor\".\"link__transaction__has__asset\"\n    where 1=1\n         \n            AND event_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_anchor.attr__transaction__transaction_amount_sent_usd \n                        )  \n        \n        --and event_date = current_date - interval '1' day\n),\n\ncounter as (\n    select\n        hash\n        ,chain\n        ,context\n        ,usd_amount_sent\n        ,event_date\n        ,count() over (partition by hash) as cnt\n    from stg\n),\n\nfiltered as (\n    select\n        hash as transaction_id\n        ,chain\n        ,usd_amount_sent as transaction_amount_sent_usd\n        ,event_date as transaction_date\n    from \n        counter\n    where \n        cnt = 1\n        or (cnt > 1 and context != 'WalletConnect')\n    /* \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e,\n    context == 'WalletConnect' \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 2 \u0441\u043b\u0443\u0447\u0430\u044f\u0445:\n    1. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 1 \u0437\u0430\u043f\u0438\u0441\u044c\n    2. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f \u0438\u043d\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u0448\u0438\u043c \u0441\u0430\u0439\u0442\u043e\u043c, \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2 \u0437\u0430\u043f\u0438\u0441\u0438 \u0438 \u043e\u0442\u0431\u0438\u0440\u0430\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0431\u0435\u0437 WalletConnect \n    */\n),\n\nt1 as (\n    select\n        transaction_id\n        ,chain\n        ,asset_id\n        ,transaction_amount_sent_usd\n        ,transaction_date\n    from filtered\n    left join transaction__has__asset using (transaction_id)\n),\n\nt2 as (\n    select\n        transaction_id\n        ,case \n            when asset_id in ('0xdac17f958d2ee523a2206206994597c13d831ec7', \n                '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48') \n                and chain = 'binance-smart-chain'\n                    then transaction_amount_sent_usd / pow(10, 12)\n            else transaction_amount_sent_usd\n        end as transaction_amount_sent_usd\n        ,transaction_date\n    from t1\n),\n\npre_final as (\n    select\n        transaction_id\n        ,min(transaction_amount_sent_usd) as transaction_amount_sent_usd\n        ,transaction_date\n    from t2\n    group by\n        transaction_id\n        ,transaction_date\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_amount_sent_usd\n        ,transaction_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__transaction__transaction_amount_sent_usd"
        },
        "model.my_meltano_project.anchor__wallet": {
            "raw_sql": "with stg_wallet_connected_to_api2 as (\n    select\n        wallet_address as wallet_id\n        ,event_date \n    from \n        {{ref ('stg_wallet_connected_to_api2')}}    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address as wallet_id\n        ,event_date \n    from \n        {{ref ('stg_portfolio_decomposition')}}    --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address as wallet_id\n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\nstg_signed_transaction as (\n    select\n        wallet_address as wallet_id\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\nall as (\n    select * \n    from stg_wallet_connected_to_api2\n    where wallet_id is not null\n        and event_date is not null\n\n    union all\n\n    select * \n    from stg_portfolio_decomposition\n    where wallet_id is not null\n        and event_date is not null\n\n    union all\n\n    select * \n    from stg_address_positions\n    where wallet_id is not null\n        and event_date is not null\n\n    union all\n\n    select * \n    from stg_signed_transaction\n    where wallet_id is not null\n        and event_date is not null\n),\n\npre_final as (\n    select\n        wallet_id\n        ,min(event_date) as wallet_reg_date\n    from \n        all\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_reg_date\n    from \n        pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_wallet_connected_to_api2",
                    "model.my_meltano_project.stg_portfolio_decomposition",
                    "model.my_meltano_project.stg_address_positions",
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "wallet",
                "anchor__wallet"
            ],
            "unique_id": "model.my_meltano_project.anchor__wallet",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/wallet/anchor__wallet.sql",
            "original_file_path": "models/anchor/wallet/anchor__wallet.sql",
            "name": "anchor__wallet",
            "alias": "anchor__wallet",
            "checksum": {
                "name": "sha256",
                "checksum": "3161d06a5064addabe831f7436a0b7bcae720a8e8e014feb6db265e7ede32e10"
            },
            "tags": [],
            "refs": [
                [
                    "stg_wallet_connected_to_api2"
                ],
                [
                    "stg_portfolio_decomposition"
                ],
                [
                    "stg_address_positions"
                ],
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/wallet/anchor__wallet.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.5570211,
            "compiled_sql": "with stg_wallet_connected_to_api2 as (\n    select\n        wallet_address as wallet_id\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_wallet_connected_to_api2    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address as wallet_id\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition    --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address as wallet_id\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\nstg_signed_transaction as (\n    select\n        wallet_address as wallet_id\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        --and event_date = current_date - interval '1' day\n),\n\nall as (\n    select * \n    from stg_wallet_connected_to_api2\n    where wallet_id is not null\n        and event_date is not null\n\n    union all\n\n    select * \n    from stg_portfolio_decomposition\n    where wallet_id is not null\n        and event_date is not null\n\n    union all\n\n    select * \n    from stg_address_positions\n    where wallet_id is not null\n        and event_date is not null\n\n    union all\n\n    select * \n    from stg_signed_transaction\n    where wallet_id is not null\n        and event_date is not null\n),\n\npre_final as (\n    select\n        wallet_id\n        ,min(event_date) as wallet_reg_date\n    from \n        all\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_reg_date\n    from \n        pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.anchor__wallet"
        },
        "model.my_meltano_project.anchor__wallet_provider": {
            "raw_sql": "with stg_wallet_connected_to_api2 as (\n    select\n        lower(wallet_provider) as wallet_provider\n        ,event_date \n    from \n        {{ref ('stg_wallet_connected_to_api2')}}    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_provider != ''\n        and wallet_provider is not null\n        and event_date is not null\n        --and event_date = current_date - interval '1' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        lower(wallet_provider) as wallet_provider\n        ,event_date \n    from \n        {{ref ('stg_portfolio_decomposition')}}    --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_provider != ''\n        and wallet_provider is not null\n        and event_date is not null\n        --and event_date = current_date - interval '1' day\n),\n\nstg_address_positions as (\n    select\n        lower(wallet_provider) as wallet_provider\n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_provider != ''\n        and wallet_provider is not null\n        and event_date is not null\n        --and event_date = current_date - interval '1' day\n),\n\nstg_signed_transaction as (\n    select\n        lower(wallet_provider) as wallet_provider\n        ,event_date \n    from \n        {{ref ('stg_signed_transaction')}}  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and wallet_provider != ''\n        and wallet_provider is not null\n        and event_date is not null\n        --and event_date = current_date - interval '1' day\n),\n\nall as (\n    select * \n    from stg_wallet_connected_to_api2\n\n    union all\n\n    select * \n    from stg_portfolio_decomposition\n\n    union all\n\n    select * \n    from stg_address_positions\n\n    union all\n\n    select * \n    from stg_signed_transaction\n),\n\nt1 as (\n    select\n        case\n            when wallet_provider like '%zerion%' then 'zerion'\n            else wallet_provider\n        end as wallet_provider_id\n        ,event_date\n    from all\n    where 1=1\n        and wallet_provider not in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'readonly', 'viewer_not_added', 'viewernotadded')\n),\n\npre_final as (\n    select\n        wallet_provider_id\n        ,min(event_date) as wallet_provider_min_date\n    from t1\n    group by \n        wallet_provider_id\n),\n\nfinal as (\n    select\n        wallet_provider_id\n        ,wallet_provider_min_date\n    from \n        pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_wallet_connected_to_api2",
                    "model.my_meltano_project.stg_portfolio_decomposition",
                    "model.my_meltano_project.stg_address_positions",
                    "model.my_meltano_project.stg_signed_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "wallet_provider",
                "anchor__wallet_provider"
            ],
            "unique_id": "model.my_meltano_project.anchor__wallet_provider",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/wallet_provider/anchor__wallet_provider.sql",
            "original_file_path": "models/anchor/wallet_provider/anchor__wallet_provider.sql",
            "name": "anchor__wallet_provider",
            "alias": "anchor__wallet_provider",
            "checksum": {
                "name": "sha256",
                "checksum": "d616d4f59077823634adc9e99a4e68e27a1f294a76553e3cf3c535e0856ddaae"
            },
            "tags": [],
            "refs": [
                [
                    "stg_wallet_connected_to_api2"
                ],
                [
                    "stg_portfolio_decomposition"
                ],
                [
                    "stg_address_positions"
                ],
                [
                    "stg_signed_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/wallet_provider/anchor__wallet_provider.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "anchor"
            },
            "created_at": 1663857806.5591674,
            "compiled_sql": "with stg_wallet_connected_to_api2 as (\n    select\n        lower(wallet_provider) as wallet_provider\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_wallet_connected_to_api2    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_provider != ''\n        and wallet_provider is not null\n        and event_date is not null\n        --and event_date = current_date - interval '1' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        lower(wallet_provider) as wallet_provider\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition    --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_provider != ''\n        and wallet_provider is not null\n        and event_date is not null\n        --and event_date = current_date - interval '1' day\n),\n\nstg_address_positions as (\n    select\n        lower(wallet_provider) as wallet_provider\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_provider != ''\n        and wallet_provider is not null\n        and event_date is not null\n        --and event_date = current_date - interval '1' day\n),\n\nstg_signed_transaction as (\n    select\n        lower(wallet_provider) as wallet_provider\n        ,event_date \n    from \n        dev_pdaniil_staging.stg_signed_transaction  --\"bi_staging\".\"stg_signed_transaction\"\n    where 1=1\n        and wallet_provider != ''\n        and wallet_provider is not null\n        and event_date is not null\n        --and event_date = current_date - interval '1' day\n),\n\nall as (\n    select * \n    from stg_wallet_connected_to_api2\n\n    union all\n\n    select * \n    from stg_portfolio_decomposition\n\n    union all\n\n    select * \n    from stg_address_positions\n\n    union all\n\n    select * \n    from stg_signed_transaction\n),\n\nt1 as (\n    select\n        case\n            when wallet_provider like '%zerion%' then 'zerion'\n            else wallet_provider\n        end as wallet_provider_id\n        ,event_date\n    from all\n    where 1=1\n        and wallet_provider not in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'readonly', 'viewer_not_added', 'viewernotadded')\n),\n\npre_final as (\n    select\n        wallet_provider_id\n        ,min(event_date) as wallet_provider_min_date\n    from t1\n    group by \n        wallet_provider_id\n),\n\nfinal as (\n    select\n        wallet_provider_id\n        ,wallet_provider_min_date\n    from \n        pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.anchor__wallet_provider"
        },
        "model.my_meltano_project.anchor__event": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_wallet_connected_to_api2')}}    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_portfolio_decomposition')}}     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        --wallet_address\n        to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        --,event\n        --,timestamp\n        ,event_date\n    from \n        t1\n),\n\nfinal as (\n    select\n        event_id\n        ,event_date\n    from \n        pre_final\n    group by\n        event_id\n        ,event_date\n\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_wallet_connected_to_api2",
                    "model.my_meltano_project.stg_portfolio_decomposition",
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "event",
                "anchor__event"
            ],
            "unique_id": "model.my_meltano_project.anchor__event",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/event/anchor__event.sql",
            "original_file_path": "models/anchor/event/anchor__event.sql",
            "name": "anchor__event",
            "alias": "anchor__event",
            "checksum": {
                "name": "sha256",
                "checksum": "8831ee4f3a2a5ea0ab3fa9cb6063246837b15a52506587fc794ffa63a9a2a802"
            },
            "tags": [],
            "refs": [
                [
                    "stg_wallet_connected_to_api2"
                ],
                [
                    "stg_portfolio_decomposition"
                ],
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/event/anchor__event.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.561749,
            "compiled_sql": "\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_wallet_connected_to_api2    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.anchor__event \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.anchor__event \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.anchor__event \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        --wallet_address\n        to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        --,event\n        --,timestamp\n        ,event_date\n    from \n        t1\n),\n\nfinal as (\n    select\n        event_id\n        ,event_date\n    from \n        pre_final\n    group by\n        event_id\n        ,event_date\n\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.anchor__event"
        },
        "model.my_meltano_project.attr__event__event_api_client_name": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,api_client_name\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_wallet_connected_to_api2')}}    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,api_client_name\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_portfolio_decomposition')}}     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,api_client_name\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,api_client_name\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        --wallet_address\n        to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        ,api_client_name as event_api_client_name\n        --,timestamp\n        ,event_date\n    from \n        t1\n),\n\nfinal as (\n    select\n        event_id\n        ,event_api_client_name\n        ,event_date\n    from \n        pre_final\n    group by\n        event_id\n        ,event_api_client_name\n        ,event_date\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_wallet_connected_to_api2",
                    "model.my_meltano_project.stg_portfolio_decomposition",
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "event",
                "attr__event__event_api_client_name"
            ],
            "unique_id": "model.my_meltano_project.attr__event__event_api_client_name",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/event/attr__event__event_api_client_name.sql",
            "original_file_path": "models/anchor/event/attr__event__event_api_client_name.sql",
            "name": "attr__event__event_api_client_name",
            "alias": "attr__event__event_api_client_name",
            "checksum": {
                "name": "sha256",
                "checksum": "489318e72202aaef128b6c34a94cf6531eea753a9fdb84f203bcb1e629484847"
            },
            "tags": [],
            "refs": [
                [
                    "stg_wallet_connected_to_api2"
                ],
                [
                    "stg_portfolio_decomposition"
                ],
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/event/attr__event__event_api_client_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.5674582,
            "compiled_sql": "\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,api_client_name\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_wallet_connected_to_api2    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.attr__event__event_api_client_name \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,api_client_name\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.attr__event__event_api_client_name \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,api_client_name\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.attr__event__event_api_client_name \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,api_client_name\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        --wallet_address\n        to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        ,api_client_name as event_api_client_name\n        --,timestamp\n        ,event_date\n    from \n        t1\n),\n\nfinal as (\n    select\n        event_id\n        ,event_api_client_name\n        ,event_date\n    from \n        pre_final\n    group by\n        event_id\n        ,event_api_client_name\n        ,event_date\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__event__event_api_client_name"
        },
        "model.my_meltano_project.attr__event__event_origin": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,origin\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_wallet_connected_to_api2')}}    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,origin\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_portfolio_decomposition')}}     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,origin\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,origin\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        --wallet_address\n        to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        ,origin as event_origin\n        --,timestamp\n        ,event_date\n    from \n        t1\n),\n\nfinal as (\n    select\n        event_id\n        ,event_origin\n        ,event_date\n    from \n        pre_final\n    group by\n        event_id\n        ,event_origin\n        ,event_date\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_wallet_connected_to_api2",
                    "model.my_meltano_project.stg_portfolio_decomposition",
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "event",
                "attr__event__event_origin"
            ],
            "unique_id": "model.my_meltano_project.attr__event__event_origin",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/event/attr__event__event_origin.sql",
            "original_file_path": "models/anchor/event/attr__event__event_origin.sql",
            "name": "attr__event__event_origin",
            "alias": "attr__event__event_origin",
            "checksum": {
                "name": "sha256",
                "checksum": "7dc176755046a6eecc001eb3850e007e51ab6d7b44b7429df20bc66d342debaa"
            },
            "tags": [],
            "refs": [
                [
                    "stg_wallet_connected_to_api2"
                ],
                [
                    "stg_portfolio_decomposition"
                ],
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/event/attr__event__event_origin.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.5731797,
            "compiled_sql": "\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,origin\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_wallet_connected_to_api2    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.attr__event__event_origin \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,origin\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.attr__event__event_origin \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,origin\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.attr__event__event_origin \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,origin\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        --wallet_address\n        to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        ,origin as event_origin\n        --,timestamp\n        ,event_date\n    from \n        t1\n),\n\nfinal as (\n    select\n        event_id\n        ,event_origin\n        ,event_date\n    from \n        pre_final\n    group by\n        event_id\n        ,event_origin\n        ,event_date\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__event__event_origin"
        },
        "model.my_meltano_project.attr__event__event_type": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"event_date\"]\n    )\n}}\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_wallet_connected_to_api2')}}    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_portfolio_decomposition')}}     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_address_positions')}}   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n        {% if is_incremental() %} \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        --wallet_address\n        to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        ,event as event_type\n        --,timestamp\n        ,event_date\n    from \n        t1\n),\n\nfinal as (\n    select\n        event_id\n        ,event_type\n        ,event_date\n    from \n        pre_final\n    group by\n        event_id\n        ,event_type\n        ,event_date\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.stg_wallet_connected_to_api2",
                    "model.my_meltano_project.stg_portfolio_decomposition",
                    "model.my_meltano_project.stg_address_positions"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "anchor",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_anchor",
            "fqn": [
                "my_meltano_project",
                "anchor",
                "event",
                "attr__event__event_type"
            ],
            "unique_id": "model.my_meltano_project.attr__event__event_type",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "anchor/event/attr__event__event_type.sql",
            "original_file_path": "models/anchor/event/attr__event__event_type.sql",
            "name": "attr__event__event_type",
            "alias": "attr__event__event_type",
            "checksum": {
                "name": "sha256",
                "checksum": "8af627a2fca8c21d18c623920738ae9b5ff3373306c77d8ee4d3a6b60d433b0b"
            },
            "tags": [],
            "refs": [
                [
                    "stg_wallet_connected_to_api2"
                ],
                [
                    "stg_portfolio_decomposition"
                ],
                [
                    "stg_address_positions"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/anchor/event/attr__event__event_type.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "anchor",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "event_date"
                ]
            },
            "created_at": 1663857806.5789146,
            "compiled_sql": "\n\nwith stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_wallet_connected_to_api2    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.attr__event__event_type \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_portfolio_decomposition as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition     --\"bi_staging\".\"stg_portfolio_decomposition\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.attr__event__event_type \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nstg_address_positions as (\n    select\n        wallet_address\n        ,wallet_provider\n        ,event\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_address_positions   --\"bi_staging\".\"stg_address_positions\"\n    where 1=1\n        and wallet_address is not null\n        and event is not null\n         \n            AND event_date >= ( \n                        select max(event_date) - interval '1' day from dev_pdaniil_anchor.attr__event__event_type \n                        )  \n        \n        --and event_date = current_date - interval '3' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n    union all\n    select * from stg_portfolio_decomposition\n    union all\n    select * from stg_address_positions\n),\n\nt1 as (\n    select\n        wallet_address\n        ,case \n            when wallet_provider in ('watch_address', 'watchAddress', 'watchaddress', 'readOnly', 'viewer_not_added', 'viewernotadded')\n            then 'watchaddress'\n            else event\n        end as event\n        ,timestamp\n        ,event_date \n    from \n        all\n),\n\npre_final as (\n    select\n        --wallet_address\n        to_base64(\n            md5(\n                to_utf8(\n                    concat(wallet_address, event, cast(timestamp as varchar))\n            )\n        )) as event_id\n        ,event as event_type\n        --,timestamp\n        ,event_date\n    from \n        t1\n),\n\nfinal as (\n    select\n        event_id\n        ,event_type\n        ,event_date\n    from \n        pre_final\n    group by\n        event_id\n        ,event_type\n        ,event_date\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_anchor.attr__event__event_type"
        },
        "model.my_meltano_project.calc__wallet__wallet_nft_value": {
            "raw_sql": "with t1 as (\n    select\n        wallet_address\n        ,nft_value\n        ,timestamp \n        ,event_date\n    from {{\u00a0ref('stg_portfolio_decomposition')\u00a0}}    --\"bi_staging\".\"stg_portfolio_decomposition_long\"\n    where 1=1\n        and wallet_address is not null\n        and nft_value is not null\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        wallet_address as wallet_id\n        ,last_value(nft_value) over (partition by wallet_address, event_date\n            order by timestamp\n            rows between unbounded preceding and unbounded following) as wallet_nft_value\n        ,event_date as wallet_nft_value_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_nft_value\n        ,wallet_nft_value_date\n    from pre_final\n    group by\n        wallet_id\n        ,wallet_nft_value\n        ,wallet_nft_value_date\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_portfolio_decomposition"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_nft_value"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_nft_value",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_nft_value.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_nft_value.sql",
            "name": "calc__wallet__wallet_nft_value",
            "alias": "calc__wallet__wallet_nft_value",
            "checksum": {
                "name": "sha256",
                "checksum": "af0bd3dfdf60992d3642922cdea561cdb0a6f2bd014fcd4704c44ba22ecbab6c"
            },
            "tags": [],
            "refs": [
                [
                    "stg_portfolio_decomposition"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_nft_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.5847442,
            "compiled_sql": "with t1 as (\n    select\n        wallet_address\n        ,nft_value\n        ,timestamp \n        ,event_date\n    from dev_pdaniil_staging.stg_portfolio_decomposition    --\"bi_staging\".\"stg_portfolio_decomposition_long\"\n    where 1=1\n        and wallet_address is not null\n        and nft_value is not null\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        wallet_address as wallet_id\n        ,last_value(nft_value) over (partition by wallet_address, event_date\n            order by timestamp\n            rows between unbounded preceding and unbounded following) as wallet_nft_value\n        ,event_date as wallet_nft_value_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_nft_value\n        ,wallet_nft_value_date\n    from pre_final\n    group by\n        wallet_id\n        ,wallet_nft_value\n        ,wallet_nft_value_date\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_nft_value"
        },
        "model.my_meltano_project.calc__wallet__wallet_total_value": {
            "raw_sql": "with stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,total_value\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_wallet_connected_to_api2')}}    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and total_value is not null\n        --and event_date = current_date - interval '1' day\n),\n\nstg_portfolio_decomposition_long as (\n    select\n        wallet_address\n        ,total_value\n        ,timestamp \n        ,event_date \n    from \n        {{ref ('stg_portfolio_decomposition_long')}}    --\"bi_staging\".\"stg_portfolio_decomposition_long\"\n    where 1=1\n        and wallet_address is not null\n        and total_value is not null\n        --and event_date = current_date - interval '1' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n\n    union all\n\n    select * from stg_portfolio_decomposition_long\n),\n\npre_final as (\n    select\n        wallet_address as wallet_id\n        ,last_value(total_value) over (partition by wallet_address, event_date\n            order by timestamp\n            rows between unbounded preceding and unbounded following) as wallet_total_value\n        ,event_date as wallet_total_value_date\n    from all\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_total_value\n        ,wallet_total_value_date\n    from pre_final\n    group by\n        wallet_id\n        ,wallet_total_value\n        ,wallet_total_value_date\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_wallet_connected_to_api2",
                    "model.my_meltano_project.stg_portfolio_decomposition_long"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_total_value"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_total_value",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_total_value.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_total_value.sql",
            "name": "calc__wallet__wallet_total_value",
            "alias": "calc__wallet__wallet_total_value",
            "checksum": {
                "name": "sha256",
                "checksum": "ee0a20554371e28ac9e4be0e5a863c4619caecc19d6c92cc0698ec7b861c47e8"
            },
            "tags": [],
            "refs": [
                [
                    "stg_wallet_connected_to_api2"
                ],
                [
                    "stg_portfolio_decomposition_long"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_total_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.588411,
            "compiled_sql": "with stg_wallet_connected_to_api2 as (\n    select\n        wallet_address\n        ,total_value\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_wallet_connected_to_api2    --\"bi_staging\".\"stg_wallet_connected_to_api2\"\n    where 1=1\n        and wallet_address is not null\n        and total_value is not null\n        --and event_date = current_date - interval '1' day\n),\n\nstg_portfolio_decomposition_long as (\n    select\n        wallet_address\n        ,total_value\n        ,timestamp \n        ,event_date \n    from \n        dev_pdaniil_staging.stg_portfolio_decomposition_long    --\"bi_staging\".\"stg_portfolio_decomposition_long\"\n    where 1=1\n        and wallet_address is not null\n        and total_value is not null\n        --and event_date = current_date - interval '1' day\n),\n\nall as (\n    select * from stg_wallet_connected_to_api2\n\n    union all\n\n    select * from stg_portfolio_decomposition_long\n),\n\npre_final as (\n    select\n        wallet_address as wallet_id\n        ,last_value(total_value) over (partition by wallet_address, event_date\n            order by timestamp\n            rows between unbounded preceding and unbounded following) as wallet_total_value\n        ,event_date as wallet_total_value_date\n    from all\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_total_value\n        ,wallet_total_value_date\n    from pre_final\n    group by\n        wallet_id\n        ,wallet_total_value\n        ,wallet_total_value_date\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_total_value"
        },
        "model.my_meltano_project.calc__wallet__wallet_value": {
            "raw_sql": "with t1 as (\n    select\n        wallet_address\n        ,wallet_value\n        ,timestamp \n        ,event_date\n    from {{\u00a0ref('stg_portfolio_decomposition')\u00a0}}    --\"bi_staging\".\"stg_portfolio_decomposition_long\"\n    where 1=1\n        and wallet_address is not null\n        and wallet_value is not null\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        wallet_address as wallet_id\n        ,last_value(wallet_value) over (partition by wallet_address, event_date\n            order by timestamp\n            rows between unbounded preceding and unbounded following) as wallet_value\n        ,event_date as wallet_value_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_value\n        ,wallet_value_date\n    from pre_final\n    group by\n        wallet_id\n        ,wallet_value\n        ,wallet_value_date\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.stg_portfolio_decomposition"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_value"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_value",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_value.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_value.sql",
            "name": "calc__wallet__wallet_value",
            "alias": "calc__wallet__wallet_value",
            "checksum": {
                "name": "sha256",
                "checksum": "51f21624c771c21ea587eb440cba3755f28fe0855b9414382172d81cb146c613"
            },
            "tags": [],
            "refs": [
                [
                    "stg_portfolio_decomposition"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.590447,
            "compiled_sql": "with t1 as (\n    select\n        wallet_address\n        ,wallet_value\n        ,timestamp \n        ,event_date\n    from dev_pdaniil_staging.stg_portfolio_decomposition    --\"bi_staging\".\"stg_portfolio_decomposition_long\"\n    where 1=1\n        and wallet_address is not null\n        and wallet_value is not null\n        --and event_date = current_date - interval '1' day\n),\n\npre_final as (\n    select\n        wallet_address as wallet_id\n        ,last_value(wallet_value) over (partition by wallet_address, event_date\n            order by timestamp\n            rows between unbounded preceding and unbounded following) as wallet_value\n        ,event_date as wallet_value_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_value\n        ,wallet_value_date\n    from pre_final\n    group by\n        wallet_id\n        ,wallet_value\n        ,wallet_value_date\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_value"
        },
        "model.my_meltano_project.calc__wallet__wallet_last_nft_value": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_nft_value) over (partition by wallet_id \n            order by wallet_nft_value_date \n            rows between unbounded preceding and unbounded following) as wallet_last_nft_value\n    from {{ref ('calc__wallet__wallet_nft_value')}}      --\"bi_calc\".\"calc__wallet__wallet_nft_value\"\n),\n\npre_final as (\n    select\n        wallet_id\n        , wallet_last_nft_value\n    from t1\n    group by\n        wallet_id\n        , wallet_last_nft_value\n),\n\nfinal as (\n    select\n        wallet_id\n        , wallet_last_nft_value\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_nft_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_last_nft_value"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_last_nft_value",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_last_nft_value.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_last_nft_value.sql",
            "name": "calc__wallet__wallet_last_nft_value",
            "alias": "calc__wallet__wallet_last_nft_value",
            "checksum": {
                "name": "sha256",
                "checksum": "75bd9ce274ca22c9538f46e84ed93edba1791738712c936164cbe3782d4392dd"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_nft_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_last_nft_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.5948553,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_nft_value) over (partition by wallet_id \n            order by wallet_nft_value_date \n            rows between unbounded preceding and unbounded following) as wallet_last_nft_value\n    from dev_pdaniil_calc.calc__wallet__wallet_nft_value      --\"bi_calc\".\"calc__wallet__wallet_nft_value\"\n),\n\npre_final as (\n    select\n        wallet_id\n        , wallet_last_nft_value\n    from t1\n    group by\n        wallet_id\n        , wallet_last_nft_value\n),\n\nfinal as (\n    select\n        wallet_id\n        , wallet_last_nft_value\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_last_nft_value"
        },
        "model.my_meltano_project.calc__wallet__wallet_last_protocol_value": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_protocol_value) over (partition by wallet_id \n            order by wallet_protocol_value_date \n            rows between unbounded preceding and unbounded following) as wallet_last_protocol_value\n    from {{ref ('calc__wallet__wallet_protocol_value')}}      --\"bi_calc\".\"calc__wallet__wallet_protocol_value\"\n),\n\npre_final as (\n    select\n        wallet_id\n        , wallet_last_protocol_value\n    from t1\n    group by\n        wallet_id\n        , wallet_last_protocol_value\n),\n\nfinal as (\n    select\n        wallet_id\n        , wallet_last_protocol_value\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_protocol_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_last_protocol_value"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_last_protocol_value",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_last_protocol_value.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_last_protocol_value.sql",
            "name": "calc__wallet__wallet_last_protocol_value",
            "alias": "calc__wallet__wallet_last_protocol_value",
            "checksum": {
                "name": "sha256",
                "checksum": "ada672f3d4799454e147ec5ec8db195ed6d36398abeaa46621fd5f3685020666"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_protocol_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_last_protocol_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.5967798,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_protocol_value) over (partition by wallet_id \n            order by wallet_protocol_value_date \n            rows between unbounded preceding and unbounded following) as wallet_last_protocol_value\n    from dev_pdaniil_calc.calc__wallet__wallet_protocol_value      --\"bi_calc\".\"calc__wallet__wallet_protocol_value\"\n),\n\npre_final as (\n    select\n        wallet_id\n        , wallet_last_protocol_value\n    from t1\n    group by\n        wallet_id\n        , wallet_last_protocol_value\n),\n\nfinal as (\n    select\n        wallet_id\n        , wallet_last_protocol_value\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_last_protocol_value"
        },
        "model.my_meltano_project.calc__wallet__wallet_last_total_value": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_total_value) over (partition by wallet_id \n            order by wallet_total_value_date \n            rows between unbounded preceding and unbounded following) as wallet_last_total_value\n    from {{ref ('calc__wallet__wallet_total_value')}}      --\"bi_calc\".\"calc__wallet__wallet_total_value\"\n),\n\npre_final as (\n    select\n        wallet_id\n        , wallet_last_total_value\n    from t1\n    group by\n        wallet_id\n        , wallet_last_total_value\n),\n\nfinal as (\n    select\n        wallet_id\n        , wallet_last_total_value\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_total_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_last_total_value"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_last_total_value",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_last_total_value.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_last_total_value.sql",
            "name": "calc__wallet__wallet_last_total_value",
            "alias": "calc__wallet__wallet_last_total_value",
            "checksum": {
                "name": "sha256",
                "checksum": "8e3c431981769e761fbf04f7b39f5605f73f2641afae3b8ba43ddbf656053fd0"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_total_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_last_total_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.598652,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_total_value) over (partition by wallet_id \n            order by wallet_total_value_date \n            rows between unbounded preceding and unbounded following) as wallet_last_total_value\n    from dev_pdaniil_calc.calc__wallet__wallet_total_value      --\"bi_calc\".\"calc__wallet__wallet_total_value\"\n),\n\npre_final as (\n    select\n        wallet_id\n        , wallet_last_total_value\n    from t1\n    group by\n        wallet_id\n        , wallet_last_total_value\n),\n\nfinal as (\n    select\n        wallet_id\n        , wallet_last_total_value\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_last_total_value"
        },
        "model.my_meltano_project.calc__wallet__wallet_protocol_value": {
            "raw_sql": "with total_value as (\n    select\n        wallet_id\n        ,wallet_total_value\n        ,wallet_total_value_date\n    from {{ref ('calc__wallet__wallet_total_value')}}   --\"bi_calc\".\"calc__wallet__wallet_total_value\"\n    where 1=1\n        --and wallet_total_value_date =  current_date - interval '10' day \n),\n\nwallet_value as (\n    select\n        wallet_id\n        ,wallet_value\n        ,wallet_value_date\n    from {{ref ('calc__wallet__wallet_value')}}   --\"bi_calc\".\"calc__wallet__wallet_value\"\n    where 1=1\n        --and wallet_value_date =  current_date - interval '10' day\n),\n\npre_final as (\n    select\n        tv.wallet_id as wallet_id\n        ,wallet_total_value - coalesce(wallet_value, 0) as wallet_protocol_value\n        ,wallet_value_date as wallet_protocol_value_date\n    from total_value tv\n    join wallet_value wv on \n        tv.wallet_id = wv.wallet_id \n        and tv.wallet_total_value_date = wv.wallet_value_date\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_protocol_value\n        ,wallet_protocol_value_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_total_value",
                    "model.my_meltano_project.calc__wallet__wallet_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_protocol_value"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_protocol_value",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_protocol_value.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_protocol_value.sql",
            "name": "calc__wallet__wallet_protocol_value",
            "alias": "calc__wallet__wallet_protocol_value",
            "checksum": {
                "name": "sha256",
                "checksum": "c00b7dc81d6ee135aab5b87d482448234e7d5f7718248e13adc1460b821f902c"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_total_value"
                ],
                [
                    "calc__wallet__wallet_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_protocol_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6005137,
            "compiled_sql": "with total_value as (\n    select\n        wallet_id\n        ,wallet_total_value\n        ,wallet_total_value_date\n    from dev_pdaniil_calc.calc__wallet__wallet_total_value   --\"bi_calc\".\"calc__wallet__wallet_total_value\"\n    where 1=1\n        --and wallet_total_value_date =  current_date - interval '10' day \n),\n\nwallet_value as (\n    select\n        wallet_id\n        ,wallet_value\n        ,wallet_value_date\n    from dev_pdaniil_calc.calc__wallet__wallet_value   --\"bi_calc\".\"calc__wallet__wallet_value\"\n    where 1=1\n        --and wallet_value_date =  current_date - interval '10' day\n),\n\npre_final as (\n    select\n        tv.wallet_id as wallet_id\n        ,wallet_total_value - coalesce(wallet_value, 0) as wallet_protocol_value\n        ,wallet_value_date as wallet_protocol_value_date\n    from total_value tv\n    join wallet_value wv on \n        tv.wallet_id = wv.wallet_id \n        and tv.wallet_total_value_date = wv.wallet_value_date\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_protocol_value\n        ,wallet_protocol_value_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_protocol_value"
        },
        "model.my_meltano_project.calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,event_api_client_name\n        ,event_timestamp\n    from {{ref ('link__wallet__made__event')}}  --\"bi_anchor\".\"link__wallet__made__event\" \n    left join {{ref ('attr__event__event_api_client_name')}}    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id)\n),\n\nt2 as (\n    select\n        wallet_id\n        ,first_value(event_api_client_name) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_first_api_client_name\n        ,last_value(event_api_client_name) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_last_api_client_name\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_first_api_client_name\n        ,wallet_last_api_client_name\n    from t2\n    group by\n        wallet_id\n        ,wallet_first_api_client_name\n        ,wallet_last_api_client_name\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.attr__event__event_api_client_name"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name.sql",
            "name": "calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name",
            "alias": "calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name",
            "checksum": {
                "name": "sha256",
                "checksum": "2c9260b8741e68e752576366e8f9133eab8b89fefa2e6ea8a2351ffa903df06d"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "attr__event__event_api_client_name"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6026392,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,event_api_client_name\n        ,event_timestamp\n    from dev_pdaniil_anchor.link__wallet__made__event  --\"bi_anchor\".\"link__wallet__made__event\" \n    left join dev_pdaniil_anchor.attr__event__event_api_client_name    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id)\n),\n\nt2 as (\n    select\n        wallet_id\n        ,first_value(event_api_client_name) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_first_api_client_name\n        ,last_value(event_api_client_name) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_last_api_client_name\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_first_api_client_name\n        ,wallet_last_api_client_name\n    from t2\n    group by\n        wallet_id\n        ,wallet_first_api_client_name\n        ,wallet_last_api_client_name\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name"
        },
        "model.my_meltano_project.calc__wallet__wallet_first_origin__wallet_last_origin": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,event_origin\n        ,event_timestamp\n    from {{ref ('link__wallet__made__event')}}  --\"bi_anchor\".\"link__wallet__made__event\" \n    left join {{ref ('attr__event__event_origin')}}    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id)\n),\n\nt2 as (\n    select\n        wallet_id\n        ,first_value(event_origin) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_first_origin\n        ,last_value(event_origin) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_last_origin\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_first_origin\n        ,wallet_last_origin\n    from t2\n    group by\n        wallet_id\n        ,wallet_first_origin\n        ,wallet_last_origin\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.attr__event__event_origin"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_first_origin__wallet_last_origin"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_first_origin__wallet_last_origin",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_first_origin__wallet_last_origin.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_first_origin__wallet_last_origin.sql",
            "name": "calc__wallet__wallet_first_origin__wallet_last_origin",
            "alias": "calc__wallet__wallet_first_origin__wallet_last_origin",
            "checksum": {
                "name": "sha256",
                "checksum": "0094df0007bc8a927657399354fac2c331a7eafcd1a7cc3ae6a965b37259e4ac"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "attr__event__event_origin"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_first_origin__wallet_last_origin.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6045716,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,event_origin\n        ,event_timestamp\n    from dev_pdaniil_anchor.link__wallet__made__event  --\"bi_anchor\".\"link__wallet__made__event\" \n    left join dev_pdaniil_anchor.attr__event__event_origin    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id)\n),\n\nt2 as (\n    select\n        wallet_id\n        ,first_value(event_origin) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_first_origin\n        ,last_value(event_origin) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_last_origin\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_first_origin\n        ,wallet_last_origin\n    from t2\n    group by\n        wallet_id\n        ,wallet_first_origin\n        ,wallet_last_origin\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_first_origin__wallet_last_origin"
        },
        "model.my_meltano_project.calc__transaction__transaction_value_usd": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith anchor__transaction as (\n    select\n        transaction_id\n        ,transaction_date\n    from {{ref ('anchor__transaction')}}  at  --\"bi_anchor\".\"anchor__transaction\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_amount_received_usd as (\n    select\n        transaction_id\n        ,transaction_amount_received_usd\n    from {{ref ('attr__transaction__transaction_amount_received_usd')}}    --\"bi_anchor\".\"attr__transaction__transaction_amount_received_usd\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_amount_sent_usd as (\n    select\n        transaction_id\n        ,transaction_amount_sent_usd\n    from {{ref ('attr__transaction__transaction_amount_sent_usd')}}    --\"bi_anchor\".\"attr__transaction__transaction_amount_sent_usd\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\nt1 as (\n    select\n        transaction_id\n        ,coalesce(transaction_amount_received_usd, 0) as transaction_amount_received_usd\n        ,coalesce(transaction_amount_sent_usd, 0) as transaction_amount_sent_usd\n        ,anchor__transaction.transaction_date\n    from anchor__transaction anchor__transaction\n    left join transaction_amount_received_usd using (transaction_id)\n    left join transaction_amount_sent_usd using (transaction_id)\n),\n\nt2 as (\n    select\n        transaction_id\n        ,case\n            when transaction_amount_received_usd = 0 then transaction_amount_sent_usd\n            when transaction_amount_sent_usd = 0 then transaction_amount_received_usd\n            when transaction_amount_received_usd > transaction_amount_sent_usd then transaction_amount_sent_usd\n            when transaction_amount_sent_usd > transaction_amount_received_usd then transaction_amount_received_usd\n        end as transaction_value_usd\n        ,transaction_date\n    from t1\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_value_usd\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.anchor__transaction",
                    "model.my_meltano_project.attr__transaction__transaction_amount_received_usd",
                    "model.my_meltano_project.attr__transaction__transaction_amount_sent_usd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__transaction__transaction_value_usd"
            ],
            "unique_id": "model.my_meltano_project.calc__transaction__transaction_value_usd",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__transaction__transaction_value_usd.sql",
            "original_file_path": "models/calc/calc__transaction__transaction_value_usd.sql",
            "name": "calc__transaction__transaction_value_usd",
            "alias": "calc__transaction__transaction_value_usd",
            "checksum": {
                "name": "sha256",
                "checksum": "4c58d52dde8a11bc271fbb2ad47e1aadad9dacf42082b792c53a07c572c0cc8b"
            },
            "tags": [],
            "refs": [
                [
                    "anchor__transaction"
                ],
                [
                    "attr__transaction__transaction_amount_received_usd"
                ],
                [
                    "attr__transaction__transaction_amount_sent_usd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__transaction__transaction_value_usd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "calc",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.606523,
            "compiled_sql": "\n\nwith anchor__transaction as (\n    select\n        transaction_id\n        ,transaction_date\n    from dev_pdaniil_anchor.anchor__transaction  at  --\"bi_anchor\".\"anchor__transaction\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_calc.calc__transaction__transaction_value_usd \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_amount_received_usd as (\n    select\n        transaction_id\n        ,transaction_amount_received_usd\n    from dev_pdaniil_anchor.attr__transaction__transaction_amount_received_usd    --\"bi_anchor\".\"attr__transaction__transaction_amount_received_usd\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_calc.calc__transaction__transaction_value_usd \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\ntransaction_amount_sent_usd as (\n    select\n        transaction_id\n        ,transaction_amount_sent_usd\n    from dev_pdaniil_anchor.attr__transaction__transaction_amount_sent_usd    --\"bi_anchor\".\"attr__transaction__transaction_amount_sent_usd\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_calc.calc__transaction__transaction_value_usd \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\nt1 as (\n    select\n        transaction_id\n        ,coalesce(transaction_amount_received_usd, 0) as transaction_amount_received_usd\n        ,coalesce(transaction_amount_sent_usd, 0) as transaction_amount_sent_usd\n        ,anchor__transaction.transaction_date\n    from anchor__transaction anchor__transaction\n    left join transaction_amount_received_usd using (transaction_id)\n    left join transaction_amount_sent_usd using (transaction_id)\n),\n\nt2 as (\n    select\n        transaction_id\n        ,case\n            when transaction_amount_received_usd = 0 then transaction_amount_sent_usd\n            when transaction_amount_sent_usd = 0 then transaction_amount_received_usd\n            when transaction_amount_received_usd > transaction_amount_sent_usd then transaction_amount_sent_usd\n            when transaction_amount_sent_usd > transaction_amount_received_usd then transaction_amount_received_usd\n        end as transaction_value_usd\n        ,transaction_date\n    from t1\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_value_usd\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__transaction__transaction_value_usd"
        },
        "model.my_meltano_project.calc__wallet__wallet_android": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from {{ref ('link__wallet__made__event')}} lwe  --\"bi_anchor\".\"link__wallet__made__event\" \n    left join {{ref ('attr__event__event_origin')}}    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id)\n    where 1=1\n        and event_origin = 'android://zerion'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_android\n        ,min(event_date) as wallet_min_android_date\n        ,max(event_date) as wallet_max_android_date\n        ,count(distinct event_date) as wallet_days_android\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_android\n        ,wallet_min_android_date\n        ,wallet_max_android_date\n        ,wallet_days_android\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.attr__event__event_origin"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_android"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_android",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_android.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_android.sql",
            "name": "calc__wallet__wallet_android",
            "alias": "calc__wallet__wallet_android",
            "checksum": {
                "name": "sha256",
                "checksum": "ee9177a1d7607d339bf72b6fbae25fe7b4262c78a65950df47708c2918ce2b2e"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "attr__event__event_origin"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_android.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6123898,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from dev_pdaniil_anchor.link__wallet__made__event lwe  --\"bi_anchor\".\"link__wallet__made__event\" \n    left join dev_pdaniil_anchor.attr__event__event_origin    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id)\n    where 1=1\n        and event_origin = 'android://zerion'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_android\n        ,min(event_date) as wallet_min_android_date\n        ,max(event_date) as wallet_max_android_date\n        ,count(distinct event_date) as wallet_days_android\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_android\n        ,wallet_min_android_date\n        ,wallet_max_android_date\n        ,wallet_days_android\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_android"
        },
        "model.my_meltano_project.calc__wallet__wallet_coinburp": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from {{ref ('link__wallet__made__event')}}  lwe     --\"bi_anchor\".\"link__wallet__made__event\" \n    left join {{ref ('attr__event__event_origin')}}    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id)\n    where 1=1\n        and event_origin like '%coinburp%'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_coinburp\n        ,min(event_date) as wallet_min_coinburp_date\n        ,max(event_date) as wallet_max_coinburp_date\n        ,count(distinct event_date) as wallet_days_coinburp\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_coinburp\n        ,wallet_min_coinburp_date\n        ,wallet_max_coinburp_date\n        ,wallet_days_coinburp\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.attr__event__event_origin"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_coinburp"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_coinburp",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_coinburp.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_coinburp.sql",
            "name": "calc__wallet__wallet_coinburp",
            "alias": "calc__wallet__wallet_coinburp",
            "checksum": {
                "name": "sha256",
                "checksum": "814756a5732f3897f4bfff5bb8e5782d7094d8e972fd78a971dd70b3860e711a"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "attr__event__event_origin"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_coinburp.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6143715,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from dev_pdaniil_anchor.link__wallet__made__event  lwe     --\"bi_anchor\".\"link__wallet__made__event\" \n    left join dev_pdaniil_anchor.attr__event__event_origin    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id)\n    where 1=1\n        and event_origin like '%coinburp%'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_coinburp\n        ,min(event_date) as wallet_min_coinburp_date\n        ,max(event_date) as wallet_max_coinburp_date\n        ,count(distinct event_date) as wallet_days_coinburp\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_coinburp\n        ,wallet_min_coinburp_date\n        ,wallet_max_coinburp_date\n        ,wallet_days_coinburp\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_coinburp"
        },
        "model.my_meltano_project.calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_provider_id\n        ,event_timestamp\n    from {{ref ('link__wallet__made__event')}}    --\"bi_anchor\".\"link__wallet__made__event\"\n    join {{ref ('link__wallet_provider__has__event')}} using (event_id)    --\"bi_anchor\".\"link__wallet_provider__has__event\"\n    where 1=1 \n        --and event_date = current_date - interval '3' day\n),\n\nt2 as (\n    select\n        wallet_id\n        ,first_value(wallet_provider_id) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_first_wallet_provider\n        ,last_value(wallet_provider_id) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_last_wallet_provider\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_first_wallet_provider\n        ,wallet_last_wallet_provider\n    from t2\n    group by\n        wallet_id\n        ,wallet_first_wallet_provider\n        ,wallet_last_wallet_provider\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.link__wallet_provider__has__event"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider.sql",
            "name": "calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider",
            "alias": "calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider",
            "checksum": {
                "name": "sha256",
                "checksum": "6fa462e620d5ba3ed85397ac3a47836a9bc4cf7bd1ffbe90daf78a3e6a642261"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "link__wallet_provider__has__event"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6163054,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_provider_id\n        ,event_timestamp\n    from dev_pdaniil_anchor.link__wallet__made__event    --\"bi_anchor\".\"link__wallet__made__event\"\n    join dev_pdaniil_anchor.link__wallet_provider__has__event using (event_id)    --\"bi_anchor\".\"link__wallet_provider__has__event\"\n    where 1=1 \n        --and event_date = current_date - interval '3' day\n),\n\nt2 as (\n    select\n        wallet_id\n        ,first_value(wallet_provider_id) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_first_wallet_provider\n        ,last_value(wallet_provider_id) over (partition by wallet_id \n            order by event_timestamp\n            rows between unbounded preceding and unbounded following) as wallet_last_wallet_provider\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_first_wallet_provider\n        ,wallet_last_wallet_provider\n    from t2\n    group by\n        wallet_id\n        ,wallet_first_wallet_provider\n        ,wallet_last_wallet_provider\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider"
        },
        "model.my_meltano_project.calc__wallet__wallet_ios": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from {{ref ('link__wallet__made__event')}} lwe     --\"bi_anchor\".\"link__wallet__made__event\" \n    left join {{ref ('attr__event__event_origin')}}    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id)\n    where 1=1\n        and event_origin = 'ios://zerion'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_ios\n        ,min(event_date) as wallet_min_ios_date\n        ,max(event_date) as wallet_max_ios_date\n        ,count(distinct event_date) as wallet_days_ios\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_ios\n        ,wallet_min_ios_date\n        ,wallet_max_ios_date\n        ,wallet_days_ios\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.attr__event__event_origin"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_ios"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_ios",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_ios.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_ios.sql",
            "name": "calc__wallet__wallet_ios",
            "alias": "calc__wallet__wallet_ios",
            "checksum": {
                "name": "sha256",
                "checksum": "8b745fec011f57997a9dfca79df411b8ee53a1b914c7d7be30242a7b48ac6234"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "attr__event__event_origin"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_ios.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6184025,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from dev_pdaniil_anchor.link__wallet__made__event lwe     --\"bi_anchor\".\"link__wallet__made__event\" \n    left join dev_pdaniil_anchor.attr__event__event_origin    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id)\n    where 1=1\n        and event_origin = 'ios://zerion'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_ios\n        ,min(event_date) as wallet_min_ios_date\n        ,max(event_date) as wallet_max_ios_date\n        ,count(distinct event_date) as wallet_days_ios\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_ios\n        ,wallet_min_ios_date\n        ,wallet_max_ios_date\n        ,wallet_days_ios\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_ios"
        },
        "model.my_meltano_project.calc__wallet__wallet_stakedao": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from {{ref ('link__wallet__made__event')}} lwe  --\"bi_anchor\".\"link__wallet__made__event\" \n    left join {{ref ('attr__event__event_origin')}}    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id) \n    where 1=1\n        and event_origin like '%stakedao%'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_stakedao\n        ,min(event_date) as wallet_min_stakedao_date\n        ,max(event_date) as wallet_max_stakedao_date\n        ,count(distinct event_date) as wallet_days_stakedao\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_stakedao\n        ,wallet_min_stakedao_date\n        ,wallet_max_stakedao_date\n        ,wallet_days_stakedao\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.attr__event__event_origin"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_stakedao"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_stakedao",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_stakedao.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_stakedao.sql",
            "name": "calc__wallet__wallet_stakedao",
            "alias": "calc__wallet__wallet_stakedao",
            "checksum": {
                "name": "sha256",
                "checksum": "d07c5eea37a34231144075ba6fd19ffee2c17c44b9fe35f8eeee00e3bea804d6"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "attr__event__event_origin"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_stakedao.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6203995,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from dev_pdaniil_anchor.link__wallet__made__event lwe  --\"bi_anchor\".\"link__wallet__made__event\" \n    left join dev_pdaniil_anchor.attr__event__event_origin    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id) \n    where 1=1\n        and event_origin like '%stakedao%'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_stakedao\n        ,min(event_date) as wallet_min_stakedao_date\n        ,max(event_date) as wallet_max_stakedao_date\n        ,count(distinct event_date) as wallet_days_stakedao\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_stakedao\n        ,wallet_min_stakedao_date\n        ,wallet_max_stakedao_date\n        ,wallet_days_stakedao\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_stakedao"
        },
        "model.my_meltano_project.calc__wallet__wallet_tokenary": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from {{ref ('link__wallet__made__event')}} lwe   --\"bi_anchor\".\"link__wallet__made__event\" \n    left join {{ref ('attr__event__event_origin')}}    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id) \n    where 1=1\n        and event_origin like '%tokenary%'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_tokenary\n        ,min(event_date) as wallet_min_tokenary_date\n        ,max(event_date) as wallet_max_tokenary_date\n        ,count(distinct event_date) as wallet_days_tokenary\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_tokenary\n        ,wallet_min_tokenary_date\n        ,wallet_max_tokenary_date\n        ,wallet_days_tokenary\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.attr__event__event_origin"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_tokenary"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_tokenary",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_tokenary.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_tokenary.sql",
            "name": "calc__wallet__wallet_tokenary",
            "alias": "calc__wallet__wallet_tokenary",
            "checksum": {
                "name": "sha256",
                "checksum": "5975260e4d176474cde164f750284c0305e219e8aa2a087f7ab6189efca211ec"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "attr__event__event_origin"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_tokenary.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6223497,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from dev_pdaniil_anchor.link__wallet__made__event lwe   --\"bi_anchor\".\"link__wallet__made__event\" \n    left join dev_pdaniil_anchor.attr__event__event_origin    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id) \n    where 1=1\n        and event_origin like '%tokenary%'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_tokenary\n        ,min(event_date) as wallet_min_tokenary_date\n        ,max(event_date) as wallet_max_tokenary_date\n        ,count(distinct event_date) as wallet_days_tokenary\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_tokenary\n        ,wallet_min_tokenary_date\n        ,wallet_max_tokenary_date\n        ,wallet_days_tokenary\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_tokenary"
        },
        "model.my_meltano_project.calc__wallet__wallet_visifire": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from {{ref ('link__wallet__made__event')}}  lwe     --\"bi_anchor\".\"link__wallet__made__event\" \n    left join {{ref ('attr__event__event_origin')}}    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id) \n    where 1=1\n        and event_origin like '%visifire%'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_visifire\n        ,min(event_date) as wallet_min_visifire_date\n        ,max(event_date) as wallet_max_visifire_date\n        ,count(distinct event_date) as wallet_days_visifire\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_visifire\n        ,wallet_min_visifire_date\n        ,wallet_max_visifire_date\n        ,wallet_days_visifire\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.attr__event__event_origin"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_visifire"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_visifire",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_visifire.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_visifire.sql",
            "name": "calc__wallet__wallet_visifire",
            "alias": "calc__wallet__wallet_visifire",
            "checksum": {
                "name": "sha256",
                "checksum": "9d79fe0938c71c5c531349f4b0cc09147cfe15966c0acbd05c06ceb0198c18c0"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "attr__event__event_origin"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_visifire.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6242876,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from dev_pdaniil_anchor.link__wallet__made__event  lwe     --\"bi_anchor\".\"link__wallet__made__event\" \n    left join dev_pdaniil_anchor.attr__event__event_origin    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id) \n    where 1=1\n        and event_origin like '%visifire%'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_visifire\n        ,min(event_date) as wallet_min_visifire_date\n        ,max(event_date) as wallet_max_visifire_date\n        ,count(distinct event_date) as wallet_days_visifire\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_visifire\n        ,wallet_min_visifire_date\n        ,wallet_max_visifire_date\n        ,wallet_days_visifire\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_visifire"
        },
        "model.my_meltano_project.calc__wallet__wallet_web": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from {{ref ('link__wallet__made__event')}} lwe   --\"bi_anchor\".\"link__wallet__made__event\" \n    left join {{ref ('attr__event__event_origin')}}    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id) \n    where 1=1\n        and event_origin = 'https://app.zerion.io'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_web\n        ,min(event_date) as wallet_min_web_date\n        ,max(event_date) as wallet_max_web_date\n        ,count(distinct event_date) as wallet_days_web\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_web\n        ,wallet_min_web_date\n        ,wallet_max_web_date\n        ,wallet_days_web\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.link__wallet__made__event",
                    "model.my_meltano_project.attr__event__event_origin"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_web"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_web",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_web.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_web.sql",
            "name": "calc__wallet__wallet_web",
            "alias": "calc__wallet__wallet_web",
            "checksum": {
                "name": "sha256",
                "checksum": "565e5e8fea8406b6dfc12f2c8fdff3e5cf941ce79b4221ba7c0b2482186d1290"
            },
            "tags": [],
            "refs": [
                [
                    "link__wallet__made__event"
                ],
                [
                    "attr__event__event_origin"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_web.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6264055,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,lwe.event_date\n    from dev_pdaniil_anchor.link__wallet__made__event lwe   --\"bi_anchor\".\"link__wallet__made__event\" \n    left join dev_pdaniil_anchor.attr__event__event_origin    --\"bi_anchor\".\"attr__event__event_origin\" \n        using (event_id) \n    where 1=1\n        and event_origin = 'https://app.zerion.io'\n        --and event_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,true as wallet_has_web\n        ,min(event_date) as wallet_min_web_date\n        ,max(event_date) as wallet_max_web_date\n        ,count(distinct event_date) as wallet_days_web\n    from t1\n    group by \n        wallet_id\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_has_web\n        ,wallet_min_web_date\n        ,wallet_max_web_date\n        ,wallet_days_web\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_web"
        },
        "model.my_meltano_project.calc__wallet__wallet_last_nft_value_segment": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_nft_value_segment) over (partition by wallet_id \n            order by wallet_nft_value_segment_date \n            rows between unbounded preceding and unbounded following) as wallet_last_nft_value_segment\n    from {{ref ('calc__wallet__wallet_nft_value_segment')}}      --\"bi_calc\".\"calc__wallet__wallet_nft_value_segment\"\n),\n\npre_final as (\n    select\n        wallet_id\n        ,wallet_last_nft_value_segment\n    from t1\n    group by\n        wallet_id\n        ,wallet_last_nft_value_segment\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_last_nft_value_segment\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_nft_value_segment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_last_nft_value_segment"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_last_nft_value_segment",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_last_nft_value_segment.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_last_nft_value_segment.sql",
            "name": "calc__wallet__wallet_last_nft_value_segment",
            "alias": "calc__wallet__wallet_last_nft_value_segment",
            "checksum": {
                "name": "sha256",
                "checksum": "8771b8760390f183a4a1420a51e9f9043761b14a4c315f998276043268d432c5"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_nft_value_segment"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_last_nft_value_segment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6283507,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_nft_value_segment) over (partition by wallet_id \n            order by wallet_nft_value_segment_date \n            rows between unbounded preceding and unbounded following) as wallet_last_nft_value_segment\n    from dev_pdaniil_calc.calc__wallet__wallet_nft_value_segment      --\"bi_calc\".\"calc__wallet__wallet_nft_value_segment\"\n),\n\npre_final as (\n    select\n        wallet_id\n        ,wallet_last_nft_value_segment\n    from t1\n    group by\n        wallet_id\n        ,wallet_last_nft_value_segment\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_last_nft_value_segment\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_last_nft_value_segment"
        },
        "model.my_meltano_project.calc__wallet__wallet_last_protocol_value_segment": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_protocol_value_segment) over (partition by wallet_id \n            order by wallet_protocol_value_segment_date \n            rows between unbounded preceding and unbounded following) as wallet_last_protocol_value_segment\n    from {{ref ('calc__wallet__wallet_protocol_value_segment')}}      --\"bi_calc\".\"calc__wallet__wallet_protocol_value_segment\"\n),\n\npre_final as (\n    select\n        wallet_id\n        ,wallet_last_protocol_value_segment\n    from t1\n    group by\n        wallet_id\n        ,wallet_last_protocol_value_segment\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_last_protocol_value_segment\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_protocol_value_segment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_last_protocol_value_segment"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_last_protocol_value_segment",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_last_protocol_value_segment.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_last_protocol_value_segment.sql",
            "name": "calc__wallet__wallet_last_protocol_value_segment",
            "alias": "calc__wallet__wallet_last_protocol_value_segment",
            "checksum": {
                "name": "sha256",
                "checksum": "94097a778c4fad2d534a460f197759f91b34d9d80d08eccba956ec0935607e22"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_protocol_value_segment"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_last_protocol_value_segment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6302247,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_protocol_value_segment) over (partition by wallet_id \n            order by wallet_protocol_value_segment_date \n            rows between unbounded preceding and unbounded following) as wallet_last_protocol_value_segment\n    from dev_pdaniil_calc.calc__wallet__wallet_protocol_value_segment      --\"bi_calc\".\"calc__wallet__wallet_protocol_value_segment\"\n),\n\npre_final as (\n    select\n        wallet_id\n        ,wallet_last_protocol_value_segment\n    from t1\n    group by\n        wallet_id\n        ,wallet_last_protocol_value_segment\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_last_protocol_value_segment\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_last_protocol_value_segment"
        },
        "model.my_meltano_project.calc__wallet__wallet_last_total_value_segment": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_total_value_segment) over (partition by wallet_id \n            order by wallet_total_value_segment_date \n            rows between unbounded preceding and unbounded following) as wallet_last_total_value_segment\n    from {{ref ('calc__wallet__wallet_total_value_segment')}}      --\"bi_calc\".\"calc__wallet__wallet_total_value_segment\"\n),\n\npre_final as (\n    select\n        wallet_id\n        ,wallet_last_total_value_segment\n    from t1\n    group by\n        wallet_id\n        ,wallet_last_total_value_segment\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_last_total_value_segment\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_total_value_segment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_last_total_value_segment"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_last_total_value_segment",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_last_total_value_segment.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_last_total_value_segment.sql",
            "name": "calc__wallet__wallet_last_total_value_segment",
            "alias": "calc__wallet__wallet_last_total_value_segment",
            "checksum": {
                "name": "sha256",
                "checksum": "3e90d9e8a5df400020aa68fb9c9ec2e1b3bd46514efc83f3136fb718587efc54"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_total_value_segment"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_last_total_value_segment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6322987,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_total_value_segment) over (partition by wallet_id \n            order by wallet_total_value_segment_date \n            rows between unbounded preceding and unbounded following) as wallet_last_total_value_segment\n    from dev_pdaniil_calc.calc__wallet__wallet_total_value_segment      --\"bi_calc\".\"calc__wallet__wallet_total_value_segment\"\n),\n\npre_final as (\n    select\n        wallet_id\n        ,wallet_last_total_value_segment\n    from t1\n    group by\n        wallet_id\n        ,wallet_last_total_value_segment\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_last_total_value_segment\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_last_total_value_segment"
        },
        "model.my_meltano_project.calc__wallet__wallet_last_value": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_value) over (partition by wallet_id \n            order by wallet_value_date \n            rows between unbounded preceding and unbounded following) as wallet_last_value\n    from {{ref ('calc__wallet__wallet_value')}}      --\"bi_calc\".\"calc__wallet__wallet_value\"\n),\n\npre_final as (\n    select\n        wallet_id\n        ,wallet_last_value\n    from t1\n    group by\n        wallet_id\n        ,wallet_last_value\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_last_value\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_last_value"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_last_value",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_last_value.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_last_value.sql",
            "name": "calc__wallet__wallet_last_value",
            "alias": "calc__wallet__wallet_last_value",
            "checksum": {
                "name": "sha256",
                "checksum": "e35081110b130543488b383e23d6cf36ccc903f8dbd5ac5690d2c66a92118737"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_last_value.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.634186,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_value) over (partition by wallet_id \n            order by wallet_value_date \n            rows between unbounded preceding and unbounded following) as wallet_last_value\n    from dev_pdaniil_calc.calc__wallet__wallet_value      --\"bi_calc\".\"calc__wallet__wallet_value\"\n),\n\npre_final as (\n    select\n        wallet_id\n        ,wallet_last_value\n    from t1\n    group by\n        wallet_id\n        ,wallet_last_value\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_last_value\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_last_value"
        },
        "model.my_meltano_project.calc__wallet__wallet_last_value_segment": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_value_segment) over (partition by wallet_id \n            order by wallet_value_segment_date \n            rows between unbounded preceding and unbounded following) as wallet_last_value_segment\n    from {{ref ('calc__wallet__wallet_value_segment')}}      --\"bi_calc\".\"calc__wallet__wallet_value_segment\"\n),\n\npre_final as (\n    select\n        wallet_id\n        ,wallet_last_value_segment\n    from t1\n    group by\n        wallet_id\n        ,wallet_last_value_segment\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_last_value_segment\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_value_segment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_last_value_segment"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_last_value_segment",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_last_value_segment.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_last_value_segment.sql",
            "name": "calc__wallet__wallet_last_value_segment",
            "alias": "calc__wallet__wallet_last_value_segment",
            "checksum": {
                "name": "sha256",
                "checksum": "a04f4cf3169c1a13acb19a74b2c0d8d434a395c05686fc88ca573179335ddbe2"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_value_segment"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_last_value_segment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.636044,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,last_value(wallet_value_segment) over (partition by wallet_id \n            order by wallet_value_segment_date \n            rows between unbounded preceding and unbounded following) as wallet_last_value_segment\n    from dev_pdaniil_calc.calc__wallet__wallet_value_segment      --\"bi_calc\".\"calc__wallet__wallet_value_segment\"\n),\n\npre_final as (\n    select\n        wallet_id\n        ,wallet_last_value_segment\n    from t1\n    group by\n        wallet_id\n        ,wallet_last_value_segment\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_last_value_segment\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_last_value_segment"
        },
        "model.my_meltano_project.calc__wallet__wallet_nft_value_segment": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_nft_value\n        ,wallet_nft_value_date\n    from {{ref ('calc__wallet__wallet_nft_value')}}   --\"bi_calc\".\"calc__wallet__wallet_nft_value\"\n    where 1=1\n        --and wallet_total_value_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,case \n            when wallet_nft_value = 0.00 then '0'\n            when 0.00 < wallet_nft_value and wallet_nft_value <= 100 then '<$100'\n            when 100 < wallet_nft_value and wallet_nft_value <= 1000 then '$100 - $1000'\n            when 1000 < wallet_nft_value and wallet_nft_value <= 10000 then '$1000 - $10 000'\n            when 10000 < wallet_nft_value and wallet_nft_value <= 50000 then '$10 000 - $50 000'\n            when 50000 < wallet_nft_value then '>$50 000'\n            else 'unknown'\n        end as wallet_nft_value_segment\n        ,wallet_nft_value_date as wallet_nft_value_segment_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_nft_value_segment\n        ,wallet_nft_value_segment_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_nft_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_nft_value_segment"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_nft_value_segment",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_nft_value_segment.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_nft_value_segment.sql",
            "name": "calc__wallet__wallet_nft_value_segment",
            "alias": "calc__wallet__wallet_nft_value_segment",
            "checksum": {
                "name": "sha256",
                "checksum": "ef8a79f262116eacd031935f1b643b9d5476b1f9b8e130054569c7e6c38f4b73"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_nft_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_nft_value_segment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6381085,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_nft_value\n        ,wallet_nft_value_date\n    from dev_pdaniil_calc.calc__wallet__wallet_nft_value   --\"bi_calc\".\"calc__wallet__wallet_nft_value\"\n    where 1=1\n        --and wallet_total_value_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,case \n            when wallet_nft_value = 0.00 then '0'\n            when 0.00 < wallet_nft_value and wallet_nft_value <= 100 then '<$100'\n            when 100 < wallet_nft_value and wallet_nft_value <= 1000 then '$100 - $1000'\n            when 1000 < wallet_nft_value and wallet_nft_value <= 10000 then '$1000 - $10 000'\n            when 10000 < wallet_nft_value and wallet_nft_value <= 50000 then '$10 000 - $50 000'\n            when 50000 < wallet_nft_value then '>$50 000'\n            else 'unknown'\n        end as wallet_nft_value_segment\n        ,wallet_nft_value_date as wallet_nft_value_segment_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_nft_value_segment\n        ,wallet_nft_value_segment_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_nft_value_segment"
        },
        "model.my_meltano_project.calc__wallet__wallet_protocol_value_segment": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_protocol_value\n        ,wallet_protocol_value_date\n    from {{ref ('calc__wallet__wallet_protocol_value')}}   --\"bi_calc\".\"calc__wallet__wallet_protocol_value\"\n    where 1=1\n        --and wallet_total_value_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,case \n            when wallet_protocol_value = 0.00 then '0'\n            when 0.00 < wallet_protocol_value and wallet_protocol_value <= 100 then '<$100'\n            when 100 < wallet_protocol_value and wallet_protocol_value <= 1000 then '$100 - $1000'\n            when 1000 < wallet_protocol_value and wallet_protocol_value <= 10000 then '$1000 - $10 000'\n            when 10000 < wallet_protocol_value and wallet_protocol_value <= 50000 then '$10 000 - $50 000'\n            when 50000 < wallet_protocol_value then '>$50 000'\n            else 'unknown'\n        end as wallet_protocol_value_segment\n        ,wallet_protocol_value_date as wallet_protocol_value_segment_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_protocol_value_segment\n        ,wallet_protocol_value_segment_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_protocol_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_protocol_value_segment"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_protocol_value_segment",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_protocol_value_segment.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_protocol_value_segment.sql",
            "name": "calc__wallet__wallet_protocol_value_segment",
            "alias": "calc__wallet__wallet_protocol_value_segment",
            "checksum": {
                "name": "sha256",
                "checksum": "d4557b577ae8963523908b6bbbf8f6123eb040b49bc050379af861fcafe2f64a"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_protocol_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_protocol_value_segment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6399875,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_protocol_value\n        ,wallet_protocol_value_date\n    from dev_pdaniil_calc.calc__wallet__wallet_protocol_value   --\"bi_calc\".\"calc__wallet__wallet_protocol_value\"\n    where 1=1\n        --and wallet_total_value_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,case \n            when wallet_protocol_value = 0.00 then '0'\n            when 0.00 < wallet_protocol_value and wallet_protocol_value <= 100 then '<$100'\n            when 100 < wallet_protocol_value and wallet_protocol_value <= 1000 then '$100 - $1000'\n            when 1000 < wallet_protocol_value and wallet_protocol_value <= 10000 then '$1000 - $10 000'\n            when 10000 < wallet_protocol_value and wallet_protocol_value <= 50000 then '$10 000 - $50 000'\n            when 50000 < wallet_protocol_value then '>$50 000'\n            else 'unknown'\n        end as wallet_protocol_value_segment\n        ,wallet_protocol_value_date as wallet_protocol_value_segment_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_protocol_value_segment\n        ,wallet_protocol_value_segment_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_protocol_value_segment"
        },
        "model.my_meltano_project.calc__wallet__wallet_total_value_segment": {
            "raw_sql": "with total_value as (\n    select\n        wallet_id\n        ,wallet_total_value\n        ,wallet_total_value_date\n    from {{ref ('calc__wallet__wallet_total_value')}}   --\"bi_calc\".\"calc__wallet__wallet_total_value\"\n    where 1=1\n        --and wallet_total_value_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,case \n            when wallet_total_value = 0.00 then '0'\n            when 0.00 < wallet_total_value and wallet_total_value <= 100 then '<$100'\n            when 100 < wallet_total_value and wallet_total_value <= 1000 then '$100 - $1000'\n            when 1000 < wallet_total_value and wallet_total_value <= 10000 then '$1000 - $10 000'\n            when 10000 < wallet_total_value and wallet_total_value <= 50000 then '$10 000 - $50 000'\n            when 50000 < wallet_total_value then '>$50 000'\n            else 'unknown'\n        end as wallet_total_value_segment\n        ,wallet_total_value_date as wallet_total_value_segment_date\n    from total_value\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_total_value_segment\n        ,wallet_total_value_segment_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_total_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_total_value_segment"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_total_value_segment",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_total_value_segment.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_total_value_segment.sql",
            "name": "calc__wallet__wallet_total_value_segment",
            "alias": "calc__wallet__wallet_total_value_segment",
            "checksum": {
                "name": "sha256",
                "checksum": "a462dc97f9e4a3ed77329f6a69044a21097b88fcd70180e902a84f13fbcce998"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_total_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_total_value_segment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.641877,
            "compiled_sql": "with total_value as (\n    select\n        wallet_id\n        ,wallet_total_value\n        ,wallet_total_value_date\n    from dev_pdaniil_calc.calc__wallet__wallet_total_value   --\"bi_calc\".\"calc__wallet__wallet_total_value\"\n    where 1=1\n        --and wallet_total_value_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,case \n            when wallet_total_value = 0.00 then '0'\n            when 0.00 < wallet_total_value and wallet_total_value <= 100 then '<$100'\n            when 100 < wallet_total_value and wallet_total_value <= 1000 then '$100 - $1000'\n            when 1000 < wallet_total_value and wallet_total_value <= 10000 then '$1000 - $10 000'\n            when 10000 < wallet_total_value and wallet_total_value <= 50000 then '$10 000 - $50 000'\n            when 50000 < wallet_total_value then '>$50 000'\n            else 'unknown'\n        end as wallet_total_value_segment\n        ,wallet_total_value_date as wallet_total_value_segment_date\n    from total_value\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_total_value_segment\n        ,wallet_total_value_segment_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_total_value_segment"
        },
        "model.my_meltano_project.calc__wallet__wallet_value_segment": {
            "raw_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_value\n        ,wallet_value_date\n    from {{ref ('calc__wallet__wallet_value')}}   --\"bi_calc\".\"calc__wallet__wallet_value\"\n    where 1=1\n        --and wallet_total_value_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,case \n            when wallet_value = 0.00 then '0'\n            when 0.00 < wallet_value and wallet_value <= 100 then '<$100'\n            when 100 < wallet_value and wallet_value <= 1000 then '$100 - $1000'\n            when 1000 < wallet_value and wallet_value <= 10000 then '$1000 - $10 000'\n            when 10000 < wallet_value and wallet_value <= 50000 then '$10 000 - $50 000'\n            when 50000 < wallet_value then '>$50 000'\n            else 'unknown'\n        end as wallet_value_segment\n        ,wallet_value_date as wallet_value_segment_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_value_segment\n        ,wallet_value_segment_date\n    from pre_final\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.calc__wallet__wallet_value"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__wallet__wallet_value_segment"
            ],
            "unique_id": "model.my_meltano_project.calc__wallet__wallet_value_segment",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__wallet__wallet_value_segment.sql",
            "original_file_path": "models/calc/calc__wallet__wallet_value_segment.sql",
            "name": "calc__wallet__wallet_value_segment",
            "alias": "calc__wallet__wallet_value_segment",
            "checksum": {
                "name": "sha256",
                "checksum": "5d11c4e9f3ad5ef352cc28d4fe185e14eb31a850d32e8d7b6921c2b746552f9f"
            },
            "tags": [],
            "refs": [
                [
                    "calc__wallet__wallet_value"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__wallet__wallet_value_segment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "calc"
            },
            "created_at": 1663857806.6438286,
            "compiled_sql": "with t1 as (\n    select\n        wallet_id\n        ,wallet_value\n        ,wallet_value_date\n    from dev_pdaniil_calc.calc__wallet__wallet_value   --\"bi_calc\".\"calc__wallet__wallet_value\"\n    where 1=1\n        --and wallet_total_value_date =  current_date - interval '10' day \n),\n\npre_final as (\n    select\n        wallet_id\n        ,case \n            when wallet_value = 0.00 then '0'\n            when 0.00 < wallet_value and wallet_value <= 100 then '<$100'\n            when 100 < wallet_value and wallet_value <= 1000 then '$100 - $1000'\n            when 1000 < wallet_value and wallet_value <= 10000 then '$1000 - $10 000'\n            when 10000 < wallet_value and wallet_value <= 50000 then '$10 000 - $50 000'\n            when 50000 < wallet_value then '>$50 000'\n            else 'unknown'\n        end as wallet_value_segment\n        ,wallet_value_date as wallet_value_segment_date\n    from t1\n),\n\nfinal as (\n    select\n        wallet_id\n        ,wallet_value_segment\n        ,wallet_value_segment_date\n    from pre_final\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__wallet__wallet_value_segment"
        },
        "model.my_meltano_project.calc__transaction__transaction_trash": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"transaction_date\"]\n    )\n}}\n\nwith t1 as (\n    select\n        transaction_id\n        ,transaction_value_usd\n        ,transaction_date\n    from {{ref ('calc__transaction__transaction_value_usd')}}    --\"bi_calc\".\"calc__transaction__transaction_value_usd\"\n    where 1=1\n        {% if is_incremental() %} \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from {{ this }} \n                        )  \n        {% endif %}\n        --and transaction_date = current_date - interval '5' day\n),\n\nt2 as (\n    select\n        transaction_id\n        ,case\n            when transaction_value_usd > 1000000000 then true\n            --when transaction_id = '0xbbc2c435cbeb05243eda6695fcf4ec5abb7510fa7339d14b4cd36dbc0a035160' then true\n            else false\n        end as transaction_trash\n        ,transaction_date\n    from t1\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_trash\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.my_meltano_project.calc__transaction__transaction_value_usd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "calc",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil_calc",
            "fqn": [
                "my_meltano_project",
                "calc",
                "calc__transaction__transaction_trash"
            ],
            "unique_id": "model.my_meltano_project.calc__transaction__transaction_trash",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "calc/calc__transaction__transaction_trash.sql",
            "original_file_path": "models/calc/calc__transaction__transaction_trash.sql",
            "name": "calc__transaction__transaction_trash",
            "alias": "calc__transaction__transaction_trash",
            "checksum": {
                "name": "sha256",
                "checksum": "324c36441ddebec3357d160e7e8da25b4012a197adf3ffcca0013a2ed8657598"
            },
            "tags": [],
            "refs": [
                [
                    "calc__transaction__transaction_value_usd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/calc/calc__transaction__transaction_trash.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "calc",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "transaction_date"
                ]
            },
            "created_at": 1663857806.6458664,
            "compiled_sql": "\n\nwith t1 as (\n    select\n        transaction_id\n        ,transaction_value_usd\n        ,transaction_date\n    from dev_pdaniil_calc.calc__transaction__transaction_value_usd    --\"bi_calc\".\"calc__transaction__transaction_value_usd\"\n    where 1=1\n         \n            AND transaction_date >= ( \n                        select max(transaction_date) - interval '1' day from dev_pdaniil_calc.calc__transaction__transaction_trash \n                        )  \n        \n        --and transaction_date = current_date - interval '5' day\n),\n\nt2 as (\n    select\n        transaction_id\n        ,case\n            when transaction_value_usd > 1000000000 then true\n            --when transaction_id = '0xbbc2c435cbeb05243eda6695fcf4ec5abb7510fa7339d14b4cd36dbc0a035160' then true\n            else false\n        end as transaction_trash\n        ,transaction_date\n    from t1\n),\n\nfinal as (\n    select\n        transaction_id\n        ,transaction_trash\n        ,transaction_date\n    from t2\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil_calc.calc__transaction__transaction_trash"
        },
        "model.my_meltano_project.report_top20_protocols": {
            "raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partitioned_by = [\"position_date\"]\n    )\n}}\n\nwith t1 as (\n    select \n        wallet_id\n        ,protocol_id\n        ,position_date\n    from \n        {{ref ('f_position_operations')}} --\"bi\".\"f_position_operations\" \n    where 1=1 \n        and protocol_id is not null\n        and position_value_usd > 0\n        --and position_date >= DATE (now() - INTERVAL '5' DAY) \n    group by\n        wallet_id\n        ,protocol_id\n        ,position_date\n        \n),\n\nt2 as (\n    select \n        wallet_id\n        ,protocol_id\n        ,position_date\n        ,count(wallet_id) over (partition by protocol_id, position_date) as cnt\n    from t1\n),\n\nt3 as (\n    select     \n        wallet_id\n        ,protocol_id\n        ,dense_rank() over (partition by position_date order by cnt desc) as rn\n        ,position_date\nfrom t2\n\n),\n\nfinal as (\n    select \n        wallet_id\n        ,protocol_id\n        ,position_date\n    from t3\n    where rn <= 20\n)\n\nselect * from final",
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.my_meltano_project.f_position_operations"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "position_date"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "awsdatacatalog",
            "schema": "dev_pdaniil",
            "fqn": [
                "my_meltano_project",
                "bi",
                "report_top20_protocols"
            ],
            "unique_id": "model.my_meltano_project.report_top20_protocols",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "bi/report_top20_protocols.sql",
            "original_file_path": "models/bi/report_top20_protocols.sql",
            "name": "report_top20_protocols",
            "alias": "report_top20_protocols",
            "checksum": {
                "name": "sha256",
                "checksum": "7c508e5fef6d5d6c6efef45276b652bae3d0d6865248ebad922d46e10d2cd3c8"
            },
            "tags": [],
            "refs": [
                [
                    "f_position_operations"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "compiled_path": "../.meltano/transformers/dbt/target/compiled/my_meltano_project/models/bi/report_top20_protocols.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "incremental_strategy": "insert_overwrite",
                "partitioned_by": [
                    "position_date"
                ]
            },
            "created_at": 1663933496.238481,
            "compiled_sql": "\n\nwith t1 as (\n    select \n        wallet_id\n        ,protocol_id\n        ,position_date\n    from \n        dev_pdaniil.f_position_operations --\"bi\".\"f_position_operations\" \n    where 1=1 \n        and protocol_id is not null\n        and position_value_usd > 0\n        --and position_date >= DATE (now() - INTERVAL '5' DAY) \n    group by\n        wallet_id\n        ,protocol_id\n        ,position_date\n        \n),\n\nt2 as (\n    select \n        wallet_id\n        ,protocol_id\n        ,position_date\n        ,count(wallet_id) over (partition by protocol_id, position_date) as cnt\n    from t1\n),\n\nt3 as (\n    select     \n        wallet_id\n        ,protocol_id\n        ,dense_rank() over (partition by position_date order by cnt desc) as rn\n        ,position_date\nfrom t2\n\n),\n\nfinal as (\n    select \n        wallet_id\n        ,protocol_id\n        ,position_date\n    from t3\n    where rn <= 20\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "dev_pdaniil.report_top20_protocols"
        }
    },
    "sources": {
        "source.my_meltano_project.raw_events.portfolio_decomposition": {
            "fqn": [
                "my_meltano_project",
                "raw_events",
                "portfolio_decomposition"
            ],
            "database": "raw_events",
            "schema": "raw_events",
            "unique_id": "source.my_meltano_project.raw_events.portfolio_decomposition",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "models/sources_athena.yml",
            "original_file_path": "models/sources_athena.yml",
            "name": "portfolio_decomposition",
            "source_name": "raw_events",
            "source_description": "data in AWS backet",
            "loader": "",
            "identifier": "\"portfolio-decomposition\"",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "raw_events.\"portfolio-decomposition\"",
            "created_at": 1663857806.6756575
        },
        "source.my_meltano_project.raw_events.address_positions": {
            "fqn": [
                "my_meltano_project",
                "raw_events",
                "address_positions"
            ],
            "database": "raw_events",
            "schema": "raw_events",
            "unique_id": "source.my_meltano_project.raw_events.address_positions",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "models/sources_athena.yml",
            "original_file_path": "models/sources_athena.yml",
            "name": "address_positions",
            "source_name": "raw_events",
            "source_description": "data in AWS backet",
            "loader": "",
            "identifier": "address_positions",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "raw_events.address_positions",
            "created_at": 1663857806.675776
        },
        "source.my_meltano_project.raw_events.wallet_connected_to_api2": {
            "fqn": [
                "my_meltano_project",
                "raw_events",
                "wallet_connected_to_api2"
            ],
            "database": "raw_events",
            "schema": "raw_events",
            "unique_id": "source.my_meltano_project.raw_events.wallet_connected_to_api2",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "models/sources_athena.yml",
            "original_file_path": "models/sources_athena.yml",
            "name": "wallet_connected_to_api2",
            "source_name": "raw_events",
            "source_description": "data in AWS backet",
            "loader": "",
            "identifier": "wallet_connected_to_api2",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "raw_events.wallet_connected_to_api2",
            "created_at": 1663857806.675877
        },
        "source.my_meltano_project.raw_events.signed_transaction": {
            "fqn": [
                "my_meltano_project",
                "raw_events",
                "signed_transaction"
            ],
            "database": "raw_events",
            "schema": "raw_events",
            "unique_id": "source.my_meltano_project.raw_events.signed_transaction",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "models/sources_athena.yml",
            "original_file_path": "models/sources_athena.yml",
            "name": "signed_transaction",
            "source_name": "raw_events",
            "source_description": "data in AWS backet",
            "loader": "",
            "identifier": "signed_transaction",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "raw_events.signed_transaction",
            "created_at": 1663857806.6759753
        }
    },
    "macros": {
        "macro.my_meltano_project.repair_portfolio": {
            "unique_id": "macro.my_meltano_project.repair_portfolio",
            "package_name": "my_meltano_project",
            "root_path": "/workspaces/zerion-analytics/elt/transform",
            "path": "macros/repair_portfolio.sql",
            "original_file_path": "macros/repair_portfolio.sql",
            "name": "repair_portfolio",
            "macro_sql": "{% macro repair_portfolio() %}\nMSCK REPAIR TABLE '\"raw_events.portfolio-decomposition\"';\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.8995624
        },
        "macro.dbt_athena.athena__get_columns_in_relation": {
            "unique_id": "macro.dbt_athena.athena__get_columns_in_relation",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "athena__get_columns_in_relation",
            "macro_sql": "{% macro athena__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n\n      select\n          column_name,\n          data_type,\n          null as character_maximum_length,\n          null as numeric_precision,\n          null as numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = LOWER('{{ relation.identifier }}')\n        {% if relation.schema %}\n            and table_schema = LOWER('{{ relation.schema }}')\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n\n  {% set table = load_result('get_columns_in_relation').table %}\n  {% do return(sql_convert_columns_in_relation(table)) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.sql_convert_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.90111
        },
        "macro.dbt_athena.athena__current_timestamp": {
            "unique_id": "macro.dbt_athena.athena__current_timestamp",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "name": "athena__current_timestamp",
            "macro_sql": "{% macro athena__current_timestamp() -%}\n    -- pyathena converts time zoned timestamps to strings so lets avoid them\n    -- now()\n    cast(now() as timestamp)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.901501
        },
        "macro.dbt_athena.athena__get_catalog": {
            "unique_id": "macro.dbt_athena.athena__get_catalog",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "athena__get_catalog",
            "macro_sql": "{% macro athena__get_catalog(information_schema, schemas) -%}\n    {%- set query -%}\n        select * from (\n            (\n                with tables as (\n\n                    select\n                        tables.table_catalog as table_database,\n                        tables.table_schema as table_schema,\n                        tables.table_name as table_name,\n\n                        case\n                            when views.table_name is not null\n                                then 'view'\n                            when table_type = 'BASE TABLE'\n                                then 'table'\n                            else table_type\n                        end as table_type,\n\n                        null as table_owner,\n                        null as table_comment\n\n                    from {{ information_schema }}.tables\n                    left join {{ information_schema }}.views\n                        on tables.table_catalog = views.table_catalog\n                        and tables.table_schema = views.table_schema\n                        and tables.table_name = views.table_name\n\n                ),\n\n                columns as (\n\n                    select\n                        table_catalog as table_database,\n                        table_schema as table_schema,\n                        table_name as table_name,\n                        column_name as column_name,\n                        ordinal_position as column_index,\n                        data_type as column_type,\n                        comment as column_comment\n\n                    from {{ information_schema }}.columns\n\n                ),\n\n                catalog as (\n\n                    select\n                        tables.table_database,\n                        tables.table_schema,\n                        tables.table_name,\n                        tables.table_type,\n                        tables.table_comment,\n                        columns.column_name,\n                        columns.column_index,\n                        columns.column_type,\n                        columns.column_comment,\n                        tables.table_owner\n\n                    from tables\n                    join columns\n                        on tables.\"table_database\" = columns.\"table_database\"\n                        and tables.\"table_schema\" = columns.\"table_schema\"\n                        and tables.\"table_name\" = columns.\"table_name\"\n\n                )\n\n                {%- for schema, relations in schemas.items() -%}\n                  {%- for relation_batch in relations|batch(100) %}\n                    select * from catalog\n                    where \"table_schema\" = lower('{{ schema }}') \n                      and (\n                        {%- for relation in relation_batch -%}\n                          \"table_name\" = lower('{{ relation }}')\n                        {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                      )\n\n                    {%- if not loop.last %} union all {% endif -%}\n                  {%- endfor -%}\n\n                  {%- if not loop.last %} union all {% endif -%}\n                {%- endfor -%}\n            )\n        )\n  {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9057617
        },
        "macro.dbt_athena.athena__list_schemas": {
            "unique_id": "macro.dbt_athena.athena__list_schemas",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "athena__list_schemas",
            "macro_sql": "{% macro athena__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True) %}\n    select\n        distinct schema_name\n\n    from {{ information_schema_name(database) }}.schemata\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9063835
        },
        "macro.dbt_athena.athena__list_relations_without_caching": {
            "unique_id": "macro.dbt_athena.athena__list_relations_without_caching",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "athena__list_relations_without_caching",
            "macro_sql": "{% macro athena__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    WITH views AS (\n      select\n        table_catalog as database,\n        table_name as name,\n        table_schema as schema\n      from {{ schema_relation.information_schema() }}.views\n      where table_schema = LOWER('{{ schema_relation.schema }}')\n    ), tables AS (\n      select\n        table_catalog as database,\n        table_name as name,\n        table_schema as schema\n\n      from {{ schema_relation.information_schema() }}.tables\n      where table_schema = LOWER('{{ schema_relation.schema }}')\n\n      -- Views appear in both `tables` and `views`, so excluding them from tables\n      EXCEPT \n\n      select * from views\n    )\n    select views.*, 'view' AS table_type FROM views\n    UNION ALL\n    select tables.*, 'table' AS table_type FROM tables\n  {% endcall %}\n  {% do return(load_result('list_relations_without_caching').table) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.907289
        },
        "macro.dbt_athena.athena__drop_relation": {
            "unique_id": "macro.dbt_athena.athena__drop_relation",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "athena__drop_relation",
            "macro_sql": "{% macro athena__drop_relation(relation) -%}\n  {% if config.get('incremental_strategy') != 'append' %}\n    {%- do adapter.clean_up_table(relation.schema, relation.table) -%}\n  {% endif %}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9085214
        },
        "macro.dbt_athena.set_table_classification": {
            "unique_id": "macro.dbt_athena.set_table_classification",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/models/helpers.sql",
            "original_file_path": "macros/materializations/models/helpers.sql",
            "name": "set_table_classification",
            "macro_sql": "{% macro set_table_classification(relation, default_value) -%}\n    {%- set format = config.get('format', default=default_value) -%}\n\n    {% call statement('set_table_classification', auto_begin=False) -%}\n        alter table {{ relation }} set tblproperties ('classification' = '{{ format }}')\n    {%- endcall %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9098942
        },
        "macro.dbt_athena.validate_get_incremental_strategy": {
            "unique_id": "macro.dbt_athena.validate_get_incremental_strategy",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/models/incremental/helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/helpers.sql",
            "name": "validate_get_incremental_strategy",
            "macro_sql": "{% macro validate_get_incremental_strategy(raw_strategy) %}\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    Expected one of: 'append', 'insert_overwrite'\n  {%- endset %}\n\n  {% if raw_strategy not in ['append', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(raw_strategy) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9138973
        },
        "macro.dbt_athena.incremental_insert": {
            "unique_id": "macro.dbt_athena.incremental_insert",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/models/incremental/helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/helpers.sql",
            "name": "incremental_insert",
            "macro_sql": "{% macro incremental_insert(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.915041
        },
        "macro.dbt_athena.delete_overlapping_partitions": {
            "unique_id": "macro.dbt_athena.delete_overlapping_partitions",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/models/incremental/helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/helpers.sql",
            "name": "delete_overlapping_partitions",
            "macro_sql": "{% macro delete_overlapping_partitions(target_relation, tmp_relation, partitioned_by) %}\n  {%- set partitioned_keys = partitioned_by | tojson | replace('\\\"', '') | replace('[', '') | replace(']', '') -%}\n  {% call statement('get_partitions', fetch_result=True) %}\n    select distinct {{partitioned_keys}} from {{ tmp_relation }};\n  {% endcall %}\n  {%- set table = load_result('get_partitions').table -%}\n  {%- set rows = table.rows -%}\n  {%- set partitions = [] -%}\n  {%- for row in rows -%}\n    {%- set single_partition = [] -%}\n    {%- for col in row -%}\n      {%- set column_type = adapter.convert_type(table, loop.index0) -%}\n      {%- if column_type == 'integer' -%}\n        {%- set value = col|string -%}\n      {%- elif column_type == 'string' -%}\n        {%- set value = \"'\" + col + \"'\" -%}\n      {%- elif column_type == 'date' -%}\n        {%- set value = \"'\" + col|string + \"'\" -%}\n      {%- else -%}\n        {%- do exceptions.raise_compiler_error('Need to add support for column type ' + column_type) -%}\n      {%- endif -%}\n      {%- do single_partition.append(partitioned_by[loop.index0] + '=' + value) -%}\n    {%- endfor -%}\n    {%- set single_partition_expression = single_partition | join(' and ') -%}\n    {%- do partitions.append('(' + single_partition_expression + ')') -%}\n  {%- endfor -%}\n  {%- for i in range(partitions | length) %}\n    {%- do adapter.clean_up_partitions(target_relation.schema, target_relation.table, partitions[i]) -%}\n  {%- endfor -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.919912
        },
        "macro.dbt_athena.materialization_incremental_athena": {
            "unique_id": "macro.dbt_athena.materialization_incremental_athena",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/models/incremental/incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/incremental.sql",
            "name": "materialization_incremental_athena",
            "macro_sql": "{% materialization incremental, adapter='athena' -%}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set overwrite_msg -%}\n    Athena adapter does not support 'unique_key'\n  {%- endset %}\n  {% if unique_key is not none %}\n    {% do exceptions.raise_compiler_error(overwrite_msg) %}\n  {% endif %}\n\n  {% set raw_strategy = config.get('incremental_strategy', default='insert_overwrite') %}\n  {% set strategy = validate_get_incremental_strategy(raw_strategy) %}\n\n  {% set partitioned_by = config.get('partitioned_by', default=none) %}\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {% do adapter.drop_relation(existing_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif partitioned_by is not none and strategy == 'insert_overwrite' %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% if tmp_relation is not none %}\n          {% do adapter.drop_relation(tmp_relation) %}\n      {% endif %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do delete_overlapping_partitions(target_relation, tmp_relation, partitioned_by) %}\n      {% set build_sql = incremental_insert(tmp_relation, target_relation) %}\n      {% do to_drop.append(tmp_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% if tmp_relation is not none %}\n          {% do adapter.drop_relation(tmp_relation) %}\n      {% endif %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% set build_sql = incremental_insert(tmp_relation, target_relation) %}\n      {% do to_drop.append(tmp_relation) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  -- set table properties\n  {% if not to_drop %}\n    {{ set_table_classification(target_relation, 'parquet') }}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.validate_get_incremental_strategy",
                    "macro.dbt.load_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.create_table_as",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_query",
                    "macro.dbt_athena.delete_overlapping_partitions",
                    "macro.dbt_athena.incremental_insert",
                    "macro.dbt.statement",
                    "macro.dbt_athena.set_table_classification",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.932305
        },
        "macro.dbt_athena.athena__create_table_as": {
            "unique_id": "macro.dbt_athena.athena__create_table_as",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "athena__create_table_as",
            "macro_sql": "{% macro athena__create_table_as(temporary, relation, sql) -%}\n  {%- set external_location = config.get('external_location', default=none) -%}\n  {%- set partitioned_by = config.get('partitioned_by', default=none) -%}\n  {%- set bucketed_by = config.get('bucketed_by', default=none) -%}\n  {%- set bucket_count = config.get('bucket_count', default=none) -%}\n  {%- set field_delimiter = config.get('field_delimiter', default=none) -%}\n  {%- set format = config.get('format', default='parquet') -%}\n  {%- set write_compression = config.get('write_compression', default=none) -%}\n\n  create table\n    {{ relation }}\n\n    with (\n      {%- if external_location is not none and not temporary %}\n        external_location='{{ external_location }}',\n      {%- endif %}\n      {%- if partitioned_by is not none %}\n        partitioned_by=ARRAY{{ partitioned_by | tojson | replace('\\\"', '\\'') }},\n      {%- endif %}\n      {%- if bucketed_by is not none %}\n        bucketed_by=ARRAY{{ bucketed_by | tojson | replace('\\\"', '\\'') }},\n      {%- endif %}\n      {%- if bucket_count is not none %}\n        bucket_count={{ bucket_count }},\n      {%- endif %}\n      {%- if field_delimiter is not none %}\n        field_delimiter='{{ field_delimiter }}',\n      {%- endif %}\n      {%- if write_compression is not none %}\n        write_compression='{{ write_compression }}',\n      {%- endif %}\n        format='{{ format }}'\n    )\n  as\n    {{ sql }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9378228
        },
        "macro.dbt_athena.materialization_table_athena": {
            "unique_id": "macro.dbt_athena.materialization_table_athena",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/models/table/table.sql",
            "original_file_path": "macros/materializations/models/table/table.sql",
            "name": "materialization_table_athena",
            "macro_sql": "{% materialization table, adapter='athena' -%}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {%- if old_relation is not none -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  -- set table properties\n  {{ set_table_classification(target_relation, 'parquet') }}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt_athena.set_table_classification",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.940492
        },
        "macro.dbt_athena.create_or_replace_view": {
            "unique_id": "macro.dbt_athena.create_or_replace_view",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/models/view/create_or_replace_view.sql",
            "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql",
            "name": "create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9438355
        },
        "macro.dbt_athena.athena__create_view_as": {
            "unique_id": "macro.dbt_athena.athena__create_view_as",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "athena__create_view_as",
            "macro_sql": "{% macro athena__create_view_as(relation, sql) -%}\n  create or replace view\n    {{ relation }}\n  as\n    {{ sql }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9444504
        },
        "macro.dbt_athena.materialization_view_athena": {
            "unique_id": "macro.dbt_athena.materialization_view_athena",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/models/view/view.sql",
            "original_file_path": "macros/materializations/models/view/view.sql",
            "name": "materialization_view_athena",
            "macro_sql": "{% materialization view, adapter='athena' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% do return(to_return) %}\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9454467
        },
        "macro.dbt_athena.default__reset_csv_table": {
            "unique_id": "macro.dbt_athena.default__reset_csv_table",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    -- No truncate in Athena so always drop CSV table and recreate\n    {{ adapter.drop_relation(old_relation) }}\n    {% set sql = create_csv_table(model, agate_table) %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.946883
        },
        "macro.dbt_athena.athena__create_csv_table": {
            "unique_id": "macro.dbt_athena.athena__create_csv_table",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "athena__create_csv_table",
            "macro_sql": "{% macro athena__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create external table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {% endif -%}\n        {%- endfor -%}\n    )\n    stored as parquet\n    location '{{ adapter.s3_uuid_table_location() }}'\n    tblproperties ('classification'='parquet')\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9488103
        },
        "macro.dbt_athena.materialization_snapshot_athena": {
            "unique_id": "macro.dbt_athena.materialization_snapshot_athena",
            "package_name": "dbt_athena",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/athena",
            "path": "macros/materializations/snapshots/snapshot.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot.sql",
            "name": "materialization_snapshot_athena",
            "macro_sql": "{% materialization snapshot, adapter='athena' -%}\n  {{ exceptions.raise_not_implemented(\n    'snapshot materialization not implemented for '+adapter.type())\n  }}\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.94938
        },
        "macro.dbt.copy_grants": {
            "unique_id": "macro.dbt.copy_grants",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "copy_grants",
            "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9517891
        },
        "macro.dbt.default__copy_grants": {
            "unique_id": "macro.dbt.default__copy_grants",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__copy_grants",
            "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9520156
        },
        "macro.dbt.support_multiple_grantees_per_dcl_statement": {
            "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "support_multiple_grantees_per_dcl_statement",
            "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.952351
        },
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
            "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__support_multiple_grantees_per_dcl_statement",
            "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9525638
        },
        "macro.dbt.should_revoke": {
            "unique_id": "macro.dbt.should_revoke",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "should_revoke",
            "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9532654
        },
        "macro.dbt.get_show_grant_sql": {
            "unique_id": "macro.dbt.get_show_grant_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_show_grant_sql",
            "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_show_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9536393
        },
        "macro.dbt.default__get_show_grant_sql": {
            "unique_id": "macro.dbt.default__get_show_grant_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_show_grant_sql",
            "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.953837
        },
        "macro.dbt.get_grant_sql": {
            "unique_id": "macro.dbt.get_grant_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_grant_sql",
            "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9542928
        },
        "macro.dbt.default__get_grant_sql": {
            "unique_id": "macro.dbt.default__get_grant_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_grant_sql",
            "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.954661
        },
        "macro.dbt.get_revoke_sql": {
            "unique_id": "macro.dbt.get_revoke_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_revoke_sql",
            "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_revoke_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9551904
        },
        "macro.dbt.default__get_revoke_sql": {
            "unique_id": "macro.dbt.default__get_revoke_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_revoke_sql",
            "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9555614
        },
        "macro.dbt.get_dcl_statement_list": {
            "unique_id": "macro.dbt.get_dcl_statement_list",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_dcl_statement_list",
            "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_dcl_statement_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.956013
        },
        "macro.dbt.default__get_dcl_statement_list": {
            "unique_id": "macro.dbt.default__get_dcl_statement_list",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_dcl_statement_list",
            "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9573476
        },
        "macro.dbt.call_dcl_statements": {
            "unique_id": "macro.dbt.call_dcl_statements",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "call_dcl_statements",
            "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9577086
        },
        "macro.dbt.default__call_dcl_statements": {
            "unique_id": "macro.dbt.default__call_dcl_statements",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__call_dcl_statements",
            "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.958195
        },
        "macro.dbt.apply_grants": {
            "unique_id": "macro.dbt.apply_grants",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "apply_grants",
            "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9586427
        },
        "macro.dbt.default__apply_grants": {
            "unique_id": "macro.dbt.default__apply_grants",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__apply_grants",
            "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_grant_sql",
                    "macro.dbt.get_dcl_statement_list",
                    "macro.dbt.call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.960973
        },
        "macro.dbt.get_columns_in_relation": {
            "unique_id": "macro.dbt.get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.athena__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9631863
        },
        "macro.dbt.default__get_columns_in_relation": {
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9634902
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9640994
        },
        "macro.dbt.get_columns_in_query": {
            "unique_id": "macro.dbt.get_columns_in_query",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9644547
        },
        "macro.dbt.default__get_columns_in_query": {
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9651244
        },
        "macro.dbt.alter_column_type": {
            "unique_id": "macro.dbt.alter_column_type",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.965574
        },
        "macro.dbt.default__alter_column_type": {
            "unique_id": "macro.dbt.default__alter_column_type",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.966804
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "alter_relation_add_remove_columns",
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9673266
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__alter_relation_add_remove_columns",
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.968928
        },
        "macro.dbt.current_timestamp": {
            "unique_id": "macro.dbt.current_timestamp",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "name": "current_timestamp",
            "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.athena__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.969783
        },
        "macro.dbt.default__current_timestamp": {
            "unique_id": "macro.dbt.default__current_timestamp",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9700673
        },
        "macro.dbt.collect_freshness": {
            "unique_id": "macro.dbt.collect_freshness",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "name": "collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9705222
        },
        "macro.dbt.default__collect_freshness": {
            "unique_id": "macro.dbt.default__collect_freshness",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "name": "default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9714587
        },
        "macro.dbt.get_create_index_sql": {
            "unique_id": "macro.dbt.get_create_index_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9723616
        },
        "macro.dbt.default__get_create_index_sql": {
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9726248
        },
        "macro.dbt.create_indexes": {
            "unique_id": "macro.dbt.create_indexes",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9729302
        },
        "macro.dbt.default__create_indexes": {
            "unique_id": "macro.dbt.default__create_indexes",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9737327
        },
        "macro.dbt.get_catalog": {
            "unique_id": "macro.dbt.get_catalog",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.athena__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9756706
        },
        "macro.dbt.default__get_catalog": {
            "unique_id": "macro.dbt.default__get_catalog",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9761817
        },
        "macro.dbt.information_schema_name": {
            "unique_id": "macro.dbt.information_schema_name",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9765403
        },
        "macro.dbt.default__information_schema_name": {
            "unique_id": "macro.dbt.default__information_schema_name",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9768407
        },
        "macro.dbt.list_schemas": {
            "unique_id": "macro.dbt.list_schemas",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.athena__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9772
        },
        "macro.dbt.default__list_schemas": {
            "unique_id": "macro.dbt.default__list_schemas",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9776797
        },
        "macro.dbt.check_schema_exists": {
            "unique_id": "macro.dbt.check_schema_exists",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.978076
        },
        "macro.dbt.default__check_schema_exists": {
            "unique_id": "macro.dbt.default__check_schema_exists",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9786742
        },
        "macro.dbt.list_relations_without_caching": {
            "unique_id": "macro.dbt.list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.athena__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9790316
        },
        "macro.dbt.default__list_relations_without_caching": {
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9793441
        },
        "macro.dbt.alter_column_comment": {
            "unique_id": "macro.dbt.alter_column_comment",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9804556
        },
        "macro.dbt.default__alter_column_comment": {
            "unique_id": "macro.dbt.default__alter_column_comment",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9807749
        },
        "macro.dbt.alter_relation_comment": {
            "unique_id": "macro.dbt.alter_relation_comment",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9811785
        },
        "macro.dbt.default__alter_relation_comment": {
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9815009
        },
        "macro.dbt.persist_docs": {
            "unique_id": "macro.dbt.persist_docs",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9821105
        },
        "macro.dbt.default__persist_docs": {
            "unique_id": "macro.dbt.default__persist_docs",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9830775
        },
        "macro.dbt.make_intermediate_relation": {
            "unique_id": "macro.dbt.make_intermediate_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "make_intermediate_relation",
            "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_intermediate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9868512
        },
        "macro.dbt.default__make_intermediate_relation": {
            "unique_id": "macro.dbt.default__make_intermediate_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__make_intermediate_relation",
            "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9872007
        },
        "macro.dbt.make_temp_relation": {
            "unique_id": "macro.dbt.make_temp_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.987648
        },
        "macro.dbt.default__make_temp_relation": {
            "unique_id": "macro.dbt.default__make_temp_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9882355
        },
        "macro.dbt.make_backup_relation": {
            "unique_id": "macro.dbt.make_backup_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "make_backup_relation",
            "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_backup_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9887378
        },
        "macro.dbt.default__make_backup_relation": {
            "unique_id": "macro.dbt.default__make_backup_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__make_backup_relation",
            "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9893916
        },
        "macro.dbt.drop_relation": {
            "unique_id": "macro.dbt.drop_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.athena__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9897614
        },
        "macro.dbt.default__drop_relation": {
            "unique_id": "macro.dbt.default__drop_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9902048
        },
        "macro.dbt.truncate_relation": {
            "unique_id": "macro.dbt.truncate_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9905698
        },
        "macro.dbt.default__truncate_relation": {
            "unique_id": "macro.dbt.default__truncate_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9908953
        },
        "macro.dbt.rename_relation": {
            "unique_id": "macro.dbt.rename_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9913197
        },
        "macro.dbt.default__rename_relation": {
            "unique_id": "macro.dbt.default__rename_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9918978
        },
        "macro.dbt.get_or_create_relation": {
            "unique_id": "macro.dbt.get_or_create_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9924092
        },
        "macro.dbt.default__get_or_create_relation": {
            "unique_id": "macro.dbt.default__get_or_create_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__get_or_create_relation",
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9935668
        },
        "macro.dbt.load_cached_relation": {
            "unique_id": "macro.dbt.load_cached_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "load_cached_relation",
            "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9940262
        },
        "macro.dbt.load_relation": {
            "unique_id": "macro.dbt.load_relation",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9943194
        },
        "macro.dbt.drop_relation_if_exists": {
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9947104
        },
        "macro.dbt.create_schema": {
            "unique_id": "macro.dbt.create_schema",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9955125
        },
        "macro.dbt.default__create_schema": {
            "unique_id": "macro.dbt.default__create_schema",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9958801
        },
        "macro.dbt.drop_schema": {
            "unique_id": "macro.dbt.drop_schema",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9963005
        },
        "macro.dbt.default__drop_schema": {
            "unique_id": "macro.dbt.default__drop_schema",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.9966664
        },
        "macro.dbt.convert_datetime": {
            "unique_id": "macro.dbt.convert_datetime",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857805.999111
        },
        "macro.dbt.dates_in_range": {
            "unique_id": "macro.dbt.dates_in_range",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0016186
        },
        "macro.dbt.partition_range": {
            "unique_id": "macro.dbt.partition_range",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.003108
        },
        "macro.dbt.py_current_timestring": {
            "unique_id": "macro.dbt.py_current_timestring",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0035512
        },
        "macro.dbt.statement": {
            "unique_id": "macro.dbt.statement",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "name": "statement",
            "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0055873
        },
        "macro.dbt.noop_statement": {
            "unique_id": "macro.dbt.noop_statement",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "name": "noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0067356
        },
        "macro.dbt.run_query": {
            "unique_id": "macro.dbt.run_query",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "name": "run_query",
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0073197
        },
        "macro.dbt.default__test_accepted_values": {
            "unique_id": "macro.dbt.default__test_accepted_values",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/accepted_values.sql",
            "original_file_path": "macros/generic_test_sql/accepted_values.sql",
            "name": "default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0085096
        },
        "macro.dbt.default__test_not_null": {
            "unique_id": "macro.dbt.default__test_not_null",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/not_null.sql",
            "original_file_path": "macros/generic_test_sql/not_null.sql",
            "name": "default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0092347
        },
        "macro.dbt.default__test_relationships": {
            "unique_id": "macro.dbt.default__test_relationships",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/relationships.sql",
            "original_file_path": "macros/generic_test_sql/relationships.sql",
            "name": "default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0099683
        },
        "macro.dbt.default__test_unique": {
            "unique_id": "macro.dbt.default__test_unique",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/unique.sql",
            "original_file_path": "macros/generic_test_sql/unique.sql",
            "name": "default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0105734
        },
        "macro.dbt.generate_alias_name": {
            "unique_id": "macro.dbt.generate_alias_name",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "name": "generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.011369
        },
        "macro.dbt.default__generate_alias_name": {
            "unique_id": "macro.dbt.default__generate_alias_name",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "name": "default__generate_alias_name",
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0118096
        },
        "macro.dbt.generate_database_name": {
            "unique_id": "macro.dbt.generate_database_name",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "name": "generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0126245
        },
        "macro.dbt.default__generate_database_name": {
            "unique_id": "macro.dbt.default__generate_database_name",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "name": "default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0131195
        },
        "macro.dbt.generate_schema_name": {
            "unique_id": "macro.dbt.generate_schema_name",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0141
        },
        "macro.dbt.default__generate_schema_name": {
            "unique_id": "macro.dbt.default__generate_schema_name",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "name": "default__generate_schema_name",
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.014616
        },
        "macro.dbt.generate_schema_name_for_env": {
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "name": "generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0152614
        },
        "macro.dbt.set_sql_header": {
            "unique_id": "macro.dbt.set_sql_header",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "name": "set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0159962
        },
        "macro.dbt.should_full_refresh": {
            "unique_id": "macro.dbt.should_full_refresh",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "name": "should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0165963
        },
        "macro.dbt.should_store_failures": {
            "unique_id": "macro.dbt.should_store_failures",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "name": "should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0171945
        },
        "macro.dbt.run_hooks": {
            "unique_id": "macro.dbt.run_hooks",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0191803
        },
        "macro.dbt.make_hook_config": {
            "unique_id": "macro.dbt.make_hook_config",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0195544
        },
        "macro.dbt.before_begin": {
            "unique_id": "macro.dbt.before_begin",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.01983
        },
        "macro.dbt.in_transaction": {
            "unique_id": "macro.dbt.in_transaction",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0201073
        },
        "macro.dbt.after_commit": {
            "unique_id": "macro.dbt.after_commit",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0203848
        },
        "macro.dbt.get_quoted_csv": {
            "unique_id": "macro.dbt.get_quoted_csv",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0218341
        },
        "macro.dbt.diff_columns": {
            "unique_id": "macro.dbt.diff_columns",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "diff_columns",
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0229323
        },
        "macro.dbt.diff_column_data_types": {
            "unique_id": "macro.dbt.diff_column_data_types",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "diff_column_data_types",
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0241501
        },
        "macro.dbt.materialization_incremental_default": {
            "unique_id": "macro.dbt.materialization_incremental_default",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/incremental.sql",
            "name": "materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.get_delete_insert_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0320446
        },
        "macro.dbt.is_incremental": {
            "unique_id": "macro.dbt.is_incremental",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/is_incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
            "name": "is_incremental",
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0333722
        },
        "macro.dbt.get_merge_sql": {
            "unique_id": "macro.dbt.get_merge_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.038825
        },
        "macro.dbt.default__get_merge_sql": {
            "unique_id": "macro.dbt.default__get_merge_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0418634
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0423324
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0438619
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0443935
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.045661
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "unique_id": "macro.dbt.incremental_validate_on_schema_change",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "incremental_validate_on_schema_change",
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0509415
        },
        "macro.dbt.check_for_schema_changes": {
            "unique_id": "macro.dbt.check_for_schema_changes",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "check_for_schema_changes",
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.053415
        },
        "macro.dbt.sync_column_schemas": {
            "unique_id": "macro.dbt.sync_column_schemas",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "sync_column_schemas",
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0559332
        },
        "macro.dbt.process_schema_changes": {
            "unique_id": "macro.dbt.process_schema_changes",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "process_schema_changes",
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0573916
        },
        "macro.dbt.get_create_table_as_sql": {
            "unique_id": "macro.dbt.get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "get_create_table_as_sql",
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0582693
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "unique_id": "macro.dbt.default__get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "default__get_create_table_as_sql",
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0586274
        },
        "macro.dbt.create_table_as": {
            "unique_id": "macro.dbt.create_table_as",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.athena__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.059027
        },
        "macro.dbt.default__create_table_as": {
            "unique_id": "macro.dbt.default__create_table_as",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0598361
        },
        "macro.dbt.materialization_table_default": {
            "unique_id": "macro.dbt.materialization_table_default",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/table.sql",
            "original_file_path": "macros/materializations/models/table/table.sql",
            "name": "materialization_table_default",
            "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0643816
        },
        "macro.dbt.create_or_replace_view": {
            "unique_id": "macro.dbt.create_or_replace_view",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_or_replace_view.sql",
            "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql",
            "name": "create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0672362
        },
        "macro.dbt.get_create_view_as_sql": {
            "unique_id": "macro.dbt.get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "get_create_view_as_sql",
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.068013
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "unique_id": "macro.dbt.default__get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "default__get_create_view_as_sql",
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0683331
        },
        "macro.dbt.create_view_as": {
            "unique_id": "macro.dbt.create_view_as",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.athena__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0686848
        },
        "macro.dbt.default__create_view_as": {
            "unique_id": "macro.dbt.default__create_view_as",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0692086
        },
        "macro.dbt.handle_existing_table": {
            "unique_id": "macro.dbt.handle_existing_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/helpers.sql",
            "original_file_path": "macros/materializations/models/view/helpers.sql",
            "name": "handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0698824
        },
        "macro.dbt.default__handle_existing_table": {
            "unique_id": "macro.dbt.default__handle_existing_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/helpers.sql",
            "original_file_path": "macros/materializations/models/view/helpers.sql",
            "name": "default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.070328
        },
        "macro.dbt.materialization_view_default": {
            "unique_id": "macro.dbt.materialization_view_default",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/view.sql",
            "original_file_path": "macros/materializations/models/view/view.sql",
            "name": "materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0748346
        },
        "macro.dbt.create_csv_table": {
            "unique_id": "macro.dbt.create_csv_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.athena__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.079968
        },
        "macro.dbt.default__create_csv_table": {
            "unique_id": "macro.dbt.default__create_csv_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0817733
        },
        "macro.dbt.reset_csv_table": {
            "unique_id": "macro.dbt.reset_csv_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_athena.default__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0822346
        },
        "macro.dbt.default__reset_csv_table": {
            "unique_id": "macro.dbt.default__reset_csv_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.083217
        },
        "macro.dbt.get_csv_sql": {
            "unique_id": "macro.dbt.get_csv_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_csv_sql",
            "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_csv_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.083598
        },
        "macro.dbt.default__get_csv_sql": {
            "unique_id": "macro.dbt.default__get_csv_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__get_csv_sql",
            "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0838602
        },
        "macro.dbt.get_binding_char": {
            "unique_id": "macro.dbt.get_binding_char",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_binding_char",
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0841398
        },
        "macro.dbt.default__get_binding_char": {
            "unique_id": "macro.dbt.default__get_binding_char",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__get_binding_char",
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0843744
        },
        "macro.dbt.get_batch_size": {
            "unique_id": "macro.dbt.get_batch_size",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_batch_size",
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_batch_size"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0846925
        },
        "macro.dbt.default__get_batch_size": {
            "unique_id": "macro.dbt.default__get_batch_size",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__get_batch_size",
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0849202
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0859013
        },
        "macro.dbt.load_csv_rows": {
            "unique_id": "macro.dbt.load_csv_rows",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.086273
        },
        "macro.dbt.default__load_csv_rows": {
            "unique_id": "macro.dbt.default__load_csv_rows",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0888708
        },
        "macro.dbt.materialization_seed_default": {
            "unique_id": "macro.dbt.materialization_seed_default",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/seed.sql",
            "original_file_path": "macros/materializations/seeds/seed.sql",
            "name": "materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.get_csv_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0945888
        },
        "macro.dbt.create_columns": {
            "unique_id": "macro.dbt.create_columns",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0987232
        },
        "macro.dbt.default__create_columns": {
            "unique_id": "macro.dbt.default__create_columns",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0992954
        },
        "macro.dbt.post_snapshot": {
            "unique_id": "macro.dbt.post_snapshot",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0996163
        },
        "macro.dbt.default__post_snapshot": {
            "unique_id": "macro.dbt.default__post_snapshot",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.0997844
        },
        "macro.dbt.get_true_sql": {
            "unique_id": "macro.dbt.get_true_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "get_true_sql",
            "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_true_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1000636
        },
        "macro.dbt.default__get_true_sql": {
            "unique_id": "macro.dbt.default__get_true_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__get_true_sql",
            "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1002896
        },
        "macro.dbt.snapshot_staging_table": {
            "unique_id": "macro.dbt.snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.100688
        },
        "macro.dbt.default__snapshot_staging_table": {
            "unique_id": "macro.dbt.default__snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__snapshot_staging_table",
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1024163
        },
        "macro.dbt.build_snapshot_table": {
            "unique_id": "macro.dbt.build_snapshot_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1027803
        },
        "macro.dbt.default__build_snapshot_table": {
            "unique_id": "macro.dbt.default__build_snapshot_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__build_snapshot_table",
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.103298
        },
        "macro.dbt.build_snapshot_staging_table": {
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1041703
        },
        "macro.dbt.materialization_snapshot_default": {
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/snapshot.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot.sql",
            "name": "materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1136086
        },
        "macro.dbt.snapshot_merge_sql": {
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "name": "snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1144583
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "name": "default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1149738
        },
        "macro.dbt.strategy_dispatch": {
            "unique_id": "macro.dbt.strategy_dispatch",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1200325
        },
        "macro.dbt.snapshot_hash_arguments": {
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1203504
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1207821
        },
        "macro.dbt.snapshot_get_time": {
            "unique_id": "macro.dbt.snapshot_get_time",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_get_time",
            "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1210477
        },
        "macro.dbt.default__snapshot_get_time": {
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.121235
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1226563
        },
        "macro.dbt.snapshot_string_as_time": {
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1229653
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1232986
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1260607
        },
        "macro.dbt.snapshot_check_strategy": {
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.get_true_sql",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1287916
        },
        "macro.dbt.get_test_sql": {
            "unique_id": "macro.dbt.get_test_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "name": "get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1297421
        },
        "macro.dbt.default__get_test_sql": {
            "unique_id": "macro.dbt.default__get_test_sql",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "name": "default__get_test_sql",
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1303546
        },
        "macro.dbt.materialization_test_default": {
            "unique_id": "macro.dbt.materialization_test_default",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/test.sql",
            "original_file_path": "macros/materializations/tests/test.sql",
            "name": "materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.134121
        },
        "macro.dbt.get_where_subquery": {
            "unique_id": "macro.dbt.get_where_subquery",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "name": "get_where_subquery",
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.134895
        },
        "macro.dbt.default__get_where_subquery": {
            "unique_id": "macro.dbt.default__get_where_subquery",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "name": "default__get_where_subquery",
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.135651
        },
        "macro.dbt.any_value": {
            "unique_id": "macro.dbt.any_value",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "name": "any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1362753
        },
        "macro.dbt.default__any_value": {
            "unique_id": "macro.dbt.default__any_value",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "name": "default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1364713
        },
        "macro.dbt.bool_or": {
            "unique_id": "macro.dbt.bool_or",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "name": "bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1370783
        },
        "macro.dbt.default__bool_or": {
            "unique_id": "macro.dbt.default__bool_or",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "name": "default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1372807
        },
        "macro.dbt.cast_bool_to_text": {
            "unique_id": "macro.dbt.cast_bool_to_text",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "name": "cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1378934
        },
        "macro.dbt.default__cast_bool_to_text": {
            "unique_id": "macro.dbt.default__cast_bool_to_text",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "name": "default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.138207
        },
        "macro.dbt.concat": {
            "unique_id": "macro.dbt.concat",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "name": "concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.138813
        },
        "macro.dbt.default__concat": {
            "unique_id": "macro.dbt.default__concat",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "name": "default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1390502
        },
        "macro.dbt.type_string": {
            "unique_id": "macro.dbt.type_string",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1404781
        },
        "macro.dbt.default__type_string": {
            "unique_id": "macro.dbt.default__type_string",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1407712
        },
        "macro.dbt.type_timestamp": {
            "unique_id": "macro.dbt.type_timestamp",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.141085
        },
        "macro.dbt.default__type_timestamp": {
            "unique_id": "macro.dbt.default__type_timestamp",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1413817
        },
        "macro.dbt.type_float": {
            "unique_id": "macro.dbt.type_float",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1416893
        },
        "macro.dbt.default__type_float": {
            "unique_id": "macro.dbt.default__type_float",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1420655
        },
        "macro.dbt.type_numeric": {
            "unique_id": "macro.dbt.type_numeric",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1423764
        },
        "macro.dbt.default__type_numeric": {
            "unique_id": "macro.dbt.default__type_numeric",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1427157
        },
        "macro.dbt.type_bigint": {
            "unique_id": "macro.dbt.type_bigint",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1430225
        },
        "macro.dbt.default__type_bigint": {
            "unique_id": "macro.dbt.default__type_bigint",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1433165
        },
        "macro.dbt.type_int": {
            "unique_id": "macro.dbt.type_int",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1436222
        },
        "macro.dbt.default__type_int": {
            "unique_id": "macro.dbt.default__type_int",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_int",
            "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1438987
        },
        "macro.dbt.date_trunc": {
            "unique_id": "macro.dbt.date_trunc",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "name": "date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1445682
        },
        "macro.dbt.default__date_trunc": {
            "unique_id": "macro.dbt.default__date_trunc",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "name": "default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.144821
        },
        "macro.dbt.dateadd": {
            "unique_id": "macro.dbt.dateadd",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "name": "dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1455822
        },
        "macro.dbt.default__dateadd": {
            "unique_id": "macro.dbt.default__dateadd",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "name": "default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1459024
        },
        "macro.dbt.datediff": {
            "unique_id": "macro.dbt.datediff",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "name": "datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1466558
        },
        "macro.dbt.default__datediff": {
            "unique_id": "macro.dbt.default__datediff",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "name": "default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1469789
        },
        "macro.dbt.escape_single_quotes": {
            "unique_id": "macro.dbt.escape_single_quotes",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "name": "escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1476195
        },
        "macro.dbt.default__escape_single_quotes": {
            "unique_id": "macro.dbt.default__escape_single_quotes",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "name": "default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1478834
        },
        "macro.dbt.except": {
            "unique_id": "macro.dbt.except",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "name": "except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1484516
        },
        "macro.dbt.default__except": {
            "unique_id": "macro.dbt.default__except",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "name": "default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1485915
        },
        "macro.dbt.hash": {
            "unique_id": "macro.dbt.hash",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "name": "hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1492147
        },
        "macro.dbt.default__hash": {
            "unique_id": "macro.dbt.default__hash",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "name": "default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1495233
        },
        "macro.dbt.intersect": {
            "unique_id": "macro.dbt.intersect",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "name": "intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1500878
        },
        "macro.dbt.default__intersect": {
            "unique_id": "macro.dbt.default__intersect",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "name": "default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1502337
        },
        "macro.dbt.last_day": {
            "unique_id": "macro.dbt.last_day",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "name": "last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.151048
        },
        "macro.dbt.default_last_day": {
            "unique_id": "macro.dbt.default_last_day",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "name": "default_last_day",
            "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1515653
        },
        "macro.dbt.default__last_day": {
            "unique_id": "macro.dbt.default__last_day",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "name": "default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1518438
        },
        "macro.dbt.length": {
            "unique_id": "macro.dbt.length",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "name": "length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.152458
        },
        "macro.dbt.default__length": {
            "unique_id": "macro.dbt.default__length",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "name": "default__length",
            "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1526573
        },
        "macro.dbt.listagg": {
            "unique_id": "macro.dbt.listagg",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "name": "listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1537724
        },
        "macro.dbt.default__listagg": {
            "unique_id": "macro.dbt.default__listagg",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "name": "default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1545904
        },
        "macro.dbt.string_literal": {
            "unique_id": "macro.dbt.string_literal",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "name": "string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1552048
        },
        "macro.dbt.default__string_literal": {
            "unique_id": "macro.dbt.default__string_literal",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "name": "default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.155402
        },
        "macro.dbt.position": {
            "unique_id": "macro.dbt.position",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "name": "position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1560748
        },
        "macro.dbt.default__position": {
            "unique_id": "macro.dbt.default__position",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "name": "default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1563437
        },
        "macro.dbt.replace": {
            "unique_id": "macro.dbt.replace",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "name": "replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1570807
        },
        "macro.dbt.default__replace": {
            "unique_id": "macro.dbt.default__replace",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "name": "default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1574073
        },
        "macro.dbt.right": {
            "unique_id": "macro.dbt.right",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "name": "right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1580904
        },
        "macro.dbt.default__right": {
            "unique_id": "macro.dbt.default__right",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "name": "default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.158356
        },
        "macro.dbt.safe_cast": {
            "unique_id": "macro.dbt.safe_cast",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "name": "safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1590388
        },
        "macro.dbt.default__safe_cast": {
            "unique_id": "macro.dbt.default__safe_cast",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "name": "default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1593227
        },
        "macro.dbt.split_part": {
            "unique_id": "macro.dbt.split_part",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1602657
        },
        "macro.dbt.default__split_part": {
            "unique_id": "macro.dbt.default__split_part",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1605847
        },
        "macro.dbt._split_part_negative": {
            "unique_id": "macro.dbt._split_part_negative",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "_split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1610355
        },
        "macro.dbt.test_unique": {
            "unique_id": "macro.dbt.test_unique",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1620052
        },
        "macro.dbt.test_not_null": {
            "unique_id": "macro.dbt.test_not_null",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.162539
        },
        "macro.dbt.test_accepted_values": {
            "unique_id": "macro.dbt.test_accepted_values",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1631002
        },
        "macro.dbt.test_relationships": {
            "unique_id": "macro.dbt.test_relationships",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1663857806.1636372
        }
    },
    "docs": {
        "dbt.__overview__": {
            "unique_id": "dbt.__overview__",
            "package_name": "dbt",
            "root_path": "/project/.meltano/transformers/dbt/venv/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "overview.md",
            "original_file_path": "docs/overview.md",
            "name": "__overview__",
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
    },
    "exposures": {},
    "metrics": {},
    "selectors": {},
    "disabled": {},
    "parent_map": {
        "model.my_meltano_project.wallet": [
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "model.my_meltano_project.wallet__has__position": [
            "model.my_meltano_project.link__wallet__has__position"
        ],
        "model.my_meltano_project.d_asset": [
            "model.my_meltano_project.anchor__asset",
            "model.my_meltano_project.anchor__asset",
            "model.my_meltano_project.attr__asset__asset_decimals",
            "model.my_meltano_project.attr__asset__asset_decimals",
            "model.my_meltano_project.attr__asset__asset_name",
            "model.my_meltano_project.attr__asset__asset_name",
            "model.my_meltano_project.attr__asset__asset_symbol",
            "model.my_meltano_project.attr__asset__asset_symbol"
        ],
        "model.my_meltano_project.d_event": [
            "model.my_meltano_project.anchor__event",
            "model.my_meltano_project.attr__event__event_api_client_name",
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.attr__event__event_type"
        ],
        "model.my_meltano_project.d_transaction": [
            "model.my_meltano_project.anchor__transaction",
            "model.my_meltano_project.attr__transaction__transaction_amount_received_usd",
            "model.my_meltano_project.attr__transaction__transaction_amount_sent_usd",
            "model.my_meltano_project.attr__transaction__transaction_api_client_name",
            "model.my_meltano_project.attr__transaction__transaction_context",
            "model.my_meltano_project.attr__transaction__transaction_contract_type",
            "model.my_meltano_project.attr__transaction__transaction_origin",
            "model.my_meltano_project.attr__transaction__transaction_type",
            "model.my_meltano_project.attr__transaction__transaction_zerion_fee_usd",
            "model.my_meltano_project.calc__transaction__transaction_trash",
            "model.my_meltano_project.calc__transaction__transaction_value_usd"
        ],
        "model.my_meltano_project.d_wallet": [
            "model.my_meltano_project.anchor__wallet",
            "model.my_meltano_project.calc__wallet__wallet_android",
            "model.my_meltano_project.calc__wallet__wallet_coinburp",
            "model.my_meltano_project.calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name",
            "model.my_meltano_project.calc__wallet__wallet_first_origin__wallet_last_origin",
            "model.my_meltano_project.calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider",
            "model.my_meltano_project.calc__wallet__wallet_ios",
            "model.my_meltano_project.calc__wallet__wallet_last_nft_value",
            "model.my_meltano_project.calc__wallet__wallet_last_nft_value_segment",
            "model.my_meltano_project.calc__wallet__wallet_last_protocol_value",
            "model.my_meltano_project.calc__wallet__wallet_last_protocol_value_segment",
            "model.my_meltano_project.calc__wallet__wallet_last_total_value",
            "model.my_meltano_project.calc__wallet__wallet_last_total_value_segment",
            "model.my_meltano_project.calc__wallet__wallet_last_value",
            "model.my_meltano_project.calc__wallet__wallet_last_value_segment",
            "model.my_meltano_project.calc__wallet__wallet_stakedao",
            "model.my_meltano_project.calc__wallet__wallet_tokenary",
            "model.my_meltano_project.calc__wallet__wallet_visifire",
            "model.my_meltano_project.calc__wallet__wallet_web"
        ],
        "model.my_meltano_project.f_events": [
            "model.my_meltano_project.attr__event__event_api_client_name",
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.calc__wallet__wallet_nft_value",
            "model.my_meltano_project.calc__wallet__wallet_nft_value_segment",
            "model.my_meltano_project.calc__wallet__wallet_protocol_value",
            "model.my_meltano_project.calc__wallet__wallet_protocol_value_segment",
            "model.my_meltano_project.calc__wallet__wallet_total_value",
            "model.my_meltano_project.calc__wallet__wallet_total_value_segment",
            "model.my_meltano_project.calc__wallet__wallet_value",
            "model.my_meltano_project.calc__wallet__wallet_value_segment",
            "model.my_meltano_project.link__wallet__made__event",
            "model.my_meltano_project.link__wallet_provider__has__event"
        ],
        "model.my_meltano_project.f_position_operations": [
            "model.my_meltano_project.link__position__has__asset",
            "model.my_meltano_project.link__position__has__blockchain",
            "model.my_meltano_project.link__position__has__protocol",
            "model.my_meltano_project.wallet__has__position"
        ],
        "model.my_meltano_project.f_transactions": [
            "model.my_meltano_project.link__transaction__has__asset",
            "model.my_meltano_project.link__transaction__has__blockchain",
            "model.my_meltano_project.link__wallet__made__transaction",
            "model.my_meltano_project.link__wallet_provider__has__transaction"
        ],
        "model.my_meltano_project.report_daily_retantion_rate_past30days": [
            "model.my_meltano_project.anchor__wallet",
            "model.my_meltano_project.calc__wallet__wallet_first_origin__wallet_last_origin",
            "model.my_meltano_project.calc__wallet__wallet_last_total_value",
            "model.my_meltano_project.link__wallet__made__event"
        ],
        "model.my_meltano_project.f_decomposition_operation": [
            "model.my_meltano_project.link__wallet__has__blockchain"
        ],
        "model.my_meltano_project.a_blabla": [],
        "model.my_meltano_project.stg_portfolio_decomposition": [
            "source.my_meltano_project.raw_events.portfolio_decomposition",
            "source.my_meltano_project.raw_events.portfolio_decomposition"
        ],
        "model.my_meltano_project.stg_wallet_connected_to_api2": [
            "source.my_meltano_project.raw_events.wallet_connected_to_api2",
            "source.my_meltano_project.raw_events.wallet_connected_to_api2"
        ],
        "model.my_meltano_project.stg_address_positions": [
            "source.my_meltano_project.raw_events.address_positions",
            "source.my_meltano_project.raw_events.address_positions"
        ],
        "model.my_meltano_project.stg_portfolio_decomposition_long": [
            "source.my_meltano_project.raw_events.portfolio_decomposition"
        ],
        "model.my_meltano_project.stg_signed_transaction": [
            "source.my_meltano_project.raw_events.signed_transaction",
            "source.my_meltano_project.raw_events.signed_transaction"
        ],
        "model.my_meltano_project.link__position__has__asset": [
            "model.my_meltano_project.stg_address_positions"
        ],
        "model.my_meltano_project.link__position__has__blockchain": [
            "model.my_meltano_project.stg_address_positions"
        ],
        "model.my_meltano_project.link__position__has__protocol": [
            "model.my_meltano_project.stg_address_positions"
        ],
        "model.my_meltano_project.link__wallet__has__position": [
            "model.my_meltano_project.stg_address_positions"
        ],
        "model.my_meltano_project.link__transaction__has__asset": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.link__transaction__has__blockchain": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.link__wallet__made__transaction": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.link__wallet__made__event": [
            "model.my_meltano_project.stg_address_positions",
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "model.my_meltano_project.link__wallet_provider__has__event": [
            "model.my_meltano_project.stg_address_positions",
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "model.my_meltano_project.link__wallet_provider__has__transaction": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.link__wallet__has__blockchain": [
            "model.my_meltano_project.stg_portfolio_decomposition_long"
        ],
        "model.my_meltano_project.anchor__asset": [
            "model.my_meltano_project.stg_address_positions"
        ],
        "model.my_meltano_project.attr__asset__asset_decimals": [
            "model.my_meltano_project.stg_address_positions"
        ],
        "model.my_meltano_project.attr__asset__asset_name": [
            "model.my_meltano_project.stg_address_positions"
        ],
        "model.my_meltano_project.attr__asset__asset_symbol": [
            "model.my_meltano_project.stg_address_positions"
        ],
        "model.my_meltano_project.anchor__blockchain": [
            "model.my_meltano_project.stg_portfolio_decomposition_long"
        ],
        "model.my_meltano_project.anchor__position": [
            "model.my_meltano_project.stg_address_positions"
        ],
        "model.my_meltano_project.anchor__protocol": [
            "model.my_meltano_project.stg_address_positions"
        ],
        "model.my_meltano_project.anchor__transaction": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_api_client_name": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_context": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_contract_type": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_origin": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_type": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_zerion_fee_usd": [
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_amount_received_usd": [
            "model.my_meltano_project.link__transaction__has__asset",
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_amount_sent_usd": [
            "model.my_meltano_project.link__transaction__has__asset",
            "model.my_meltano_project.stg_signed_transaction"
        ],
        "model.my_meltano_project.anchor__wallet": [
            "model.my_meltano_project.stg_address_positions",
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_signed_transaction",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "model.my_meltano_project.anchor__wallet_provider": [
            "model.my_meltano_project.stg_address_positions",
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_signed_transaction",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "model.my_meltano_project.anchor__event": [
            "model.my_meltano_project.stg_address_positions",
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "model.my_meltano_project.attr__event__event_api_client_name": [
            "model.my_meltano_project.stg_address_positions",
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "model.my_meltano_project.attr__event__event_origin": [
            "model.my_meltano_project.stg_address_positions",
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "model.my_meltano_project.attr__event__event_type": [
            "model.my_meltano_project.stg_address_positions",
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "model.my_meltano_project.calc__wallet__wallet_nft_value": [
            "model.my_meltano_project.stg_portfolio_decomposition"
        ],
        "model.my_meltano_project.calc__wallet__wallet_total_value": [
            "model.my_meltano_project.stg_portfolio_decomposition_long",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "model.my_meltano_project.calc__wallet__wallet_value": [
            "model.my_meltano_project.stg_portfolio_decomposition"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_nft_value": [
            "model.my_meltano_project.calc__wallet__wallet_nft_value"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_protocol_value": [
            "model.my_meltano_project.calc__wallet__wallet_protocol_value"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_total_value": [
            "model.my_meltano_project.calc__wallet__wallet_total_value"
        ],
        "model.my_meltano_project.calc__wallet__wallet_protocol_value": [
            "model.my_meltano_project.calc__wallet__wallet_total_value",
            "model.my_meltano_project.calc__wallet__wallet_value"
        ],
        "model.my_meltano_project.calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name": [
            "model.my_meltano_project.attr__event__event_api_client_name",
            "model.my_meltano_project.link__wallet__made__event"
        ],
        "model.my_meltano_project.calc__wallet__wallet_first_origin__wallet_last_origin": [
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.link__wallet__made__event"
        ],
        "model.my_meltano_project.calc__transaction__transaction_value_usd": [
            "model.my_meltano_project.anchor__transaction",
            "model.my_meltano_project.attr__transaction__transaction_amount_received_usd",
            "model.my_meltano_project.attr__transaction__transaction_amount_sent_usd"
        ],
        "model.my_meltano_project.calc__wallet__wallet_android": [
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.link__wallet__made__event"
        ],
        "model.my_meltano_project.calc__wallet__wallet_coinburp": [
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.link__wallet__made__event"
        ],
        "model.my_meltano_project.calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider": [
            "model.my_meltano_project.link__wallet__made__event",
            "model.my_meltano_project.link__wallet_provider__has__event"
        ],
        "model.my_meltano_project.calc__wallet__wallet_ios": [
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.link__wallet__made__event"
        ],
        "model.my_meltano_project.calc__wallet__wallet_stakedao": [
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.link__wallet__made__event"
        ],
        "model.my_meltano_project.calc__wallet__wallet_tokenary": [
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.link__wallet__made__event"
        ],
        "model.my_meltano_project.calc__wallet__wallet_visifire": [
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.link__wallet__made__event"
        ],
        "model.my_meltano_project.calc__wallet__wallet_web": [
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.link__wallet__made__event"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_nft_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_nft_value_segment"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_protocol_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_protocol_value_segment"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_total_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_total_value_segment"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_value": [
            "model.my_meltano_project.calc__wallet__wallet_value"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_value_segment"
        ],
        "model.my_meltano_project.calc__wallet__wallet_nft_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_nft_value"
        ],
        "model.my_meltano_project.calc__wallet__wallet_protocol_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_protocol_value"
        ],
        "model.my_meltano_project.calc__wallet__wallet_total_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_total_value"
        ],
        "model.my_meltano_project.calc__wallet__wallet_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_value"
        ],
        "model.my_meltano_project.calc__transaction__transaction_trash": [
            "model.my_meltano_project.calc__transaction__transaction_value_usd"
        ],
        "model.my_meltano_project.report_top20_protocols": [
            "model.my_meltano_project.f_position_operations"
        ],
        "source.my_meltano_project.raw_events.portfolio_decomposition": [],
        "source.my_meltano_project.raw_events.address_positions": [],
        "source.my_meltano_project.raw_events.wallet_connected_to_api2": [],
        "source.my_meltano_project.raw_events.signed_transaction": []
    },
    "child_map": {
        "model.my_meltano_project.wallet": [],
        "model.my_meltano_project.wallet__has__position": [
            "model.my_meltano_project.f_position_operations"
        ],
        "model.my_meltano_project.d_asset": [],
        "model.my_meltano_project.d_event": [],
        "model.my_meltano_project.d_transaction": [],
        "model.my_meltano_project.d_wallet": [],
        "model.my_meltano_project.f_events": [],
        "model.my_meltano_project.f_position_operations": [
            "model.my_meltano_project.report_top20_protocols"
        ],
        "model.my_meltano_project.f_transactions": [],
        "model.my_meltano_project.report_daily_retantion_rate_past30days": [],
        "model.my_meltano_project.f_decomposition_operation": [],
        "model.my_meltano_project.a_blabla": [],
        "model.my_meltano_project.stg_portfolio_decomposition": [
            "model.my_meltano_project.anchor__event",
            "model.my_meltano_project.anchor__wallet",
            "model.my_meltano_project.anchor__wallet_provider",
            "model.my_meltano_project.attr__event__event_api_client_name",
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.attr__event__event_type",
            "model.my_meltano_project.calc__wallet__wallet_nft_value",
            "model.my_meltano_project.calc__wallet__wallet_value",
            "model.my_meltano_project.link__wallet__made__event",
            "model.my_meltano_project.link__wallet_provider__has__event",
            "model.my_meltano_project.wallet"
        ],
        "model.my_meltano_project.stg_wallet_connected_to_api2": [
            "model.my_meltano_project.anchor__event",
            "model.my_meltano_project.anchor__wallet",
            "model.my_meltano_project.anchor__wallet_provider",
            "model.my_meltano_project.attr__event__event_api_client_name",
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.attr__event__event_type",
            "model.my_meltano_project.calc__wallet__wallet_total_value",
            "model.my_meltano_project.link__wallet__made__event",
            "model.my_meltano_project.link__wallet_provider__has__event",
            "model.my_meltano_project.wallet"
        ],
        "model.my_meltano_project.stg_address_positions": [
            "model.my_meltano_project.anchor__asset",
            "model.my_meltano_project.anchor__event",
            "model.my_meltano_project.anchor__position",
            "model.my_meltano_project.anchor__protocol",
            "model.my_meltano_project.anchor__wallet",
            "model.my_meltano_project.anchor__wallet_provider",
            "model.my_meltano_project.attr__asset__asset_decimals",
            "model.my_meltano_project.attr__asset__asset_name",
            "model.my_meltano_project.attr__asset__asset_symbol",
            "model.my_meltano_project.attr__event__event_api_client_name",
            "model.my_meltano_project.attr__event__event_origin",
            "model.my_meltano_project.attr__event__event_type",
            "model.my_meltano_project.link__position__has__asset",
            "model.my_meltano_project.link__position__has__blockchain",
            "model.my_meltano_project.link__position__has__protocol",
            "model.my_meltano_project.link__wallet__has__position",
            "model.my_meltano_project.link__wallet__made__event",
            "model.my_meltano_project.link__wallet_provider__has__event"
        ],
        "model.my_meltano_project.stg_portfolio_decomposition_long": [
            "model.my_meltano_project.anchor__blockchain",
            "model.my_meltano_project.calc__wallet__wallet_total_value",
            "model.my_meltano_project.link__wallet__has__blockchain"
        ],
        "model.my_meltano_project.stg_signed_transaction": [
            "model.my_meltano_project.anchor__transaction",
            "model.my_meltano_project.anchor__wallet",
            "model.my_meltano_project.anchor__wallet_provider",
            "model.my_meltano_project.attr__transaction__transaction_amount_received_usd",
            "model.my_meltano_project.attr__transaction__transaction_amount_sent_usd",
            "model.my_meltano_project.attr__transaction__transaction_api_client_name",
            "model.my_meltano_project.attr__transaction__transaction_context",
            "model.my_meltano_project.attr__transaction__transaction_contract_type",
            "model.my_meltano_project.attr__transaction__transaction_origin",
            "model.my_meltano_project.attr__transaction__transaction_type",
            "model.my_meltano_project.attr__transaction__transaction_zerion_fee_usd",
            "model.my_meltano_project.link__transaction__has__asset",
            "model.my_meltano_project.link__transaction__has__blockchain",
            "model.my_meltano_project.link__wallet__made__transaction",
            "model.my_meltano_project.link__wallet_provider__has__transaction"
        ],
        "model.my_meltano_project.link__position__has__asset": [
            "model.my_meltano_project.f_position_operations"
        ],
        "model.my_meltano_project.link__position__has__blockchain": [
            "model.my_meltano_project.f_position_operations"
        ],
        "model.my_meltano_project.link__position__has__protocol": [
            "model.my_meltano_project.f_position_operations"
        ],
        "model.my_meltano_project.link__wallet__has__position": [
            "model.my_meltano_project.wallet__has__position"
        ],
        "model.my_meltano_project.link__transaction__has__asset": [
            "model.my_meltano_project.attr__transaction__transaction_amount_received_usd",
            "model.my_meltano_project.attr__transaction__transaction_amount_sent_usd",
            "model.my_meltano_project.f_transactions"
        ],
        "model.my_meltano_project.link__transaction__has__blockchain": [
            "model.my_meltano_project.f_transactions"
        ],
        "model.my_meltano_project.link__wallet__made__transaction": [
            "model.my_meltano_project.f_transactions"
        ],
        "model.my_meltano_project.link__wallet__made__event": [
            "model.my_meltano_project.calc__wallet__wallet_android",
            "model.my_meltano_project.calc__wallet__wallet_coinburp",
            "model.my_meltano_project.calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name",
            "model.my_meltano_project.calc__wallet__wallet_first_origin__wallet_last_origin",
            "model.my_meltano_project.calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider",
            "model.my_meltano_project.calc__wallet__wallet_ios",
            "model.my_meltano_project.calc__wallet__wallet_stakedao",
            "model.my_meltano_project.calc__wallet__wallet_tokenary",
            "model.my_meltano_project.calc__wallet__wallet_visifire",
            "model.my_meltano_project.calc__wallet__wallet_web",
            "model.my_meltano_project.f_events",
            "model.my_meltano_project.report_daily_retantion_rate_past30days"
        ],
        "model.my_meltano_project.link__wallet_provider__has__event": [
            "model.my_meltano_project.calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.link__wallet_provider__has__transaction": [
            "model.my_meltano_project.f_transactions"
        ],
        "model.my_meltano_project.link__wallet__has__blockchain": [
            "model.my_meltano_project.f_decomposition_operation"
        ],
        "model.my_meltano_project.anchor__asset": [
            "model.my_meltano_project.d_asset",
            "model.my_meltano_project.d_asset"
        ],
        "model.my_meltano_project.attr__asset__asset_decimals": [
            "model.my_meltano_project.d_asset",
            "model.my_meltano_project.d_asset"
        ],
        "model.my_meltano_project.attr__asset__asset_name": [
            "model.my_meltano_project.d_asset",
            "model.my_meltano_project.d_asset"
        ],
        "model.my_meltano_project.attr__asset__asset_symbol": [
            "model.my_meltano_project.d_asset",
            "model.my_meltano_project.d_asset"
        ],
        "model.my_meltano_project.anchor__blockchain": [],
        "model.my_meltano_project.anchor__position": [],
        "model.my_meltano_project.anchor__protocol": [],
        "model.my_meltano_project.anchor__transaction": [
            "model.my_meltano_project.calc__transaction__transaction_value_usd",
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_api_client_name": [
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_context": [
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_contract_type": [
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_origin": [
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_type": [
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_zerion_fee_usd": [
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_amount_received_usd": [
            "model.my_meltano_project.calc__transaction__transaction_value_usd",
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.attr__transaction__transaction_amount_sent_usd": [
            "model.my_meltano_project.calc__transaction__transaction_value_usd",
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.anchor__wallet": [
            "model.my_meltano_project.d_wallet",
            "model.my_meltano_project.report_daily_retantion_rate_past30days"
        ],
        "model.my_meltano_project.anchor__wallet_provider": [],
        "model.my_meltano_project.anchor__event": [
            "model.my_meltano_project.d_event"
        ],
        "model.my_meltano_project.attr__event__event_api_client_name": [
            "model.my_meltano_project.calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name",
            "model.my_meltano_project.d_event",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.attr__event__event_origin": [
            "model.my_meltano_project.calc__wallet__wallet_android",
            "model.my_meltano_project.calc__wallet__wallet_coinburp",
            "model.my_meltano_project.calc__wallet__wallet_first_origin__wallet_last_origin",
            "model.my_meltano_project.calc__wallet__wallet_ios",
            "model.my_meltano_project.calc__wallet__wallet_stakedao",
            "model.my_meltano_project.calc__wallet__wallet_tokenary",
            "model.my_meltano_project.calc__wallet__wallet_visifire",
            "model.my_meltano_project.calc__wallet__wallet_web",
            "model.my_meltano_project.d_event",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.attr__event__event_type": [
            "model.my_meltano_project.d_event"
        ],
        "model.my_meltano_project.calc__wallet__wallet_nft_value": [
            "model.my_meltano_project.calc__wallet__wallet_last_nft_value",
            "model.my_meltano_project.calc__wallet__wallet_nft_value_segment",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.calc__wallet__wallet_total_value": [
            "model.my_meltano_project.calc__wallet__wallet_last_total_value",
            "model.my_meltano_project.calc__wallet__wallet_protocol_value",
            "model.my_meltano_project.calc__wallet__wallet_total_value_segment",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.calc__wallet__wallet_value": [
            "model.my_meltano_project.calc__wallet__wallet_last_value",
            "model.my_meltano_project.calc__wallet__wallet_protocol_value",
            "model.my_meltano_project.calc__wallet__wallet_value_segment",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_nft_value": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_protocol_value": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_total_value": [
            "model.my_meltano_project.d_wallet",
            "model.my_meltano_project.report_daily_retantion_rate_past30days"
        ],
        "model.my_meltano_project.calc__wallet__wallet_protocol_value": [
            "model.my_meltano_project.calc__wallet__wallet_last_protocol_value",
            "model.my_meltano_project.calc__wallet__wallet_protocol_value_segment",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.calc__wallet__wallet_first_api_client_name__wallet_last_api_client_name": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_first_origin__wallet_last_origin": [
            "model.my_meltano_project.d_wallet",
            "model.my_meltano_project.report_daily_retantion_rate_past30days"
        ],
        "model.my_meltano_project.calc__transaction__transaction_value_usd": [
            "model.my_meltano_project.calc__transaction__transaction_trash",
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.calc__wallet__wallet_android": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_coinburp": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_first_wallet_provider__wallet_last_wallet_provider": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_ios": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_stakedao": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_tokenary": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_visifire": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_web": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_nft_value_segment": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_protocol_value_segment": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_total_value_segment": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_value": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_last_value_segment": [
            "model.my_meltano_project.d_wallet"
        ],
        "model.my_meltano_project.calc__wallet__wallet_nft_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_last_nft_value_segment",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.calc__wallet__wallet_protocol_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_last_protocol_value_segment",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.calc__wallet__wallet_total_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_last_total_value_segment",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.calc__wallet__wallet_value_segment": [
            "model.my_meltano_project.calc__wallet__wallet_last_value_segment",
            "model.my_meltano_project.f_events"
        ],
        "model.my_meltano_project.calc__transaction__transaction_trash": [
            "model.my_meltano_project.d_transaction"
        ],
        "model.my_meltano_project.report_top20_protocols": [],
        "source.my_meltano_project.raw_events.portfolio_decomposition": [
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_portfolio_decomposition",
            "model.my_meltano_project.stg_portfolio_decomposition_long"
        ],
        "source.my_meltano_project.raw_events.address_positions": [
            "model.my_meltano_project.stg_address_positions",
            "model.my_meltano_project.stg_address_positions"
        ],
        "source.my_meltano_project.raw_events.wallet_connected_to_api2": [
            "model.my_meltano_project.stg_wallet_connected_to_api2",
            "model.my_meltano_project.stg_wallet_connected_to_api2"
        ],
        "source.my_meltano_project.raw_events.signed_transaction": [
            "model.my_meltano_project.stg_signed_transaction",
            "model.my_meltano_project.stg_signed_transaction"
        ]
    }
}